//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Luiz Fernando/Documents/Visual Studio 2013/Engines/ZScript/ZScript\ZScript.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class ZScriptParser : Parser {
	public const int
		StringLiteral=1, StringEscape=2, T_VAR=3, T_LET=4, T_CONST=5, T_NEW=6, 
		T_EXPORT=7, T_FUNCTION=8, T_OVERRIDE=9, T_OBJECT=10, T_SEQUENCE=11, T_IF=12, 
		T_ELSE=13, T_WHILE=14, T_FOR=15, T_BREAK=16, T_CONTINUE=17, T_SWITCH=18, 
		T_CASE=19, T_DEFAULT=20, T_RETURN=21, T_LEFT_PAREN=22, T_RIGHT_PAREN=23, 
		T_LEFT_BRACKET=24, T_RIGHT_BRACKET=25, T_LEFT_CURLY=26, T_RIGHT_CURLY=27, 
		T_CLOSURE_RETURN=28, T_CLOSURE_CALL=29, INT=30, HEX=31, BINARY=32, FLOAT=33, 
		T_FALSE=34, T_TRUE=35, T_NULL=36, T_QUOTES=37, T_DOUBLE_QUOTES=38, T_TRIPPLE_DOT=39, 
		T_DOUBLE_COLON=40, T_SEMICOLON=41, T_PERIOD=42, T_COMMA=43, T_MULT=44, 
		T_DIV=45, T_MOD=46, T_NOT=47, T_PLUS=48, T_MINUS=49, T_INCREMENT=50, T_DECREMENT=51, 
		T_BITWISE_AND=52, T_BITWISE_XOR=53, T_BITWISE_OR=54, T_EQUALITY=55, T_UNEQUALITY=56, 
		T_MORE_THAN_OR_EQUALS=57, T_LESS_THAN_OR_EQUALS=58, T_MORE_THAN=59, T_LESS_THAN=60, 
		T_LOGICAL_AND=61, T_LOGICAL_OR=62, T_EQUALS=63, T_PLUS_EQUALS=64, T_MINUS_EQUALS=65, 
		T_TIMES_EQUALS=66, T_DIV_EQUALS=67, T_MOD_EQUALS=68, T_XOR_EQUALS=69, 
		T_AND_EQUALS=70, T_TILDE_EQUALS=71, T_OR_EQUALS=72, IDENT=73, Whitespace=74, 
		Newline=75, BlockComment=76, LineComment=77, ImportDirective=78;
	public const int
		RULE_program = 0, RULE_scriptBody = 1, RULE_objectDefinition = 2, RULE_objectInherit = 3, 
		RULE_objectName = 4, RULE_objectBody = 5, RULE_objectField = 6, RULE_objectFunction = 7, 
		RULE_variableBlock = 8, RULE_functionBlock = 9, RULE_globalVariable = 10, 
		RULE_sequenceBlock = 11, RULE_sequenceName = 12, RULE_sequenceBody = 13, 
		RULE_sequenceFrame = 14, RULE_sequenceFrameChange = 15, RULE_frameRange = 16, 
		RULE_frameRangeElement = 17, RULE_frameNumber = 18, RULE_functionDefinition = 19, 
		RULE_exportDefinition = 20, RULE_functionName = 21, RULE_functionArguments = 22, 
		RULE_argumentList = 23, RULE_returnType = 24, RULE_functionArg = 25, RULE_argumentName = 26, 
		RULE_functionTriggers = 27, RULE_functionTrigger = 28, RULE_functionTriggerArgs = 29, 
		RULE_statement = 30, RULE_blockStatement = 31, RULE_ifStatement = 32, 
		RULE_elseStatement = 33, RULE_switchStatement = 34, RULE_switchBlock = 35, 
		RULE_caseBlock = 36, RULE_defaultBlock = 37, RULE_whileStatement = 38, 
		RULE_forStatement = 39, RULE_forInit = 40, RULE_returnStatement = 41, 
		RULE_valueDecl = 42, RULE_varDecl = 43, RULE_letDecl = 44, RULE_variableDeclare = 45, 
		RULE_constantDeclare = 46, RULE_valueHolderDecl = 47, RULE_valueHolderName = 48, 
		RULE_type = 49, RULE_typeName = 50, RULE_closureType = 51, RULE_typeList = 52, 
		RULE_expression = 53, RULE_multOp = 54, RULE_additionOp = 55, RULE_bitwiseAndXOrOp = 56, 
		RULE_bitwiseOrOp = 57, RULE_comparisionOp = 58, RULE_logicalOp = 59, RULE_assignmentExpression = 60, 
		RULE_newExpression = 61, RULE_closureExpression = 62, RULE_unaryExpression = 63, 
		RULE_prefixOperator = 64, RULE_postfixOperator = 65, RULE_assignmentOperator = 66, 
		RULE_funcCallArguments = 67, RULE_expressionList = 68, RULE_leftValue = 69, 
		RULE_leftValueAccess = 70, RULE_functionCall = 71, RULE_fieldAccess = 72, 
		RULE_arrayAccess = 73, RULE_objectAccess = 74, RULE_valueAccess = 75, 
		RULE_memberName = 76, RULE_arrayLiteral = 77, RULE_objectLiteral = 78, 
		RULE_objectEntryList = 79, RULE_objectEntryDefinition = 80, RULE_entryName = 81, 
		RULE_constant = 82, RULE_constantAtom = 83, RULE_stringLiteral = 84, RULE_numericAtom = 85, 
		RULE_hexadecimalNumber = 86, RULE_binaryNumber = 87;
	public static readonly string[] ruleNames = {
		"program", "scriptBody", "objectDefinition", "objectInherit", "objectName", 
		"objectBody", "objectField", "objectFunction", "variableBlock", "functionBlock", 
		"globalVariable", "sequenceBlock", "sequenceName", "sequenceBody", "sequenceFrame", 
		"sequenceFrameChange", "frameRange", "frameRangeElement", "frameNumber", 
		"functionDefinition", "exportDefinition", "functionName", "functionArguments", 
		"argumentList", "returnType", "functionArg", "argumentName", "functionTriggers", 
		"functionTrigger", "functionTriggerArgs", "statement", "blockStatement", 
		"ifStatement", "elseStatement", "switchStatement", "switchBlock", "caseBlock", 
		"defaultBlock", "whileStatement", "forStatement", "forInit", "returnStatement", 
		"valueDecl", "varDecl", "letDecl", "variableDeclare", "constantDeclare", 
		"valueHolderDecl", "valueHolderName", "type", "typeName", "closureType", 
		"typeList", "expression", "multOp", "additionOp", "bitwiseAndXOrOp", "bitwiseOrOp", 
		"comparisionOp", "logicalOp", "assignmentExpression", "newExpression", 
		"closureExpression", "unaryExpression", "prefixOperator", "postfixOperator", 
		"assignmentOperator", "funcCallArguments", "expressionList", "leftValue", 
		"leftValueAccess", "functionCall", "fieldAccess", "arrayAccess", "objectAccess", 
		"valueAccess", "memberName", "arrayLiteral", "objectLiteral", "objectEntryList", 
		"objectEntryDefinition", "entryName", "constant", "constantAtom", "stringLiteral", 
		"numericAtom", "hexadecimalNumber", "binaryNumber"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'var'", "'let'", "'const'", "'new'", "'@'", "'function'", 
		"'override'", "'object'", "'sequence'", "'if'", "'else'", "'while'", "'for'", 
		"'break'", "'continue'", "'switch'", "'case'", "'default'", "'return'", 
		"'('", "')'", "'['", "']'", "'{'", "'}'", "'->'", "'=>'", null, null, 
		null, null, "'false'", "'true'", "'null'", "'''", "'\"'", "'...'", "':'", 
		"';'", "'.'", "','", "'*'", "'/'", "'%'", "'!'", "'+'", "'-'", "'++'", 
		"'--'", "'&'", "'^'", "'|'", "'=='", "'!='", "'>='", "'<='", "'>'", "'<'", 
		"'&&'", "'||'", "'='", "'+='", "'-='", "'*='", "'/='", "'%='", "'^='", 
		"'&='", "'~='", "'|='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "StringLiteral", "StringEscape", "T_VAR", "T_LET", "T_CONST", "T_NEW", 
		"T_EXPORT", "T_FUNCTION", "T_OVERRIDE", "T_OBJECT", "T_SEQUENCE", "T_IF", 
		"T_ELSE", "T_WHILE", "T_FOR", "T_BREAK", "T_CONTINUE", "T_SWITCH", "T_CASE", 
		"T_DEFAULT", "T_RETURN", "T_LEFT_PAREN", "T_RIGHT_PAREN", "T_LEFT_BRACKET", 
		"T_RIGHT_BRACKET", "T_LEFT_CURLY", "T_RIGHT_CURLY", "T_CLOSURE_RETURN", 
		"T_CLOSURE_CALL", "INT", "HEX", "BINARY", "FLOAT", "T_FALSE", "T_TRUE", 
		"T_NULL", "T_QUOTES", "T_DOUBLE_QUOTES", "T_TRIPPLE_DOT", "T_DOUBLE_COLON", 
		"T_SEMICOLON", "T_PERIOD", "T_COMMA", "T_MULT", "T_DIV", "T_MOD", "T_NOT", 
		"T_PLUS", "T_MINUS", "T_INCREMENT", "T_DECREMENT", "T_BITWISE_AND", "T_BITWISE_XOR", 
		"T_BITWISE_OR", "T_EQUALITY", "T_UNEQUALITY", "T_MORE_THAN_OR_EQUALS", 
		"T_LESS_THAN_OR_EQUALS", "T_MORE_THAN", "T_LESS_THAN", "T_LOGICAL_AND", 
		"T_LOGICAL_OR", "T_EQUALS", "T_PLUS_EQUALS", "T_MINUS_EQUALS", "T_TIMES_EQUALS", 
		"T_DIV_EQUALS", "T_MOD_EQUALS", "T_XOR_EQUALS", "T_AND_EQUALS", "T_TILDE_EQUALS", 
		"T_OR_EQUALS", "IDENT", "Whitespace", "Newline", "BlockComment", "LineComment", 
		"ImportDirective"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ZScript.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public ZScriptParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ScriptBodyContext scriptBody() {
			return GetRuleContext<ScriptBodyContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176; scriptBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptBodyContext : ParserRuleContext {
		public VariableBlockContext[] variableBlock() {
			return GetRuleContexts<VariableBlockContext>();
		}
		public VariableBlockContext variableBlock(int i) {
			return GetRuleContext<VariableBlockContext>(i);
		}
		public FunctionBlockContext[] functionBlock() {
			return GetRuleContexts<FunctionBlockContext>();
		}
		public FunctionBlockContext functionBlock(int i) {
			return GetRuleContext<FunctionBlockContext>(i);
		}
		public ObjectDefinitionContext[] objectDefinition() {
			return GetRuleContexts<ObjectDefinitionContext>();
		}
		public ObjectDefinitionContext objectDefinition(int i) {
			return GetRuleContext<ObjectDefinitionContext>(i);
		}
		public SequenceBlockContext[] sequenceBlock() {
			return GetRuleContexts<SequenceBlockContext>();
		}
		public SequenceBlockContext sequenceBlock(int i) {
			return GetRuleContext<SequenceBlockContext>(i);
		}
		public ScriptBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scriptBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterScriptBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitScriptBody(this);
		}
	}

	[RuleVersion(0)]
	public ScriptBodyContext scriptBody() {
		ScriptBodyContext _localctx = new ScriptBodyContext(Context, State);
		EnterRule(_localctx, 2, RULE_scriptBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T_OBJECT) | (1L << T_SEQUENCE) | (1L << T_LEFT_BRACKET) | (1L << T_LEFT_CURLY))) != 0)) {
				{
				State = 182;
				switch (TokenStream.La(1)) {
				case T_LEFT_BRACKET:
					{
					State = 178; variableBlock();
					}
					break;
				case T_LEFT_CURLY:
					{
					State = 179; functionBlock();
					}
					break;
				case T_OBJECT:
					{
					State = 180; objectDefinition();
					}
					break;
				case T_SEQUENCE:
					{
					State = 181; sequenceBlock();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 186;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectDefinitionContext : ParserRuleContext {
		public ObjectNameContext objectName() {
			return GetRuleContext<ObjectNameContext>(0);
		}
		public ObjectBodyContext objectBody() {
			return GetRuleContext<ObjectBodyContext>(0);
		}
		public ObjectInheritContext objectInherit() {
			return GetRuleContext<ObjectInheritContext>(0);
		}
		public ObjectDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterObjectDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitObjectDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ObjectDefinitionContext objectDefinition() {
		ObjectDefinitionContext _localctx = new ObjectDefinitionContext(Context, State);
		EnterRule(_localctx, 4, RULE_objectDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187; Match(T_OBJECT);
			State = 188; objectName();
			State = 190;
			_la = TokenStream.La(1);
			if (_la==T_DOUBLE_COLON) {
				{
				State = 189; objectInherit();
				}
			}

			State = 192; objectBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectInheritContext : ParserRuleContext {
		public ObjectNameContext objectName() {
			return GetRuleContext<ObjectNameContext>(0);
		}
		public ObjectInheritContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectInherit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterObjectInherit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitObjectInherit(this);
		}
	}

	[RuleVersion(0)]
	public ObjectInheritContext objectInherit() {
		ObjectInheritContext _localctx = new ObjectInheritContext(Context, State);
		EnterRule(_localctx, 6, RULE_objectInherit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194; Match(T_DOUBLE_COLON);
			State = 195; objectName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectNameContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(ZScriptParser.IDENT, 0); }
		public ObjectNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterObjectName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitObjectName(this);
		}
	}

	[RuleVersion(0)]
	public ObjectNameContext objectName() {
		ObjectNameContext _localctx = new ObjectNameContext(Context, State);
		EnterRule(_localctx, 8, RULE_objectName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197; Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectBodyContext : ParserRuleContext {
		public ObjectFieldContext[] objectField() {
			return GetRuleContexts<ObjectFieldContext>();
		}
		public ObjectFieldContext objectField(int i) {
			return GetRuleContext<ObjectFieldContext>(i);
		}
		public ObjectFunctionContext[] objectFunction() {
			return GetRuleContexts<ObjectFunctionContext>();
		}
		public ObjectFunctionContext objectFunction(int i) {
			return GetRuleContext<ObjectFunctionContext>(i);
		}
		public ObjectBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterObjectBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitObjectBody(this);
		}
	}

	[RuleVersion(0)]
	public ObjectBodyContext objectBody() {
		ObjectBodyContext _localctx = new ObjectBodyContext(Context, State);
		EnterRule(_localctx, 10, RULE_objectBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199; Match(T_LEFT_CURLY);
			State = 204;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T_VAR) | (1L << T_FUNCTION) | (1L << T_OVERRIDE))) != 0)) {
				{
				State = 202;
				switch (TokenStream.La(1)) {
				case T_VAR:
					{
					State = 200; objectField();
					}
					break;
				case T_FUNCTION:
				case T_OVERRIDE:
					{
					State = 201; objectFunction();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 206;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 207; Match(T_RIGHT_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectFieldContext : ParserRuleContext {
		public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		public ObjectFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectField; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterObjectField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitObjectField(this);
		}
	}

	[RuleVersion(0)]
	public ObjectFieldContext objectField() {
		ObjectFieldContext _localctx = new ObjectFieldContext(Context, State);
		EnterRule(_localctx, 12, RULE_objectField);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209; varDecl();
			State = 210; Match(T_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectFunctionContext : ParserRuleContext {
		public FunctionDefinitionContext functionDefinition() {
			return GetRuleContext<FunctionDefinitionContext>(0);
		}
		public ObjectFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterObjectFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitObjectFunction(this);
		}
	}

	[RuleVersion(0)]
	public ObjectFunctionContext objectFunction() {
		ObjectFunctionContext _localctx = new ObjectFunctionContext(Context, State);
		EnterRule(_localctx, 14, RULE_objectFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			_la = TokenStream.La(1);
			if (_la==T_OVERRIDE) {
				{
				State = 212; Match(T_OVERRIDE);
				}
			}

			State = 215; Match(T_FUNCTION);
			State = 216; functionDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableBlockContext : ParserRuleContext {
		public GlobalVariableContext[] globalVariable() {
			return GetRuleContexts<GlobalVariableContext>();
		}
		public GlobalVariableContext globalVariable(int i) {
			return GetRuleContext<GlobalVariableContext>(i);
		}
		public VariableBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterVariableBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitVariableBlock(this);
		}
	}

	[RuleVersion(0)]
	public VariableBlockContext variableBlock() {
		VariableBlockContext _localctx = new VariableBlockContext(Context, State);
		EnterRule(_localctx, 16, RULE_variableBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218; Match(T_LEFT_BRACKET);
			State = 222;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T_CONST || _la==IDENT) {
				{
				{
				State = 219; globalVariable();
				}
				}
				State = 224;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 225; Match(T_RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBlockContext : ParserRuleContext {
		public VariableBlockContext[] variableBlock() {
			return GetRuleContexts<VariableBlockContext>();
		}
		public VariableBlockContext variableBlock(int i) {
			return GetRuleContext<VariableBlockContext>(i);
		}
		public ExportDefinitionContext[] exportDefinition() {
			return GetRuleContexts<ExportDefinitionContext>();
		}
		public ExportDefinitionContext exportDefinition(int i) {
			return GetRuleContext<ExportDefinitionContext>(i);
		}
		public FunctionDefinitionContext[] functionDefinition() {
			return GetRuleContexts<FunctionDefinitionContext>();
		}
		public FunctionDefinitionContext functionDefinition(int i) {
			return GetRuleContext<FunctionDefinitionContext>(i);
		}
		public FunctionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFunctionBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFunctionBlock(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBlockContext functionBlock() {
		FunctionBlockContext _localctx = new FunctionBlockContext(Context, State);
		EnterRule(_localctx, 18, RULE_functionBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227; Match(T_LEFT_CURLY);
			State = 233;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T_EXPORT || _la==T_LEFT_BRACKET || _la==IDENT) {
				{
				State = 231;
				switch (TokenStream.La(1)) {
				case T_LEFT_BRACKET:
					{
					State = 228; variableBlock();
					}
					break;
				case T_EXPORT:
					{
					State = 229; exportDefinition();
					}
					break;
				case IDENT:
					{
					State = 230; functionDefinition();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 235;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 236; Match(T_RIGHT_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVariableContext : ParserRuleContext {
		public VariableDeclareContext variableDeclare() {
			return GetRuleContext<VariableDeclareContext>(0);
		}
		public GlobalVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterGlobalVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitGlobalVariable(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVariableContext globalVariable() {
		GlobalVariableContext _localctx = new GlobalVariableContext(Context, State);
		EnterRule(_localctx, 20, RULE_globalVariable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			_la = TokenStream.La(1);
			if (_la==T_CONST) {
				{
				State = 238; Match(T_CONST);
				}
			}

			State = 241; variableDeclare();
			State = 242; Match(T_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SequenceBlockContext : ParserRuleContext {
		public SequenceNameContext sequenceName() {
			return GetRuleContext<SequenceNameContext>(0);
		}
		public SequenceBodyContext sequenceBody() {
			return GetRuleContext<SequenceBodyContext>(0);
		}
		public SequenceBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequenceBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterSequenceBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitSequenceBlock(this);
		}
	}

	[RuleVersion(0)]
	public SequenceBlockContext sequenceBlock() {
		SequenceBlockContext _localctx = new SequenceBlockContext(Context, State);
		EnterRule(_localctx, 22, RULE_sequenceBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244; Match(T_SEQUENCE);
			State = 245; sequenceName();
			State = 246; sequenceBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SequenceNameContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(ZScriptParser.IDENT, 0); }
		public SequenceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequenceName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterSequenceName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitSequenceName(this);
		}
	}

	[RuleVersion(0)]
	public SequenceNameContext sequenceName() {
		SequenceNameContext _localctx = new SequenceNameContext(Context, State);
		EnterRule(_localctx, 24, RULE_sequenceName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248; Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SequenceBodyContext : ParserRuleContext {
		public ObjectFieldContext[] objectField() {
			return GetRuleContexts<ObjectFieldContext>();
		}
		public ObjectFieldContext objectField(int i) {
			return GetRuleContext<ObjectFieldContext>(i);
		}
		public SequenceFrameContext[] sequenceFrame() {
			return GetRuleContexts<SequenceFrameContext>();
		}
		public SequenceFrameContext sequenceFrame(int i) {
			return GetRuleContext<SequenceFrameContext>(i);
		}
		public SequenceFrameChangeContext[] sequenceFrameChange() {
			return GetRuleContexts<SequenceFrameChangeContext>();
		}
		public SequenceFrameChangeContext sequenceFrameChange(int i) {
			return GetRuleContext<SequenceFrameChangeContext>(i);
		}
		public SequenceBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequenceBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterSequenceBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitSequenceBody(this);
		}
	}

	[RuleVersion(0)]
	public SequenceBodyContext sequenceBody() {
		SequenceBodyContext _localctx = new SequenceBodyContext(Context, State);
		EnterRule(_localctx, 26, RULE_sequenceBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250; Match(T_LEFT_BRACKET);
			State = 256;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T_VAR) | (1L << T_LEFT_CURLY) | (1L << INT) | (1L << T_PLUS) | (1L << T_MINUS) | (1L << T_EQUALS))) != 0)) {
				{
				State = 254;
				switch (TokenStream.La(1)) {
				case T_VAR:
					{
					State = 251; objectField();
					}
					break;
				case T_LEFT_CURLY:
				case INT:
				case T_PLUS:
					{
					State = 252; sequenceFrame();
					}
					break;
				case T_MINUS:
				case T_EQUALS:
					{
					State = 253; sequenceFrameChange();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 258;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 259; Match(T_RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SequenceFrameContext : ParserRuleContext {
		public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		public FrameRangeContext frameRange() {
			return GetRuleContext<FrameRangeContext>(0);
		}
		public SequenceFrameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequenceFrame; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterSequenceFrame(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitSequenceFrame(this);
		}
	}

	[RuleVersion(0)]
	public SequenceFrameContext sequenceFrame() {
		SequenceFrameContext _localctx = new SequenceFrameContext(Context, State);
		EnterRule(_localctx, 28, RULE_sequenceFrame);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			_la = TokenStream.La(1);
			if (_la==INT || _la==T_PLUS) {
				{
				State = 261; frameRange();
				}
			}

			State = 264; blockStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SequenceFrameChangeContext : ParserRuleContext {
		public FrameNumberContext frameNumber() {
			return GetRuleContext<FrameNumberContext>(0);
		}
		public SequenceFrameChangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequenceFrameChange; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterSequenceFrameChange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitSequenceFrameChange(this);
		}
	}

	[RuleVersion(0)]
	public SequenceFrameChangeContext sequenceFrameChange() {
		SequenceFrameChangeContext _localctx = new SequenceFrameChangeContext(Context, State);
		EnterRule(_localctx, 30, RULE_sequenceFrameChange);
		try {
			State = 270;
			switch (TokenStream.La(1)) {
			case T_EQUALS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 266; Match(T_EQUALS);
				State = 267; frameNumber();
				}
				break;
			case T_MINUS:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 268; Match(T_MINUS);
				State = 269; frameNumber();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameRangeContext : ParserRuleContext {
		public FrameRangeElementContext[] frameRangeElement() {
			return GetRuleContexts<FrameRangeElementContext>();
		}
		public FrameRangeElementContext frameRangeElement(int i) {
			return GetRuleContext<FrameRangeElementContext>(i);
		}
		public FrameRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameRange; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFrameRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFrameRange(this);
		}
	}

	[RuleVersion(0)]
	public FrameRangeContext frameRange() {
		FrameRangeContext _localctx = new FrameRangeContext(Context, State);
		EnterRule(_localctx, 32, RULE_frameRange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272; frameRangeElement();
			State = 277;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T_COMMA) {
				{
				{
				State = 273; Match(T_COMMA);
				State = 274; frameRangeElement();
				}
				}
				State = 279;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameRangeElementContext : ParserRuleContext {
		public FrameNumberContext[] frameNumber() {
			return GetRuleContexts<FrameNumberContext>();
		}
		public FrameNumberContext frameNumber(int i) {
			return GetRuleContext<FrameNumberContext>(i);
		}
		public FrameRangeElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameRangeElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFrameRangeElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFrameRangeElement(this);
		}
	}

	[RuleVersion(0)]
	public FrameRangeElementContext frameRangeElement() {
		FrameRangeElementContext _localctx = new FrameRangeElementContext(Context, State);
		EnterRule(_localctx, 34, RULE_frameRangeElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281;
			_la = TokenStream.La(1);
			if (_la==T_PLUS) {
				{
				State = 280; Match(T_PLUS);
				}
			}

			State = 283; frameNumber();
			State = 286;
			_la = TokenStream.La(1);
			if (_la==T_MINUS) {
				{
				State = 284; Match(T_MINUS);
				State = 285; frameNumber();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameNumberContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(ZScriptParser.INT, 0); }
		public FrameNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFrameNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFrameNumber(this);
		}
	}

	[RuleVersion(0)]
	public FrameNumberContext frameNumber() {
		FrameNumberContext _localctx = new FrameNumberContext(Context, State);
		EnterRule(_localctx, 36, RULE_frameNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288; Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		public FunctionArgumentsContext functionArguments() {
			return GetRuleContext<FunctionArgumentsContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public FunctionTriggersContext functionTriggers() {
			return GetRuleContext<FunctionTriggersContext>(0);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFunctionDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFunctionDefinition(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 38, RULE_functionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290; functionName();
			State = 292;
			_la = TokenStream.La(1);
			if (_la==T_LEFT_PAREN) {
				{
				State = 291; functionArguments();
				}
			}

			State = 295;
			_la = TokenStream.La(1);
			if (_la==T_DOUBLE_COLON) {
				{
				State = 294; returnType();
				}
			}

			State = 298;
			_la = TokenStream.La(1);
			if (_la==T_EQUALS) {
				{
				State = 297; functionTriggers();
				}
			}

			State = 300; blockStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportDefinitionContext : ParserRuleContext {
		public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		public FunctionArgumentsContext functionArguments() {
			return GetRuleContext<FunctionArgumentsContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public ExportDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterExportDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitExportDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ExportDefinitionContext exportDefinition() {
		ExportDefinitionContext _localctx = new ExportDefinitionContext(Context, State);
		EnterRule(_localctx, 40, RULE_exportDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302; Match(T_EXPORT);
			State = 303; functionName();
			State = 305;
			_la = TokenStream.La(1);
			if (_la==T_LEFT_PAREN) {
				{
				State = 304; functionArguments();
				}
			}

			State = 308;
			_la = TokenStream.La(1);
			if (_la==T_DOUBLE_COLON) {
				{
				State = 307; returnType();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionNameContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(ZScriptParser.IDENT, 0); }
		public FunctionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFunctionName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFunctionName(this);
		}
	}

	[RuleVersion(0)]
	public FunctionNameContext functionName() {
		FunctionNameContext _localctx = new FunctionNameContext(Context, State);
		EnterRule(_localctx, 42, RULE_functionName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 310; Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionArgumentsContext : ParserRuleContext {
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public FunctionArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFunctionArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFunctionArguments(this);
		}
	}

	[RuleVersion(0)]
	public FunctionArgumentsContext functionArguments() {
		FunctionArgumentsContext _localctx = new FunctionArgumentsContext(Context, State);
		EnterRule(_localctx, 44, RULE_functionArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312; Match(T_LEFT_PAREN);
			State = 314;
			_la = TokenStream.La(1);
			if (_la==IDENT) {
				{
				State = 313; argumentList();
				}
			}

			State = 316; Match(T_RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public FunctionArgContext[] functionArg() {
			return GetRuleContexts<FunctionArgContext>();
		}
		public FunctionArgContext functionArg(int i) {
			return GetRuleContext<FunctionArgContext>(i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 46, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318; functionArg();
			State = 323;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T_COMMA) {
				{
				{
				State = 319; Match(T_COMMA);
				State = 320; functionArg();
				}
				}
				State = 325;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnTypeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterReturnType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitReturnType(this);
		}
	}

	[RuleVersion(0)]
	public ReturnTypeContext returnType() {
		ReturnTypeContext _localctx = new ReturnTypeContext(Context, State);
		EnterRule(_localctx, 48, RULE_returnType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 326; Match(T_DOUBLE_COLON);
			State = 327; type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionArgContext : ParserRuleContext {
		public ArgumentNameContext argumentName() {
			return GetRuleContext<ArgumentNameContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public FunctionArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFunctionArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFunctionArg(this);
		}
	}

	[RuleVersion(0)]
	public FunctionArgContext functionArg() {
		FunctionArgContext _localctx = new FunctionArgContext(Context, State);
		EnterRule(_localctx, 50, RULE_functionArg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 329; argumentName();
			State = 332;
			_la = TokenStream.La(1);
			if (_la==T_DOUBLE_COLON) {
				{
				State = 330; Match(T_DOUBLE_COLON);
				State = 331; type();
				}
			}

			State = 337;
			switch (TokenStream.La(1)) {
			case T_TRIPPLE_DOT:
				{
				State = 334; Match(T_TRIPPLE_DOT);
				}
				break;
			case T_EQUALS:
				{
				{
				State = 335; Match(T_EQUALS);
				State = 336; constant();
				}
				}
				break;
			case T_RIGHT_PAREN:
			case T_COMMA:
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentNameContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(ZScriptParser.IDENT, 0); }
		public ArgumentNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterArgumentName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitArgumentName(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentNameContext argumentName() {
		ArgumentNameContext _localctx = new ArgumentNameContext(Context, State);
		EnterRule(_localctx, 52, RULE_argumentName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339; Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTriggersContext : ParserRuleContext {
		public FunctionTriggerContext[] functionTrigger() {
			return GetRuleContexts<FunctionTriggerContext>();
		}
		public FunctionTriggerContext functionTrigger(int i) {
			return GetRuleContext<FunctionTriggerContext>(i);
		}
		public FunctionTriggersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionTriggers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFunctionTriggers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFunctionTriggers(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTriggersContext functionTriggers() {
		FunctionTriggersContext _localctx = new FunctionTriggersContext(Context, State);
		EnterRule(_localctx, 54, RULE_functionTriggers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341; Match(T_EQUALS);
			State = 342; functionTrigger();
			State = 347;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T_COMMA) {
				{
				{
				State = 343; Match(T_COMMA);
				State = 344; functionTrigger();
				}
				}
				State = 349;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTriggerContext : ParserRuleContext {
		public ConstantAtomContext constantAtom() {
			return GetRuleContext<ConstantAtomContext>(0);
		}
		public FunctionTriggerArgsContext functionTriggerArgs() {
			return GetRuleContext<FunctionTriggerArgsContext>(0);
		}
		public FunctionTriggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionTrigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFunctionTrigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFunctionTrigger(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTriggerContext functionTrigger() {
		FunctionTriggerContext _localctx = new FunctionTriggerContext(Context, State);
		EnterRule(_localctx, 56, RULE_functionTrigger);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 350; constantAtom();
			State = 352;
			_la = TokenStream.La(1);
			if (_la==T_LEFT_PAREN) {
				{
				State = 351; functionTriggerArgs();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTriggerArgsContext : ParserRuleContext {
		public ConstantAtomContext[] constantAtom() {
			return GetRuleContexts<ConstantAtomContext>();
		}
		public ConstantAtomContext constantAtom(int i) {
			return GetRuleContext<ConstantAtomContext>(i);
		}
		public FunctionTriggerArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionTriggerArgs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFunctionTriggerArgs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFunctionTriggerArgs(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTriggerArgsContext functionTriggerArgs() {
		FunctionTriggerArgsContext _localctx = new FunctionTriggerArgsContext(Context, State);
		EnterRule(_localctx, 58, RULE_functionTriggerArgs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 354; Match(T_LEFT_PAREN);
			State = 355; constantAtom();
			State = 360;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T_COMMA) {
				{
				{
				State = 356; Match(T_COMMA);
				State = 357; constantAtom();
				}
				}
				State = 362;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 363; Match(T_RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public ValueDeclContext valueDecl() {
			return GetRuleContext<ValueDeclContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 60, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379;
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				{
				State = 367;
				switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
				case 1:
					{
					State = 365; expression(0);
					}
					break;
				case 2:
					{
					State = 366; assignmentExpression();
					}
					break;
				}
				State = 369; Match(T_SEMICOLON);
				}
				}
				break;
			case 2:
				{
				State = 371; blockStatement();
				}
				break;
			case 3:
				{
				State = 372; Match(T_SEMICOLON);
				}
				break;
			case 4:
				{
				State = 373; ifStatement();
				}
				break;
			case 5:
				{
				State = 374; whileStatement();
				}
				break;
			case 6:
				{
				State = 375; forStatement();
				}
				break;
			case 7:
				{
				State = 376; switchStatement();
				}
				break;
			case 8:
				{
				State = 377; returnStatement();
				}
				break;
			case 9:
				{
				State = 378; valueDecl();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(Context, State);
		EnterRule(_localctx, 62, RULE_blockStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 381; Match(T_LEFT_CURLY);
			State = 385;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << StringLiteral) | (1L << T_VAR) | (1L << T_LET) | (1L << T_NEW) | (1L << T_IF) | (1L << T_WHILE) | (1L << T_FOR) | (1L << T_SWITCH) | (1L << T_RETURN) | (1L << T_LEFT_PAREN) | (1L << T_LEFT_BRACKET) | (1L << T_LEFT_CURLY) | (1L << INT) | (1L << HEX) | (1L << BINARY) | (1L << FLOAT) | (1L << T_FALSE) | (1L << T_TRUE) | (1L << T_NULL) | (1L << T_SEMICOLON) | (1L << T_NOT) | (1L << T_PLUS) | (1L << T_MINUS) | (1L << T_INCREMENT) | (1L << T_DECREMENT))) != 0) || _la==IDENT) {
				{
				{
				State = 382; statement();
				}
				}
				State = 387;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 388; Match(T_RIGHT_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 64, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 390; Match(T_IF);
			State = 391; Match(T_LEFT_PAREN);
			State = 392; expression(0);
			State = 393; Match(T_RIGHT_PAREN);
			State = 394; statement();
			State = 396;
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				{
				State = 395; elseStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 66, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 398; Match(T_ELSE);
			State = 399; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SwitchBlockContext switchBlock() {
			return GetRuleContext<SwitchBlockContext>(0);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 68, RULE_switchStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 401; Match(T_SWITCH);
			State = 402; Match(T_LEFT_PAREN);
			State = 403; expression(0);
			State = 404; Match(T_RIGHT_PAREN);
			State = 405; switchBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBlockContext : ParserRuleContext {
		public CaseBlockContext[] caseBlock() {
			return GetRuleContexts<CaseBlockContext>();
		}
		public CaseBlockContext caseBlock(int i) {
			return GetRuleContext<CaseBlockContext>(i);
		}
		public DefaultBlockContext[] defaultBlock() {
			return GetRuleContexts<DefaultBlockContext>();
		}
		public DefaultBlockContext defaultBlock(int i) {
			return GetRuleContext<DefaultBlockContext>(i);
		}
		public SwitchBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterSwitchBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitSwitchBlock(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBlockContext switchBlock() {
		SwitchBlockContext _localctx = new SwitchBlockContext(Context, State);
		EnterRule(_localctx, 70, RULE_switchBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 407; Match(T_LEFT_CURLY);
			State = 412;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T_CASE || _la==T_DEFAULT) {
				{
				State = 410;
				switch (TokenStream.La(1)) {
				case T_CASE:
					{
					State = 408; caseBlock();
					}
					break;
				case T_DEFAULT:
					{
					State = 409; defaultBlock();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 414;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 415; Match(T_RIGHT_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseBlockContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CaseBlockContext caseBlock() {
			return GetRuleContext<CaseBlockContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public CaseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterCaseBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitCaseBlock(this);
		}
	}

	[RuleVersion(0)]
	public CaseBlockContext caseBlock() {
		CaseBlockContext _localctx = new CaseBlockContext(Context, State);
		EnterRule(_localctx, 72, RULE_caseBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 417; Match(T_CASE);
			State = 418; expression(0);
			State = 419; Match(T_DOUBLE_COLON);
			State = 425;
			switch (TokenStream.La(1)) {
			case T_CASE:
				{
				{
				State = 420; caseBlock();
				}
				}
				break;
			case StringLiteral:
			case T_VAR:
			case T_LET:
			case T_NEW:
			case T_IF:
			case T_WHILE:
			case T_FOR:
			case T_SWITCH:
			case T_RETURN:
			case T_LEFT_PAREN:
			case T_LEFT_BRACKET:
			case T_LEFT_CURLY:
			case INT:
			case HEX:
			case BINARY:
			case FLOAT:
			case T_FALSE:
			case T_TRUE:
			case T_NULL:
			case T_SEMICOLON:
			case T_NOT:
			case T_PLUS:
			case T_MINUS:
			case T_INCREMENT:
			case T_DECREMENT:
			case IDENT:
				{
				{
				State = 421; statement();
				State = 422; Match(T_BREAK);
				State = 423; Match(T_SEMICOLON);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultBlockContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public DefaultBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterDefaultBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitDefaultBlock(this);
		}
	}

	[RuleVersion(0)]
	public DefaultBlockContext defaultBlock() {
		DefaultBlockContext _localctx = new DefaultBlockContext(Context, State);
		EnterRule(_localctx, 74, RULE_defaultBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 427; Match(T_DEFAULT);
			State = 428; Match(T_DOUBLE_COLON);
			State = 429; statement();
			State = 430; Match(T_BREAK);
			State = 431; Match(T_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 76, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 433; Match(T_WHILE);
			State = 434; Match(T_LEFT_PAREN);
			State = 435; expression(0);
			State = 436; Match(T_RIGHT_PAREN);
			State = 437; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ForInitContext forInit() {
			return GetRuleContext<ForInitContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 78, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 439; Match(T_FOR);
			State = 440; Match(T_LEFT_PAREN);
			State = 442;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << StringLiteral) | (1L << T_VAR) | (1L << T_NEW) | (1L << T_LEFT_PAREN) | (1L << T_LEFT_BRACKET) | (1L << T_LEFT_CURLY) | (1L << INT) | (1L << HEX) | (1L << BINARY) | (1L << FLOAT) | (1L << T_FALSE) | (1L << T_TRUE) | (1L << T_NULL) | (1L << T_NOT) | (1L << T_PLUS) | (1L << T_MINUS) | (1L << T_INCREMENT) | (1L << T_DECREMENT))) != 0) || _la==IDENT) {
				{
				State = 441; forInit();
				}
			}

			State = 444; Match(T_SEMICOLON);
			State = 446;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << StringLiteral) | (1L << T_NEW) | (1L << T_LEFT_PAREN) | (1L << T_LEFT_BRACKET) | (1L << T_LEFT_CURLY) | (1L << INT) | (1L << HEX) | (1L << BINARY) | (1L << FLOAT) | (1L << T_FALSE) | (1L << T_TRUE) | (1L << T_NULL) | (1L << T_NOT) | (1L << T_PLUS) | (1L << T_MINUS) | (1L << T_INCREMENT) | (1L << T_DECREMENT))) != 0) || _la==IDENT) {
				{
				State = 445; expression(0);
				}
			}

			State = 448; Match(T_SEMICOLON);
			State = 450;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << StringLiteral) | (1L << T_NEW) | (1L << T_LEFT_PAREN) | (1L << T_LEFT_BRACKET) | (1L << T_LEFT_CURLY) | (1L << INT) | (1L << HEX) | (1L << BINARY) | (1L << FLOAT) | (1L << T_FALSE) | (1L << T_TRUE) | (1L << T_NULL) | (1L << T_NOT) | (1L << T_PLUS) | (1L << T_MINUS) | (1L << T_INCREMENT) | (1L << T_DECREMENT))) != 0) || _la==IDENT) {
				{
				State = 449; expression(0);
				}
			}

			State = 452; Match(T_RIGHT_PAREN);
			State = 453; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitContext : ParserRuleContext {
		public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterForInit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitForInit(this);
		}
	}

	[RuleVersion(0)]
	public ForInitContext forInit() {
		ForInitContext _localctx = new ForInitContext(Context, State);
		EnterRule(_localctx, 80, RULE_forInit);
		try {
			State = 457;
			switch (TokenStream.La(1)) {
			case T_VAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 455; varDecl();
				}
				break;
			case StringLiteral:
			case T_NEW:
			case T_LEFT_PAREN:
			case T_LEFT_BRACKET:
			case T_LEFT_CURLY:
			case INT:
			case HEX:
			case BINARY:
			case FLOAT:
			case T_FALSE:
			case T_TRUE:
			case T_NULL:
			case T_NOT:
			case T_PLUS:
			case T_MINUS:
			case T_INCREMENT:
			case T_DECREMENT:
			case IDENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 456; expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 82, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 459; Match(T_RETURN);
			State = 461;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << StringLiteral) | (1L << T_NEW) | (1L << T_LEFT_PAREN) | (1L << T_LEFT_BRACKET) | (1L << T_LEFT_CURLY) | (1L << INT) | (1L << HEX) | (1L << BINARY) | (1L << FLOAT) | (1L << T_FALSE) | (1L << T_TRUE) | (1L << T_NULL) | (1L << T_NOT) | (1L << T_PLUS) | (1L << T_MINUS) | (1L << T_INCREMENT) | (1L << T_DECREMENT))) != 0) || _la==IDENT) {
				{
				State = 460; expression(0);
				}
			}

			State = 463; Match(T_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueDeclContext : ParserRuleContext {
		public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		public LetDeclContext letDecl() {
			return GetRuleContext<LetDeclContext>(0);
		}
		public ValueDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterValueDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitValueDecl(this);
		}
	}

	[RuleVersion(0)]
	public ValueDeclContext valueDecl() {
		ValueDeclContext _localctx = new ValueDeclContext(Context, State);
		EnterRule(_localctx, 84, RULE_valueDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 467;
			switch (TokenStream.La(1)) {
			case T_VAR:
				{
				State = 465; varDecl();
				}
				break;
			case T_LET:
				{
				State = 466; letDecl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 469; Match(T_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		public VariableDeclareContext variableDeclare() {
			return GetRuleContext<VariableDeclareContext>(0);
		}
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterVarDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitVarDecl(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 86, RULE_varDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 471; Match(T_VAR);
			State = 472; variableDeclare();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetDeclContext : ParserRuleContext {
		public ConstantDeclareContext constantDeclare() {
			return GetRuleContext<ConstantDeclareContext>(0);
		}
		public LetDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterLetDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitLetDecl(this);
		}
	}

	[RuleVersion(0)]
	public LetDeclContext letDecl() {
		LetDeclContext _localctx = new LetDeclContext(Context, State);
		EnterRule(_localctx, 88, RULE_letDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 474; Match(T_LET);
			State = 475; constantDeclare();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclareContext : ParserRuleContext {
		public ValueHolderDeclContext valueHolderDecl() {
			return GetRuleContext<ValueHolderDeclContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclare; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterVariableDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitVariableDeclare(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclareContext variableDeclare() {
		VariableDeclareContext _localctx = new VariableDeclareContext(Context, State);
		EnterRule(_localctx, 90, RULE_variableDeclare);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 477; valueHolderDecl();
			State = 480;
			_la = TokenStream.La(1);
			if (_la==T_EQUALS) {
				{
				State = 478; Match(T_EQUALS);
				State = 479; expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantDeclareContext : ParserRuleContext {
		public ValueHolderDeclContext valueHolderDecl() {
			return GetRuleContext<ValueHolderDeclContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConstantDeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantDeclare; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterConstantDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitConstantDeclare(this);
		}
	}

	[RuleVersion(0)]
	public ConstantDeclareContext constantDeclare() {
		ConstantDeclareContext _localctx = new ConstantDeclareContext(Context, State);
		EnterRule(_localctx, 92, RULE_constantDeclare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 482; valueHolderDecl();
			State = 483; Match(T_EQUALS);
			State = 484; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueHolderDeclContext : ParserRuleContext {
		public ValueHolderNameContext valueHolderName() {
			return GetRuleContext<ValueHolderNameContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ValueHolderDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueHolderDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterValueHolderDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitValueHolderDecl(this);
		}
	}

	[RuleVersion(0)]
	public ValueHolderDeclContext valueHolderDecl() {
		ValueHolderDeclContext _localctx = new ValueHolderDeclContext(Context, State);
		EnterRule(_localctx, 94, RULE_valueHolderDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 486; valueHolderName();
			State = 489;
			_la = TokenStream.La(1);
			if (_la==T_DOUBLE_COLON) {
				{
				State = 487; Match(T_DOUBLE_COLON);
				State = 488; type();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueHolderNameContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(ZScriptParser.IDENT, 0); }
		public ValueHolderNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueHolderName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterValueHolderName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitValueHolderName(this);
		}
	}

	[RuleVersion(0)]
	public ValueHolderNameContext valueHolderName() {
		ValueHolderNameContext _localctx = new ValueHolderNameContext(Context, State);
		EnterRule(_localctx, 96, RULE_valueHolderName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 491; Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ClosureTypeContext closureType() {
			return GetRuleContext<ClosureTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 98, RULE_type);
		try {
			State = 496;
			switch (TokenStream.La(1)) {
			case T_OBJECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 493; Match(T_OBJECT);
				}
				break;
			case IDENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 494; typeName();
				}
				break;
			case T_LEFT_PAREN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 495; closureType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(ZScriptParser.IDENT, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 100, RULE_typeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 498; Match(IDENT);
			State = 501;
			_la = TokenStream.La(1);
			if (_la==T_PERIOD) {
				{
				State = 499; Match(T_PERIOD);
				State = 500; typeName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClosureTypeContext : ParserRuleContext {
		public TypeListContext typeList() {
			return GetRuleContext<TypeListContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ClosureTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closureType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterClosureType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitClosureType(this);
		}
	}

	[RuleVersion(0)]
	public ClosureTypeContext closureType() {
		ClosureTypeContext _localctx = new ClosureTypeContext(Context, State);
		EnterRule(_localctx, 102, RULE_closureType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 503; Match(T_LEFT_PAREN);
			State = 505;
			_la = TokenStream.La(1);
			if (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (T_OBJECT - 10)) | (1L << (T_LEFT_PAREN - 10)) | (1L << (IDENT - 10)))) != 0)) {
				{
				State = 504; typeList();
				}
			}

			State = 507; Match(T_CLOSURE_RETURN);
			State = 509;
			_la = TokenStream.La(1);
			if (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (T_OBJECT - 10)) | (1L << (T_LEFT_PAREN - 10)) | (1L << (IDENT - 10)))) != 0)) {
				{
				State = 508; type();
				}
			}

			State = 511; Match(T_RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeListContext : ParserRuleContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public TypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterTypeList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitTypeList(this);
		}
	}

	[RuleVersion(0)]
	public TypeListContext typeList() {
		TypeListContext _localctx = new TypeListContext(Context, State);
		EnterRule(_localctx, 104, RULE_typeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 513; type();
			State = 518;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T_COMMA) {
				{
				{
				State = 514; Match(T_COMMA);
				State = 515; type();
				}
				}
				State = 520;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PrefixOperatorContext prefixOperator() {
			return GetRuleContext<PrefixOperatorContext>(0);
		}
		public LeftValueContext leftValue() {
			return GetRuleContext<LeftValueContext>(0);
		}
		public PostfixOperatorContext postfixOperator() {
			return GetRuleContext<PostfixOperatorContext>(0);
		}
		public ClosureExpressionContext closureExpression() {
			return GetRuleContext<ClosureExpressionContext>(0);
		}
		public FuncCallArgumentsContext funcCallArguments() {
			return GetRuleContext<FuncCallArgumentsContext>(0);
		}
		public MemberNameContext memberName() {
			return GetRuleContext<MemberNameContext>(0);
		}
		public ValueAccessContext valueAccess() {
			return GetRuleContext<ValueAccessContext>(0);
		}
		public ObjectLiteralContext objectLiteral() {
			return GetRuleContext<ObjectLiteralContext>(0);
		}
		public ObjectAccessContext objectAccess() {
			return GetRuleContext<ObjectAccessContext>(0);
		}
		public NewExpressionContext newExpression() {
			return GetRuleContext<NewExpressionContext>(0);
		}
		public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		public ConstantAtomContext constantAtom() {
			return GetRuleContext<ConstantAtomContext>(0);
		}
		public MultOpContext multOp() {
			return GetRuleContext<MultOpContext>(0);
		}
		public AdditionOpContext additionOp() {
			return GetRuleContext<AdditionOpContext>(0);
		}
		public BitwiseAndXOrOpContext bitwiseAndXOrOp() {
			return GetRuleContext<BitwiseAndXOrOpContext>(0);
		}
		public BitwiseOrOpContext bitwiseOrOp() {
			return GetRuleContext<BitwiseOrOpContext>(0);
		}
		public ComparisionOpContext comparisionOp() {
			return GetRuleContext<ComparisionOpContext>(0);
		}
		public LogicalOpContext logicalOp() {
			return GetRuleContext<LogicalOpContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 106;
		EnterRecursionRule(_localctx, 106, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 556;
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				{
				State = 522; Match(T_MINUS);
				State = 523; expression(10);
				}
				break;
			case 2:
				{
				State = 524; Match(T_PLUS);
				State = 525; expression(9);
				}
				break;
			case 3:
				{
				State = 526; Match(T_NOT);
				State = 527; expression(8);
				}
				break;
			case 4:
				{
				State = 528; Match(T_LEFT_PAREN);
				State = 529; expression(0);
				State = 530; Match(T_RIGHT_PAREN);
				}
				break;
			case 5:
				{
				State = 532; prefixOperator();
				State = 533; leftValue();
				}
				break;
			case 6:
				{
				State = 535; leftValue();
				State = 536; postfixOperator();
				}
				break;
			case 7:
				{
				State = 538; closureExpression();
				State = 540;
				switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
				case 1:
					{
					State = 539; funcCallArguments();
					}
					break;
				}
				}
				break;
			case 8:
				{
				State = 542; memberName();
				State = 544;
				switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
				case 1:
					{
					State = 543; valueAccess();
					}
					break;
				}
				}
				break;
			case 9:
				{
				State = 546; objectLiteral();
				State = 548;
				switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
				case 1:
					{
					State = 547; objectAccess();
					}
					break;
				}
				}
				break;
			case 10:
				{
				State = 550; newExpression();
				}
				break;
			case 11:
				{
				State = 551; arrayLiteral();
				State = 553;
				switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
				case 1:
					{
					State = 552; valueAccess();
					}
					break;
				}
				}
				break;
			case 12:
				{
				State = 555; constantAtom();
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 584;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 582;
					switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 558;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 559; multOp();
						State = 560; expression(8);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 562;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 563; additionOp();
						State = 564; expression(7);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 566;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 567; bitwiseAndXOrOp();
						State = 568; expression(6);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 570;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 571; bitwiseOrOp();
						State = 572; expression(5);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 574;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 575; comparisionOp();
						State = 576; expression(4);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 578;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 579; logicalOp();
						State = 580; expression(3);
						}
						break;
					}
					} 
				}
				State = 586;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultOpContext : ParserRuleContext {
		public MultOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterMultOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitMultOp(this);
		}
	}

	[RuleVersion(0)]
	public MultOpContext multOp() {
		MultOpContext _localctx = new MultOpContext(Context, State);
		EnterRule(_localctx, 108, RULE_multOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 587;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T_MULT) | (1L << T_DIV) | (1L << T_MOD))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditionOpContext : ParserRuleContext {
		public AdditionOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additionOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterAdditionOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitAdditionOp(this);
		}
	}

	[RuleVersion(0)]
	public AdditionOpContext additionOp() {
		AdditionOpContext _localctx = new AdditionOpContext(Context, State);
		EnterRule(_localctx, 110, RULE_additionOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 589;
			_la = TokenStream.La(1);
			if ( !(_la==T_PLUS || _la==T_MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitwiseAndXOrOpContext : ParserRuleContext {
		public BitwiseAndXOrOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwiseAndXOrOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterBitwiseAndXOrOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitBitwiseAndXOrOp(this);
		}
	}

	[RuleVersion(0)]
	public BitwiseAndXOrOpContext bitwiseAndXOrOp() {
		BitwiseAndXOrOpContext _localctx = new BitwiseAndXOrOpContext(Context, State);
		EnterRule(_localctx, 112, RULE_bitwiseAndXOrOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 591;
			_la = TokenStream.La(1);
			if ( !(_la==T_BITWISE_AND || _la==T_BITWISE_XOR) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitwiseOrOpContext : ParserRuleContext {
		public BitwiseOrOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwiseOrOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterBitwiseOrOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitBitwiseOrOp(this);
		}
	}

	[RuleVersion(0)]
	public BitwiseOrOpContext bitwiseOrOp() {
		BitwiseOrOpContext _localctx = new BitwiseOrOpContext(Context, State);
		EnterRule(_localctx, 114, RULE_bitwiseOrOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 593; Match(T_BITWISE_OR);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisionOpContext : ParserRuleContext {
		public ComparisionOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisionOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterComparisionOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitComparisionOp(this);
		}
	}

	[RuleVersion(0)]
	public ComparisionOpContext comparisionOp() {
		ComparisionOpContext _localctx = new ComparisionOpContext(Context, State);
		EnterRule(_localctx, 116, RULE_comparisionOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 595;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T_BITWISE_OR) | (1L << T_EQUALITY) | (1L << T_UNEQUALITY) | (1L << T_MORE_THAN_OR_EQUALS) | (1L << T_LESS_THAN_OR_EQUALS) | (1L << T_MORE_THAN) | (1L << T_LESS_THAN))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOpContext : ParserRuleContext {
		public LogicalOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterLogicalOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitLogicalOp(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOpContext logicalOp() {
		LogicalOpContext _localctx = new LogicalOpContext(Context, State);
		EnterRule(_localctx, 118, RULE_logicalOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 597;
			_la = TokenStream.La(1);
			if ( !(_la==T_LOGICAL_AND || _la==T_LOGICAL_OR) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		public LeftValueContext leftValue() {
			return GetRuleContext<LeftValueContext>(0);
		}
		public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 120, RULE_assignmentExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 599; leftValue();
			State = 600; assignmentOperator();
			State = 603;
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				{
				State = 601; expression(0);
				}
				break;
			case 2:
				{
				State = 602; assignmentExpression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewExpressionContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public FuncCallArgumentsContext funcCallArguments() {
			return GetRuleContext<FuncCallArgumentsContext>(0);
		}
		public NewExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterNewExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitNewExpression(this);
		}
	}

	[RuleVersion(0)]
	public NewExpressionContext newExpression() {
		NewExpressionContext _localctx = new NewExpressionContext(Context, State);
		EnterRule(_localctx, 122, RULE_newExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 605; Match(T_NEW);
			State = 606; typeName();
			State = 607; funcCallArguments();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClosureExpressionContext : ParserRuleContext {
		public FunctionArgumentsContext functionArguments() {
			return GetRuleContext<FunctionArgumentsContext>(0);
		}
		public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public ClosureExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closureExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterClosureExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitClosureExpression(this);
		}
	}

	[RuleVersion(0)]
	public ClosureExpressionContext closureExpression() {
		ClosureExpressionContext _localctx = new ClosureExpressionContext(Context, State);
		EnterRule(_localctx, 124, RULE_closureExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 609; functionArguments();
			State = 611;
			_la = TokenStream.La(1);
			if (_la==T_DOUBLE_COLON) {
				{
				State = 610; returnType();
				}
			}

			State = 613; Match(T_CLOSURE_CALL);
			State = 614; blockStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 126, RULE_unaryExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 616;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T_NOT) | (1L << T_PLUS) | (1L << T_MINUS))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			State = 617; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefixOperatorContext : ParserRuleContext {
		public PrefixOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterPrefixOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitPrefixOperator(this);
		}
	}

	[RuleVersion(0)]
	public PrefixOperatorContext prefixOperator() {
		PrefixOperatorContext _localctx = new PrefixOperatorContext(Context, State);
		EnterRule(_localctx, 128, RULE_prefixOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 619;
			_la = TokenStream.La(1);
			if ( !(_la==T_INCREMENT || _la==T_DECREMENT) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixOperatorContext : ParserRuleContext {
		public PostfixOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterPostfixOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitPostfixOperator(this);
		}
	}

	[RuleVersion(0)]
	public PostfixOperatorContext postfixOperator() {
		PostfixOperatorContext _localctx = new PostfixOperatorContext(Context, State);
		EnterRule(_localctx, 130, RULE_postfixOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 621;
			_la = TokenStream.La(1);
			if ( !(_la==T_INCREMENT || _la==T_DECREMENT) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterAssignmentOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitAssignmentOperator(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 132, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 623;
			_la = TokenStream.La(1);
			if ( !(((((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & ((1L << (T_EQUALS - 63)) | (1L << (T_PLUS_EQUALS - 63)) | (1L << (T_MINUS_EQUALS - 63)) | (1L << (T_TIMES_EQUALS - 63)) | (1L << (T_DIV_EQUALS - 63)) | (1L << (T_MOD_EQUALS - 63)) | (1L << (T_XOR_EQUALS - 63)) | (1L << (T_AND_EQUALS - 63)) | (1L << (T_TILDE_EQUALS - 63)) | (1L << (T_OR_EQUALS - 63)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncCallArgumentsContext : ParserRuleContext {
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public FuncCallArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcCallArguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFuncCallArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFuncCallArguments(this);
		}
	}

	[RuleVersion(0)]
	public FuncCallArgumentsContext funcCallArguments() {
		FuncCallArgumentsContext _localctx = new FuncCallArgumentsContext(Context, State);
		EnterRule(_localctx, 134, RULE_funcCallArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 625; Match(T_LEFT_PAREN);
			State = 627;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << StringLiteral) | (1L << T_NEW) | (1L << T_LEFT_PAREN) | (1L << T_LEFT_BRACKET) | (1L << T_LEFT_CURLY) | (1L << INT) | (1L << HEX) | (1L << BINARY) | (1L << FLOAT) | (1L << T_FALSE) | (1L << T_TRUE) | (1L << T_NULL) | (1L << T_NOT) | (1L << T_PLUS) | (1L << T_MINUS) | (1L << T_INCREMENT) | (1L << T_DECREMENT))) != 0) || _la==IDENT) {
				{
				State = 626; expressionList();
				}
			}

			State = 629; Match(T_RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 136, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 631; expression(0);
			State = 636;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T_COMMA) {
				{
				{
				State = 632; Match(T_COMMA);
				State = 633; expression(0);
				}
				}
				State = 638;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeftValueContext : ParserRuleContext {
		public MemberNameContext memberName() {
			return GetRuleContext<MemberNameContext>(0);
		}
		public LeftValueAccessContext leftValueAccess() {
			return GetRuleContext<LeftValueAccessContext>(0);
		}
		public LeftValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leftValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterLeftValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitLeftValue(this);
		}
	}

	[RuleVersion(0)]
	public LeftValueContext leftValue() {
		LeftValueContext _localctx = new LeftValueContext(Context, State);
		EnterRule(_localctx, 138, RULE_leftValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 639; memberName();
			State = 641;
			switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
			case 1:
				{
				State = 640; leftValueAccess();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeftValueAccessContext : ParserRuleContext {
		public FuncCallArgumentsContext funcCallArguments() {
			return GetRuleContext<FuncCallArgumentsContext>(0);
		}
		public LeftValueAccessContext leftValueAccess() {
			return GetRuleContext<LeftValueAccessContext>(0);
		}
		public LeftValueContext leftValue() {
			return GetRuleContext<LeftValueContext>(0);
		}
		public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		public LeftValueAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leftValueAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterLeftValueAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitLeftValueAccess(this);
		}
	}

	[RuleVersion(0)]
	public LeftValueAccessContext leftValueAccess() {
		LeftValueAccessContext _localctx = new LeftValueAccessContext(Context, State);
		EnterRule(_localctx, 140, RULE_leftValueAccess);
		try {
			State = 652;
			switch (TokenStream.La(1)) {
			case T_LEFT_PAREN:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 643; funcCallArguments();
				State = 644; leftValueAccess();
				}
				}
				break;
			case T_PERIOD:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 646; Match(T_PERIOD);
				State = 647; leftValue();
				}
				}
				break;
			case T_LEFT_BRACKET:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 648; arrayAccess();
				State = 650;
				switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
				case 1:
					{
					State = 649; leftValueAccess();
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public FuncCallArgumentsContext funcCallArguments() {
			return GetRuleContext<FuncCallArgumentsContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 142, RULE_functionCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 654; funcCallArguments();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldAccessContext : ParserRuleContext {
		public MemberNameContext memberName() {
			return GetRuleContext<MemberNameContext>(0);
		}
		public FieldAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFieldAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFieldAccess(this);
		}
	}

	[RuleVersion(0)]
	public FieldAccessContext fieldAccess() {
		FieldAccessContext _localctx = new FieldAccessContext(Context, State);
		EnterRule(_localctx, 144, RULE_fieldAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 656; Match(T_PERIOD);
			State = 657; memberName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAccessContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrayAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterArrayAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitArrayAccess(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccessContext arrayAccess() {
		ArrayAccessContext _localctx = new ArrayAccessContext(Context, State);
		EnterRule(_localctx, 146, RULE_arrayAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 659; Match(T_LEFT_BRACKET);
			State = 660; expression(0);
			State = 661; Match(T_RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectAccessContext : ParserRuleContext {
		public FieldAccessContext fieldAccess() {
			return GetRuleContext<FieldAccessContext>(0);
		}
		public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		public ValueAccessContext valueAccess() {
			return GetRuleContext<ValueAccessContext>(0);
		}
		public ObjectAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterObjectAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitObjectAccess(this);
		}
	}

	[RuleVersion(0)]
	public ObjectAccessContext objectAccess() {
		ObjectAccessContext _localctx = new ObjectAccessContext(Context, State);
		EnterRule(_localctx, 148, RULE_objectAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 665;
			switch (TokenStream.La(1)) {
			case T_PERIOD:
				{
				State = 663; fieldAccess();
				}
				break;
			case T_LEFT_BRACKET:
				{
				State = 664; arrayAccess();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 668;
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				{
				State = 667; valueAccess();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueAccessContext : ParserRuleContext {
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FieldAccessContext fieldAccess() {
			return GetRuleContext<FieldAccessContext>(0);
		}
		public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		public ValueAccessContext valueAccess() {
			return GetRuleContext<ValueAccessContext>(0);
		}
		public ValueAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterValueAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitValueAccess(this);
		}
	}

	[RuleVersion(0)]
	public ValueAccessContext valueAccess() {
		ValueAccessContext _localctx = new ValueAccessContext(Context, State);
		EnterRule(_localctx, 150, RULE_valueAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 673;
			switch (TokenStream.La(1)) {
			case T_LEFT_PAREN:
				{
				State = 670; functionCall();
				}
				break;
			case T_PERIOD:
				{
				State = 671; fieldAccess();
				}
				break;
			case T_LEFT_BRACKET:
				{
				State = 672; arrayAccess();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 676;
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				{
				State = 675; valueAccess();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberNameContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(ZScriptParser.IDENT, 0); }
		public MemberNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterMemberName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitMemberName(this);
		}
	}

	[RuleVersion(0)]
	public MemberNameContext memberName() {
		MemberNameContext _localctx = new MemberNameContext(Context, State);
		EnterRule(_localctx, 152, RULE_memberName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 678; Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayLiteralContext : ParserRuleContext {
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ArrayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterArrayLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitArrayLiteral(this);
		}
	}

	[RuleVersion(0)]
	public ArrayLiteralContext arrayLiteral() {
		ArrayLiteralContext _localctx = new ArrayLiteralContext(Context, State);
		EnterRule(_localctx, 154, RULE_arrayLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 680; Match(T_LEFT_BRACKET);
			State = 682;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << StringLiteral) | (1L << T_NEW) | (1L << T_LEFT_PAREN) | (1L << T_LEFT_BRACKET) | (1L << T_LEFT_CURLY) | (1L << INT) | (1L << HEX) | (1L << BINARY) | (1L << FLOAT) | (1L << T_FALSE) | (1L << T_TRUE) | (1L << T_NULL) | (1L << T_NOT) | (1L << T_PLUS) | (1L << T_MINUS) | (1L << T_INCREMENT) | (1L << T_DECREMENT))) != 0) || _la==IDENT) {
				{
				State = 681; expressionList();
				}
			}

			State = 684; Match(T_RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectLiteralContext : ParserRuleContext {
		public ObjectEntryListContext objectEntryList() {
			return GetRuleContext<ObjectEntryListContext>(0);
		}
		public ObjectLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterObjectLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitObjectLiteral(this);
		}
	}

	[RuleVersion(0)]
	public ObjectLiteralContext objectLiteral() {
		ObjectLiteralContext _localctx = new ObjectLiteralContext(Context, State);
		EnterRule(_localctx, 156, RULE_objectLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 686; Match(T_LEFT_CURLY);
			State = 688;
			_la = TokenStream.La(1);
			if (_la==IDENT) {
				{
				State = 687; objectEntryList();
				}
			}

			State = 690; Match(T_RIGHT_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectEntryListContext : ParserRuleContext {
		public ObjectEntryDefinitionContext[] objectEntryDefinition() {
			return GetRuleContexts<ObjectEntryDefinitionContext>();
		}
		public ObjectEntryDefinitionContext objectEntryDefinition(int i) {
			return GetRuleContext<ObjectEntryDefinitionContext>(i);
		}
		public ObjectEntryListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectEntryList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterObjectEntryList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitObjectEntryList(this);
		}
	}

	[RuleVersion(0)]
	public ObjectEntryListContext objectEntryList() {
		ObjectEntryListContext _localctx = new ObjectEntryListContext(Context, State);
		EnterRule(_localctx, 158, RULE_objectEntryList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 692; objectEntryDefinition();
			State = 697;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T_COMMA) {
				{
				{
				State = 693; Match(T_COMMA);
				State = 694; objectEntryDefinition();
				}
				}
				State = 699;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectEntryDefinitionContext : ParserRuleContext {
		public EntryNameContext entryName() {
			return GetRuleContext<EntryNameContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ObjectEntryDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectEntryDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterObjectEntryDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitObjectEntryDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ObjectEntryDefinitionContext objectEntryDefinition() {
		ObjectEntryDefinitionContext _localctx = new ObjectEntryDefinitionContext(Context, State);
		EnterRule(_localctx, 160, RULE_objectEntryDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 700; entryName();
			State = 701; Match(T_DOUBLE_COLON);
			State = 702; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntryNameContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(ZScriptParser.IDENT, 0); }
		public EntryNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entryName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterEntryName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitEntryName(this);
		}
	}

	[RuleVersion(0)]
	public EntryNameContext entryName() {
		EntryNameContext _localctx = new EntryNameContext(Context, State);
		EnterRule(_localctx, 162, RULE_entryName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 704; Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public NumericAtomContext numericAtom() {
			return GetRuleContext<NumericAtomContext>(0);
		}
		public ITerminalNode T_FALSE() { return GetToken(ZScriptParser.T_FALSE, 0); }
		public ITerminalNode T_TRUE() { return GetToken(ZScriptParser.T_TRUE, 0); }
		public ITerminalNode T_NULL() { return GetToken(ZScriptParser.T_NULL, 0); }
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 164, RULE_constant);
		int _la;
		try {
			State = 714;
			switch (TokenStream.La(1)) {
			case INT:
			case HEX:
			case BINARY:
			case FLOAT:
			case T_PLUS:
			case T_MINUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 707;
				_la = TokenStream.La(1);
				if (_la==T_PLUS || _la==T_MINUS) {
					{
					State = 706;
					_la = TokenStream.La(1);
					if ( !(_la==T_PLUS || _la==T_MINUS) ) {
					ErrorHandler.RecoverInline(this);
					}
					Consume();
					}
				}

				State = 709; numericAtom();
				}
				break;
			case T_FALSE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 710; Match(T_FALSE);
				}
				break;
			case T_TRUE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 711; Match(T_TRUE);
				}
				break;
			case T_NULL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 712; Match(T_NULL);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 5);
				{
				State = 713; stringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantAtomContext : ParserRuleContext {
		public NumericAtomContext numericAtom() {
			return GetRuleContext<NumericAtomContext>(0);
		}
		public ITerminalNode T_FALSE() { return GetToken(ZScriptParser.T_FALSE, 0); }
		public ITerminalNode T_TRUE() { return GetToken(ZScriptParser.T_TRUE, 0); }
		public ITerminalNode T_NULL() { return GetToken(ZScriptParser.T_NULL, 0); }
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public ConstantAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantAtom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterConstantAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitConstantAtom(this);
		}
	}

	[RuleVersion(0)]
	public ConstantAtomContext constantAtom() {
		ConstantAtomContext _localctx = new ConstantAtomContext(Context, State);
		EnterRule(_localctx, 166, RULE_constantAtom);
		try {
			State = 721;
			switch (TokenStream.La(1)) {
			case INT:
			case HEX:
			case BINARY:
			case FLOAT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 716; numericAtom();
				}
				break;
			case T_FALSE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 717; Match(T_FALSE);
				}
				break;
			case T_TRUE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 718; Match(T_TRUE);
				}
				break;
			case T_NULL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 719; Match(T_NULL);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 5);
				{
				State = 720; stringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		public ITerminalNode StringLiteral() { return GetToken(ZScriptParser.StringLiteral, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 168, RULE_stringLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 723; Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericAtomContext : ParserRuleContext {
		public HexadecimalNumberContext hexadecimalNumber() {
			return GetRuleContext<HexadecimalNumberContext>(0);
		}
		public BinaryNumberContext binaryNumber() {
			return GetRuleContext<BinaryNumberContext>(0);
		}
		public ITerminalNode FLOAT() { return GetToken(ZScriptParser.FLOAT, 0); }
		public ITerminalNode INT() { return GetToken(ZScriptParser.INT, 0); }
		public NumericAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericAtom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterNumericAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitNumericAtom(this);
		}
	}

	[RuleVersion(0)]
	public NumericAtomContext numericAtom() {
		NumericAtomContext _localctx = new NumericAtomContext(Context, State);
		EnterRule(_localctx, 170, RULE_numericAtom);
		int _la;
		try {
			State = 728;
			switch (TokenStream.La(1)) {
			case HEX:
				EnterOuterAlt(_localctx, 1);
				{
				State = 725; hexadecimalNumber();
				}
				break;
			case BINARY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 726; binaryNumber();
				}
				break;
			case INT:
			case FLOAT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 727;
				_la = TokenStream.La(1);
				if ( !(_la==INT || _la==FLOAT) ) {
				ErrorHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HexadecimalNumberContext : ParserRuleContext {
		public ITerminalNode HEX() { return GetToken(ZScriptParser.HEX, 0); }
		public HexadecimalNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hexadecimalNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterHexadecimalNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitHexadecimalNumber(this);
		}
	}

	[RuleVersion(0)]
	public HexadecimalNumberContext hexadecimalNumber() {
		HexadecimalNumberContext _localctx = new HexadecimalNumberContext(Context, State);
		EnterRule(_localctx, 172, RULE_hexadecimalNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 730; Match(HEX);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryNumberContext : ParserRuleContext {
		public ITerminalNode BINARY() { return GetToken(ZScriptParser.BINARY, 0); }
		public BinaryNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterBinaryNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitBinaryNumber(this);
		}
	}

	[RuleVersion(0)]
	public BinaryNumberContext binaryNumber() {
		BinaryNumberContext _localctx = new BinaryNumberContext(Context, State);
		EnterRule(_localctx, 174, RULE_binaryNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 732; Match(BINARY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 53: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 7);
		case 1: return Precpred(Context, 6);
		case 2: return Precpred(Context, 5);
		case 3: return Precpred(Context, 4);
		case 4: return Precpred(Context, 3);
		case 5: return Precpred(Context, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3P\x2E1\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\a\x3\xB9\n\x3\f\x3\xE\x3"+
		"\xBC\v\x3\x3\x4\x3\x4\x3\x4\x5\x4\xC1\n\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3"+
		"\x5\x3\x6\x3\x6\x3\a\x3\a\x3\a\a\a\xCD\n\a\f\a\xE\a\xD0\v\a\x3\a\x3\a"+
		"\x3\b\x3\b\x3\b\x3\t\x5\t\xD8\n\t\x3\t\x3\t\x3\t\x3\n\x3\n\a\n\xDF\n\n"+
		"\f\n\xE\n\xE2\v\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\a\v\xEA\n\v\f\v\xE\v\xED"+
		"\v\v\x3\v\x3\v\x3\f\x5\f\xF2\n\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3"+
		"\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\a\xF\x101\n\xF\f\xF\xE\xF\x104\v\xF"+
		"\x3\xF\x3\xF\x3\x10\x5\x10\x109\n\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x5\x11\x111\n\x11\x3\x12\x3\x12\x3\x12\a\x12\x116\n\x12\f\x12"+
		"\xE\x12\x119\v\x12\x3\x13\x5\x13\x11C\n\x13\x3\x13\x3\x13\x3\x13\x5\x13"+
		"\x121\n\x13\x3\x14\x3\x14\x3\x15\x3\x15\x5\x15\x127\n\x15\x3\x15\x5\x15"+
		"\x12A\n\x15\x3\x15\x5\x15\x12D\n\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16"+
		"\x5\x16\x134\n\x16\x3\x16\x5\x16\x137\n\x16\x3\x17\x3\x17\x3\x18\x3\x18"+
		"\x5\x18\x13D\n\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\a\x19\x144\n\x19"+
		"\f\x19\xE\x19\x147\v\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x5"+
		"\x1B\x14F\n\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x154\n\x1B\x3\x1C\x3\x1C\x3"+
		"\x1D\x3\x1D\x3\x1D\x3\x1D\a\x1D\x15C\n\x1D\f\x1D\xE\x1D\x15F\v\x1D\x3"+
		"\x1E\x3\x1E\x5\x1E\x163\n\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\a\x1F\x169\n"+
		"\x1F\f\x1F\xE\x1F\x16C\v\x1F\x3\x1F\x3\x1F\x3 \x3 \x5 \x172\n \x3 \x3"+
		" \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x5 \x17E\n \x3!\x3!\a!\x182\n!\f!\xE"+
		"!\x185\v!\x3!\x3!\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x5\"\x18F\n\"\x3#\x3#"+
		"\x3#\x3$\x3$\x3$\x3$\x3$\x3$\x3%\x3%\x3%\a%\x19D\n%\f%\xE%\x1A0\v%\x3"+
		"%\x3%\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x5&\x1AC\n&\x3\'\x3\'\x3\'\x3\'"+
		"\x3\'\x3\'\x3(\x3(\x3(\x3(\x3(\x3(\x3)\x3)\x3)\x5)\x1BD\n)\x3)\x3)\x5"+
		")\x1C1\n)\x3)\x3)\x5)\x1C5\n)\x3)\x3)\x3)\x3*\x3*\x5*\x1CC\n*\x3+\x3+"+
		"\x5+\x1D0\n+\x3+\x3+\x3,\x3,\x5,\x1D6\n,\x3,\x3,\x3-\x3-\x3-\x3.\x3.\x3"+
		".\x3/\x3/\x3/\x5/\x1E3\n/\x3\x30\x3\x30\x3\x30\x3\x30\x3\x31\x3\x31\x3"+
		"\x31\x5\x31\x1EC\n\x31\x3\x32\x3\x32\x3\x33\x3\x33\x3\x33\x5\x33\x1F3"+
		"\n\x33\x3\x34\x3\x34\x3\x34\x5\x34\x1F8\n\x34\x3\x35\x3\x35\x5\x35\x1FC"+
		"\n\x35\x3\x35\x3\x35\x5\x35\x200\n\x35\x3\x35\x3\x35\x3\x36\x3\x36\x3"+
		"\x36\a\x36\x207\n\x36\f\x36\xE\x36\x20A\v\x36\x3\x37\x3\x37\x3\x37\x3"+
		"\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3"+
		"\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x5\x37\x21F\n\x37\x3\x37\x3\x37"+
		"\x5\x37\x223\n\x37\x3\x37\x3\x37\x5\x37\x227\n\x37\x3\x37\x3\x37\x3\x37"+
		"\x5\x37\x22C\n\x37\x3\x37\x5\x37\x22F\n\x37\x3\x37\x3\x37\x3\x37\x3\x37"+
		"\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37"+
		"\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37"+
		"\a\x37\x249\n\x37\f\x37\xE\x37\x24C\v\x37\x3\x38\x3\x38\x3\x39\x3\x39"+
		"\x3:\x3:\x3;\x3;\x3<\x3<\x3=\x3=\x3>\x3>\x3>\x3>\x5>\x25E\n>\x3?\x3?\x3"+
		"?\x3?\x3@\x3@\x5@\x266\n@\x3@\x3@\x3@\x3\x41\x3\x41\x3\x41\x3\x42\x3\x42"+
		"\x3\x43\x3\x43\x3\x44\x3\x44\x3\x45\x3\x45\x5\x45\x276\n\x45\x3\x45\x3"+
		"\x45\x3\x46\x3\x46\x3\x46\a\x46\x27D\n\x46\f\x46\xE\x46\x280\v\x46\x3"+
		"G\x3G\x5G\x284\nG\x3H\x3H\x3H\x3H\x3H\x3H\x3H\x5H\x28D\nH\x5H\x28F\nH"+
		"\x3I\x3I\x3J\x3J\x3J\x3K\x3K\x3K\x3K\x3L\x3L\x5L\x29C\nL\x3L\x5L\x29F"+
		"\nL\x3M\x3M\x3M\x5M\x2A4\nM\x3M\x5M\x2A7\nM\x3N\x3N\x3O\x3O\x5O\x2AD\n"+
		"O\x3O\x3O\x3P\x3P\x5P\x2B3\nP\x3P\x3P\x3Q\x3Q\x3Q\aQ\x2BA\nQ\fQ\xEQ\x2BD"+
		"\vQ\x3R\x3R\x3R\x3R\x3S\x3S\x3T\x5T\x2C6\nT\x3T\x3T\x3T\x3T\x3T\x5T\x2CD"+
		"\nT\x3U\x3U\x3U\x3U\x3U\x5U\x2D4\nU\x3V\x3V\x3W\x3W\x3W\x5W\x2DB\nW\x3"+
		"X\x3X\x3Y\x3Y\x3Y\x2\x3lZ\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C"+
		"\x1E \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42\x44\x46HJLNPRTVXZ\\^`\x62\x64"+
		"\x66hjlnprtvxz|~\x80\x82\x84\x86\x88\x8A\x8C\x8E\x90\x92\x94\x96\x98\x9A"+
		"\x9C\x9E\xA0\xA2\xA4\xA6\xA8\xAA\xAC\xAE\xB0\x2\v\x3\x2.\x30\x3\x2\x32"+
		"\x33\x3\x2\x36\x37\x3\x2\x38>\x3\x2?@\x3\x2\x31\x33\x3\x2\x34\x35\x3\x2"+
		"\x41J\x4\x2  ##\x2F6\x2\xB2\x3\x2\x2\x2\x4\xBA\x3\x2\x2\x2\x6\xBD\x3\x2"+
		"\x2\x2\b\xC4\x3\x2\x2\x2\n\xC7\x3\x2\x2\x2\f\xC9\x3\x2\x2\x2\xE\xD3\x3"+
		"\x2\x2\x2\x10\xD7\x3\x2\x2\x2\x12\xDC\x3\x2\x2\x2\x14\xE5\x3\x2\x2\x2"+
		"\x16\xF1\x3\x2\x2\x2\x18\xF6\x3\x2\x2\x2\x1A\xFA\x3\x2\x2\x2\x1C\xFC\x3"+
		"\x2\x2\x2\x1E\x108\x3\x2\x2\x2 \x110\x3\x2\x2\x2\"\x112\x3\x2\x2\x2$\x11B"+
		"\x3\x2\x2\x2&\x122\x3\x2\x2\x2(\x124\x3\x2\x2\x2*\x130\x3\x2\x2\x2,\x138"+
		"\x3\x2\x2\x2.\x13A\x3\x2\x2\x2\x30\x140\x3\x2\x2\x2\x32\x148\x3\x2\x2"+
		"\x2\x34\x14B\x3\x2\x2\x2\x36\x155\x3\x2\x2\x2\x38\x157\x3\x2\x2\x2:\x160"+
		"\x3\x2\x2\x2<\x164\x3\x2\x2\x2>\x17D\x3\x2\x2\x2@\x17F\x3\x2\x2\x2\x42"+
		"\x188\x3\x2\x2\x2\x44\x190\x3\x2\x2\x2\x46\x193\x3\x2\x2\x2H\x199\x3\x2"+
		"\x2\x2J\x1A3\x3\x2\x2\x2L\x1AD\x3\x2\x2\x2N\x1B3\x3\x2\x2\x2P\x1B9\x3"+
		"\x2\x2\x2R\x1CB\x3\x2\x2\x2T\x1CD\x3\x2\x2\x2V\x1D5\x3\x2\x2\x2X\x1D9"+
		"\x3\x2\x2\x2Z\x1DC\x3\x2\x2\x2\\\x1DF\x3\x2\x2\x2^\x1E4\x3\x2\x2\x2`\x1E8"+
		"\x3\x2\x2\x2\x62\x1ED\x3\x2\x2\x2\x64\x1F2\x3\x2\x2\x2\x66\x1F4\x3\x2"+
		"\x2\x2h\x1F9\x3\x2\x2\x2j\x203\x3\x2\x2\x2l\x22E\x3\x2\x2\x2n\x24D\x3"+
		"\x2\x2\x2p\x24F\x3\x2\x2\x2r\x251\x3\x2\x2\x2t\x253\x3\x2\x2\x2v\x255"+
		"\x3\x2\x2\x2x\x257\x3\x2\x2\x2z\x259\x3\x2\x2\x2|\x25F\x3\x2\x2\x2~\x263"+
		"\x3\x2\x2\x2\x80\x26A\x3\x2\x2\x2\x82\x26D\x3\x2\x2\x2\x84\x26F\x3\x2"+
		"\x2\x2\x86\x271\x3\x2\x2\x2\x88\x273\x3\x2\x2\x2\x8A\x279\x3\x2\x2\x2"+
		"\x8C\x281\x3\x2\x2\x2\x8E\x28E\x3\x2\x2\x2\x90\x290\x3\x2\x2\x2\x92\x292"+
		"\x3\x2\x2\x2\x94\x295\x3\x2\x2\x2\x96\x29B\x3\x2\x2\x2\x98\x2A3\x3\x2"+
		"\x2\x2\x9A\x2A8\x3\x2\x2\x2\x9C\x2AA\x3\x2\x2\x2\x9E\x2B0\x3\x2\x2\x2"+
		"\xA0\x2B6\x3\x2\x2\x2\xA2\x2BE\x3\x2\x2\x2\xA4\x2C2\x3\x2\x2\x2\xA6\x2CC"+
		"\x3\x2\x2\x2\xA8\x2D3\x3\x2\x2\x2\xAA\x2D5\x3\x2\x2\x2\xAC\x2DA\x3\x2"+
		"\x2\x2\xAE\x2DC\x3\x2\x2\x2\xB0\x2DE\x3\x2\x2\x2\xB2\xB3\x5\x4\x3\x2\xB3"+
		"\x3\x3\x2\x2\x2\xB4\xB9\x5\x12\n\x2\xB5\xB9\x5\x14\v\x2\xB6\xB9\x5\x6"+
		"\x4\x2\xB7\xB9\x5\x18\r\x2\xB8\xB4\x3\x2\x2\x2\xB8\xB5\x3\x2\x2\x2\xB8"+
		"\xB6\x3\x2\x2\x2\xB8\xB7\x3\x2\x2\x2\xB9\xBC\x3\x2\x2\x2\xBA\xB8\x3\x2"+
		"\x2\x2\xBA\xBB\x3\x2\x2\x2\xBB\x5\x3\x2\x2\x2\xBC\xBA\x3\x2\x2\x2\xBD"+
		"\xBE\a\f\x2\x2\xBE\xC0\x5\n\x6\x2\xBF\xC1\x5\b\x5\x2\xC0\xBF\x3\x2\x2"+
		"\x2\xC0\xC1\x3\x2\x2\x2\xC1\xC2\x3\x2\x2\x2\xC2\xC3\x5\f\a\x2\xC3\a\x3"+
		"\x2\x2\x2\xC4\xC5\a*\x2\x2\xC5\xC6\x5\n\x6\x2\xC6\t\x3\x2\x2\x2\xC7\xC8"+
		"\aK\x2\x2\xC8\v\x3\x2\x2\x2\xC9\xCE\a\x1C\x2\x2\xCA\xCD\x5\xE\b\x2\xCB"+
		"\xCD\x5\x10\t\x2\xCC\xCA\x3\x2\x2\x2\xCC\xCB\x3\x2\x2\x2\xCD\xD0\x3\x2"+
		"\x2\x2\xCE\xCC\x3\x2\x2\x2\xCE\xCF\x3\x2\x2\x2\xCF\xD1\x3\x2\x2\x2\xD0"+
		"\xCE\x3\x2\x2\x2\xD1\xD2\a\x1D\x2\x2\xD2\r\x3\x2\x2\x2\xD3\xD4\x5X-\x2"+
		"\xD4\xD5\a+\x2\x2\xD5\xF\x3\x2\x2\x2\xD6\xD8\a\v\x2\x2\xD7\xD6\x3\x2\x2"+
		"\x2\xD7\xD8\x3\x2\x2\x2\xD8\xD9\x3\x2\x2\x2\xD9\xDA\a\n\x2\x2\xDA\xDB"+
		"\x5(\x15\x2\xDB\x11\x3\x2\x2\x2\xDC\xE0\a\x1A\x2\x2\xDD\xDF\x5\x16\f\x2"+
		"\xDE\xDD\x3\x2\x2\x2\xDF\xE2\x3\x2\x2\x2\xE0\xDE\x3\x2\x2\x2\xE0\xE1\x3"+
		"\x2\x2\x2\xE1\xE3\x3\x2\x2\x2\xE2\xE0\x3\x2\x2\x2\xE3\xE4\a\x1B\x2\x2"+
		"\xE4\x13\x3\x2\x2\x2\xE5\xEB\a\x1C\x2\x2\xE6\xEA\x5\x12\n\x2\xE7\xEA\x5"+
		"*\x16\x2\xE8\xEA\x5(\x15\x2\xE9\xE6\x3\x2\x2\x2\xE9\xE7\x3\x2\x2\x2\xE9"+
		"\xE8\x3\x2\x2\x2\xEA\xED\x3\x2\x2\x2\xEB\xE9\x3\x2\x2\x2\xEB\xEC\x3\x2"+
		"\x2\x2\xEC\xEE\x3\x2\x2\x2\xED\xEB\x3\x2\x2\x2\xEE\xEF\a\x1D\x2\x2\xEF"+
		"\x15\x3\x2\x2\x2\xF0\xF2\a\a\x2\x2\xF1\xF0\x3\x2\x2\x2\xF1\xF2\x3\x2\x2"+
		"\x2\xF2\xF3\x3\x2\x2\x2\xF3\xF4\x5\\/\x2\xF4\xF5\a+\x2\x2\xF5\x17\x3\x2"+
		"\x2\x2\xF6\xF7\a\r\x2\x2\xF7\xF8\x5\x1A\xE\x2\xF8\xF9\x5\x1C\xF\x2\xF9"+
		"\x19\x3\x2\x2\x2\xFA\xFB\aK\x2\x2\xFB\x1B\x3\x2\x2\x2\xFC\x102\a\x1A\x2"+
		"\x2\xFD\x101\x5\xE\b\x2\xFE\x101\x5\x1E\x10\x2\xFF\x101\x5 \x11\x2\x100"+
		"\xFD\x3\x2\x2\x2\x100\xFE\x3\x2\x2\x2\x100\xFF\x3\x2\x2\x2\x101\x104\x3"+
		"\x2\x2\x2\x102\x100\x3\x2\x2\x2\x102\x103\x3\x2\x2\x2\x103\x105\x3\x2"+
		"\x2\x2\x104\x102\x3\x2\x2\x2\x105\x106\a\x1B\x2\x2\x106\x1D\x3\x2\x2\x2"+
		"\x107\x109\x5\"\x12\x2\x108\x107\x3\x2\x2\x2\x108\x109\x3\x2\x2\x2\x109"+
		"\x10A\x3\x2\x2\x2\x10A\x10B\x5@!\x2\x10B\x1F\x3\x2\x2\x2\x10C\x10D\a\x41"+
		"\x2\x2\x10D\x111\x5&\x14\x2\x10E\x10F\a\x33\x2\x2\x10F\x111\x5&\x14\x2"+
		"\x110\x10C\x3\x2\x2\x2\x110\x10E\x3\x2\x2\x2\x111!\x3\x2\x2\x2\x112\x117"+
		"\x5$\x13\x2\x113\x114\a-\x2\x2\x114\x116\x5$\x13\x2\x115\x113\x3\x2\x2"+
		"\x2\x116\x119\x3\x2\x2\x2\x117\x115\x3\x2\x2\x2\x117\x118\x3\x2\x2\x2"+
		"\x118#\x3\x2\x2\x2\x119\x117\x3\x2\x2\x2\x11A\x11C\a\x32\x2\x2\x11B\x11A"+
		"\x3\x2\x2\x2\x11B\x11C\x3\x2\x2\x2\x11C\x11D\x3\x2\x2\x2\x11D\x120\x5"+
		"&\x14\x2\x11E\x11F\a\x33\x2\x2\x11F\x121\x5&\x14\x2\x120\x11E\x3\x2\x2"+
		"\x2\x120\x121\x3\x2\x2\x2\x121%\x3\x2\x2\x2\x122\x123\a \x2\x2\x123\'"+
		"\x3\x2\x2\x2\x124\x126\x5,\x17\x2\x125\x127\x5.\x18\x2\x126\x125\x3\x2"+
		"\x2\x2\x126\x127\x3\x2\x2\x2\x127\x129\x3\x2\x2\x2\x128\x12A\x5\x32\x1A"+
		"\x2\x129\x128\x3\x2\x2\x2\x129\x12A\x3\x2\x2\x2\x12A\x12C\x3\x2\x2\x2"+
		"\x12B\x12D\x5\x38\x1D\x2\x12C\x12B\x3\x2\x2\x2\x12C\x12D\x3\x2\x2\x2\x12D"+
		"\x12E\x3\x2\x2\x2\x12E\x12F\x5@!\x2\x12F)\x3\x2\x2\x2\x130\x131\a\t\x2"+
		"\x2\x131\x133\x5,\x17\x2\x132\x134\x5.\x18\x2\x133\x132\x3\x2\x2\x2\x133"+
		"\x134\x3\x2\x2\x2\x134\x136\x3\x2\x2\x2\x135\x137\x5\x32\x1A\x2\x136\x135"+
		"\x3\x2\x2\x2\x136\x137\x3\x2\x2\x2\x137+\x3\x2\x2\x2\x138\x139\aK\x2\x2"+
		"\x139-\x3\x2\x2\x2\x13A\x13C\a\x18\x2\x2\x13B\x13D\x5\x30\x19\x2\x13C"+
		"\x13B\x3\x2\x2\x2\x13C\x13D\x3\x2\x2\x2\x13D\x13E\x3\x2\x2\x2\x13E\x13F"+
		"\a\x19\x2\x2\x13F/\x3\x2\x2\x2\x140\x145\x5\x34\x1B\x2\x141\x142\a-\x2"+
		"\x2\x142\x144\x5\x34\x1B\x2\x143\x141\x3\x2\x2\x2\x144\x147\x3\x2\x2\x2"+
		"\x145\x143\x3\x2\x2\x2\x145\x146\x3\x2\x2\x2\x146\x31\x3\x2\x2\x2\x147"+
		"\x145\x3\x2\x2\x2\x148\x149\a*\x2\x2\x149\x14A\x5\x64\x33\x2\x14A\x33"+
		"\x3\x2\x2\x2\x14B\x14E\x5\x36\x1C\x2\x14C\x14D\a*\x2\x2\x14D\x14F\x5\x64"+
		"\x33\x2\x14E\x14C\x3\x2\x2\x2\x14E\x14F\x3\x2\x2\x2\x14F\x153\x3\x2\x2"+
		"\x2\x150\x154\a)\x2\x2\x151\x152\a\x41\x2\x2\x152\x154\x5\xA6T\x2\x153"+
		"\x150\x3\x2\x2\x2\x153\x151\x3\x2\x2\x2\x153\x154\x3\x2\x2\x2\x154\x35"+
		"\x3\x2\x2\x2\x155\x156\aK\x2\x2\x156\x37\x3\x2\x2\x2\x157\x158\a\x41\x2"+
		"\x2\x158\x15D\x5:\x1E\x2\x159\x15A\a-\x2\x2\x15A\x15C\x5:\x1E\x2\x15B"+
		"\x159\x3\x2\x2\x2\x15C\x15F\x3\x2\x2\x2\x15D\x15B\x3\x2\x2\x2\x15D\x15E"+
		"\x3\x2\x2\x2\x15E\x39\x3\x2\x2\x2\x15F\x15D\x3\x2\x2\x2\x160\x162\x5\xA8"+
		"U\x2\x161\x163\x5<\x1F\x2\x162\x161\x3\x2\x2\x2\x162\x163\x3\x2\x2\x2"+
		"\x163;\x3\x2\x2\x2\x164\x165\a\x18\x2\x2\x165\x16A\x5\xA8U\x2\x166\x167"+
		"\a-\x2\x2\x167\x169\x5\xA8U\x2\x168\x166\x3\x2\x2\x2\x169\x16C\x3\x2\x2"+
		"\x2\x16A\x168\x3\x2\x2\x2\x16A\x16B\x3\x2\x2\x2\x16B\x16D\x3\x2\x2\x2"+
		"\x16C\x16A\x3\x2\x2\x2\x16D\x16E\a\x19\x2\x2\x16E=\x3\x2\x2\x2\x16F\x172"+
		"\x5l\x37\x2\x170\x172\x5z>\x2\x171\x16F\x3\x2\x2\x2\x171\x170\x3\x2\x2"+
		"\x2\x172\x173\x3\x2\x2\x2\x173\x174\a+\x2\x2\x174\x17E\x3\x2\x2\x2\x175"+
		"\x17E\x5@!\x2\x176\x17E\a+\x2\x2\x177\x17E\x5\x42\"\x2\x178\x17E\x5N("+
		"\x2\x179\x17E\x5P)\x2\x17A\x17E\x5\x46$\x2\x17B\x17E\x5T+\x2\x17C\x17E"+
		"\x5V,\x2\x17D\x171\x3\x2\x2\x2\x17D\x175\x3\x2\x2\x2\x17D\x176\x3\x2\x2"+
		"\x2\x17D\x177\x3\x2\x2\x2\x17D\x178\x3\x2\x2\x2\x17D\x179\x3\x2\x2\x2"+
		"\x17D\x17A\x3\x2\x2\x2\x17D\x17B\x3\x2\x2\x2\x17D\x17C\x3\x2\x2\x2\x17E"+
		"?\x3\x2\x2\x2\x17F\x183\a\x1C\x2\x2\x180\x182\x5> \x2\x181\x180\x3\x2"+
		"\x2\x2\x182\x185\x3\x2\x2\x2\x183\x181\x3\x2\x2\x2\x183\x184\x3\x2\x2"+
		"\x2\x184\x186\x3\x2\x2\x2\x185\x183\x3\x2\x2\x2\x186\x187\a\x1D\x2\x2"+
		"\x187\x41\x3\x2\x2\x2\x188\x189\a\xE\x2\x2\x189\x18A\a\x18\x2\x2\x18A"+
		"\x18B\x5l\x37\x2\x18B\x18C\a\x19\x2\x2\x18C\x18E\x5> \x2\x18D\x18F\x5"+
		"\x44#\x2\x18E\x18D\x3\x2\x2\x2\x18E\x18F\x3\x2\x2\x2\x18F\x43\x3\x2\x2"+
		"\x2\x190\x191\a\xF\x2\x2\x191\x192\x5> \x2\x192\x45\x3\x2\x2\x2\x193\x194"+
		"\a\x14\x2\x2\x194\x195\a\x18\x2\x2\x195\x196\x5l\x37\x2\x196\x197\a\x19"+
		"\x2\x2\x197\x198\x5H%\x2\x198G\x3\x2\x2\x2\x199\x19E\a\x1C\x2\x2\x19A"+
		"\x19D\x5J&\x2\x19B\x19D\x5L\'\x2\x19C\x19A\x3\x2\x2\x2\x19C\x19B\x3\x2"+
		"\x2\x2\x19D\x1A0\x3\x2\x2\x2\x19E\x19C\x3\x2\x2\x2\x19E\x19F\x3\x2\x2"+
		"\x2\x19F\x1A1\x3\x2\x2\x2\x1A0\x19E\x3\x2\x2\x2\x1A1\x1A2\a\x1D\x2\x2"+
		"\x1A2I\x3\x2\x2\x2\x1A3\x1A4\a\x15\x2\x2\x1A4\x1A5\x5l\x37\x2\x1A5\x1AB"+
		"\a*\x2\x2\x1A6\x1AC\x5J&\x2\x1A7\x1A8\x5> \x2\x1A8\x1A9\a\x12\x2\x2\x1A9"+
		"\x1AA\a+\x2\x2\x1AA\x1AC\x3\x2\x2\x2\x1AB\x1A6\x3\x2\x2\x2\x1AB\x1A7\x3"+
		"\x2\x2\x2\x1ACK\x3\x2\x2\x2\x1AD\x1AE\a\x16\x2\x2\x1AE\x1AF\a*\x2\x2\x1AF"+
		"\x1B0\x5> \x2\x1B0\x1B1\a\x12\x2\x2\x1B1\x1B2\a+\x2\x2\x1B2M\x3\x2\x2"+
		"\x2\x1B3\x1B4\a\x10\x2\x2\x1B4\x1B5\a\x18\x2\x2\x1B5\x1B6\x5l\x37\x2\x1B6"+
		"\x1B7\a\x19\x2\x2\x1B7\x1B8\x5> \x2\x1B8O\x3\x2\x2\x2\x1B9\x1BA\a\x11"+
		"\x2\x2\x1BA\x1BC\a\x18\x2\x2\x1BB\x1BD\x5R*\x2\x1BC\x1BB\x3\x2\x2\x2\x1BC"+
		"\x1BD\x3\x2\x2\x2\x1BD\x1BE\x3\x2\x2\x2\x1BE\x1C0\a+\x2\x2\x1BF\x1C1\x5"+
		"l\x37\x2\x1C0\x1BF\x3\x2\x2\x2\x1C0\x1C1\x3\x2\x2\x2\x1C1\x1C2\x3\x2\x2"+
		"\x2\x1C2\x1C4\a+\x2\x2\x1C3\x1C5\x5l\x37\x2\x1C4\x1C3\x3\x2\x2\x2\x1C4"+
		"\x1C5\x3\x2\x2\x2\x1C5\x1C6\x3\x2\x2\x2\x1C6\x1C7\a\x19\x2\x2\x1C7\x1C8"+
		"\x5> \x2\x1C8Q\x3\x2\x2\x2\x1C9\x1CC\x5X-\x2\x1CA\x1CC\x5l\x37\x2\x1CB"+
		"\x1C9\x3\x2\x2\x2\x1CB\x1CA\x3\x2\x2\x2\x1CCS\x3\x2\x2\x2\x1CD\x1CF\a"+
		"\x17\x2\x2\x1CE\x1D0\x5l\x37\x2\x1CF\x1CE\x3\x2\x2\x2\x1CF\x1D0\x3\x2"+
		"\x2\x2\x1D0\x1D1\x3\x2\x2\x2\x1D1\x1D2\a+\x2\x2\x1D2U\x3\x2\x2\x2\x1D3"+
		"\x1D6\x5X-\x2\x1D4\x1D6\x5Z.\x2\x1D5\x1D3\x3\x2\x2\x2\x1D5\x1D4\x3\x2"+
		"\x2\x2\x1D6\x1D7\x3\x2\x2\x2\x1D7\x1D8\a+\x2\x2\x1D8W\x3\x2\x2\x2\x1D9"+
		"\x1DA\a\x5\x2\x2\x1DA\x1DB\x5\\/\x2\x1DBY\x3\x2\x2\x2\x1DC\x1DD\a\x6\x2"+
		"\x2\x1DD\x1DE\x5^\x30\x2\x1DE[\x3\x2\x2\x2\x1DF\x1E2\x5`\x31\x2\x1E0\x1E1"+
		"\a\x41\x2\x2\x1E1\x1E3\x5l\x37\x2\x1E2\x1E0\x3\x2\x2\x2\x1E2\x1E3\x3\x2"+
		"\x2\x2\x1E3]\x3\x2\x2\x2\x1E4\x1E5\x5`\x31\x2\x1E5\x1E6\a\x41\x2\x2\x1E6"+
		"\x1E7\x5l\x37\x2\x1E7_\x3\x2\x2\x2\x1E8\x1EB\x5\x62\x32\x2\x1E9\x1EA\a"+
		"*\x2\x2\x1EA\x1EC\x5\x64\x33\x2\x1EB\x1E9\x3\x2\x2\x2\x1EB\x1EC\x3\x2"+
		"\x2\x2\x1EC\x61\x3\x2\x2\x2\x1ED\x1EE\aK\x2\x2\x1EE\x63\x3\x2\x2\x2\x1EF"+
		"\x1F3\a\f\x2\x2\x1F0\x1F3\x5\x66\x34\x2\x1F1\x1F3\x5h\x35\x2\x1F2\x1EF"+
		"\x3\x2\x2\x2\x1F2\x1F0\x3\x2\x2\x2\x1F2\x1F1\x3\x2\x2\x2\x1F3\x65\x3\x2"+
		"\x2\x2\x1F4\x1F7\aK\x2\x2\x1F5\x1F6\a,\x2\x2\x1F6\x1F8\x5\x66\x34\x2\x1F7"+
		"\x1F5\x3\x2\x2\x2\x1F7\x1F8\x3\x2\x2\x2\x1F8g\x3\x2\x2\x2\x1F9\x1FB\a"+
		"\x18\x2\x2\x1FA\x1FC\x5j\x36\x2\x1FB\x1FA\x3\x2\x2\x2\x1FB\x1FC\x3\x2"+
		"\x2\x2\x1FC\x1FD\x3\x2\x2\x2\x1FD\x1FF\a\x1E\x2\x2\x1FE\x200\x5\x64\x33"+
		"\x2\x1FF\x1FE\x3\x2\x2\x2\x1FF\x200\x3\x2\x2\x2\x200\x201\x3\x2\x2\x2"+
		"\x201\x202\a\x19\x2\x2\x202i\x3\x2\x2\x2\x203\x208\x5\x64\x33\x2\x204"+
		"\x205\a-\x2\x2\x205\x207\x5\x64\x33\x2\x206\x204\x3\x2\x2\x2\x207\x20A"+
		"\x3\x2\x2\x2\x208\x206\x3\x2\x2\x2\x208\x209\x3\x2\x2\x2\x209k\x3\x2\x2"+
		"\x2\x20A\x208\x3\x2\x2\x2\x20B\x20C\b\x37\x1\x2\x20C\x20D\a\x33\x2\x2"+
		"\x20D\x22F\x5l\x37\f\x20E\x20F\a\x32\x2\x2\x20F\x22F\x5l\x37\v\x210\x211"+
		"\a\x31\x2\x2\x211\x22F\x5l\x37\n\x212\x213\a\x18\x2\x2\x213\x214\x5l\x37"+
		"\x2\x214\x215\a\x19\x2\x2\x215\x22F\x3\x2\x2\x2\x216\x217\x5\x82\x42\x2"+
		"\x217\x218\x5\x8CG\x2\x218\x22F\x3\x2\x2\x2\x219\x21A\x5\x8CG\x2\x21A"+
		"\x21B\x5\x84\x43\x2\x21B\x22F\x3\x2\x2\x2\x21C\x21E\x5~@\x2\x21D\x21F"+
		"\x5\x88\x45\x2\x21E\x21D\x3\x2\x2\x2\x21E\x21F\x3\x2\x2\x2\x21F\x22F\x3"+
		"\x2\x2\x2\x220\x222\x5\x9AN\x2\x221\x223\x5\x98M\x2\x222\x221\x3\x2\x2"+
		"\x2\x222\x223\x3\x2\x2\x2\x223\x22F\x3\x2\x2\x2\x224\x226\x5\x9EP\x2\x225"+
		"\x227\x5\x96L\x2\x226\x225\x3\x2\x2\x2\x226\x227\x3\x2\x2\x2\x227\x22F"+
		"\x3\x2\x2\x2\x228\x22F\x5|?\x2\x229\x22B\x5\x9CO\x2\x22A\x22C\x5\x98M"+
		"\x2\x22B\x22A\x3\x2\x2\x2\x22B\x22C\x3\x2\x2\x2\x22C\x22F\x3\x2\x2\x2"+
		"\x22D\x22F\x5\xA8U\x2\x22E\x20B\x3\x2\x2\x2\x22E\x20E\x3\x2\x2\x2\x22E"+
		"\x210\x3\x2\x2\x2\x22E\x212\x3\x2\x2\x2\x22E\x216\x3\x2\x2\x2\x22E\x219"+
		"\x3\x2\x2\x2\x22E\x21C\x3\x2\x2\x2\x22E\x220\x3\x2\x2\x2\x22E\x224\x3"+
		"\x2\x2\x2\x22E\x228\x3\x2\x2\x2\x22E\x229\x3\x2\x2\x2\x22E\x22D\x3\x2"+
		"\x2\x2\x22F\x24A\x3\x2\x2\x2\x230\x231\f\t\x2\x2\x231\x232\x5n\x38\x2"+
		"\x232\x233\x5l\x37\n\x233\x249\x3\x2\x2\x2\x234\x235\f\b\x2\x2\x235\x236"+
		"\x5p\x39\x2\x236\x237\x5l\x37\t\x237\x249\x3\x2\x2\x2\x238\x239\f\a\x2"+
		"\x2\x239\x23A\x5r:\x2\x23A\x23B\x5l\x37\b\x23B\x249\x3\x2\x2\x2\x23C\x23D"+
		"\f\x6\x2\x2\x23D\x23E\x5t;\x2\x23E\x23F\x5l\x37\a\x23F\x249\x3\x2\x2\x2"+
		"\x240\x241\f\x5\x2\x2\x241\x242\x5v<\x2\x242\x243\x5l\x37\x6\x243\x249"+
		"\x3\x2\x2\x2\x244\x245\f\x4\x2\x2\x245\x246\x5x=\x2\x246\x247\x5l\x37"+
		"\x5\x247\x249\x3\x2\x2\x2\x248\x230\x3\x2\x2\x2\x248\x234\x3\x2\x2\x2"+
		"\x248\x238\x3\x2\x2\x2\x248\x23C\x3\x2\x2\x2\x248\x240\x3\x2\x2\x2\x248"+
		"\x244\x3\x2\x2\x2\x249\x24C\x3\x2\x2\x2\x24A\x248\x3\x2\x2\x2\x24A\x24B"+
		"\x3\x2\x2\x2\x24Bm\x3\x2\x2\x2\x24C\x24A\x3\x2\x2\x2\x24D\x24E\t\x2\x2"+
		"\x2\x24Eo\x3\x2\x2\x2\x24F\x250\t\x3\x2\x2\x250q\x3\x2\x2\x2\x251\x252"+
		"\t\x4\x2\x2\x252s\x3\x2\x2\x2\x253\x254\a\x38\x2\x2\x254u\x3\x2\x2\x2"+
		"\x255\x256\t\x5\x2\x2\x256w\x3\x2\x2\x2\x257\x258\t\x6\x2\x2\x258y\x3"+
		"\x2\x2\x2\x259\x25A\x5\x8CG\x2\x25A\x25D\x5\x86\x44\x2\x25B\x25E\x5l\x37"+
		"\x2\x25C\x25E\x5z>\x2\x25D\x25B\x3\x2\x2\x2\x25D\x25C\x3\x2\x2\x2\x25E"+
		"{\x3\x2\x2\x2\x25F\x260\a\b\x2\x2\x260\x261\x5\x66\x34\x2\x261\x262\x5"+
		"\x88\x45\x2\x262}\x3\x2\x2\x2\x263\x265\x5.\x18\x2\x264\x266\x5\x32\x1A"+
		"\x2\x265\x264\x3\x2\x2\x2\x265\x266\x3\x2\x2\x2\x266\x267\x3\x2\x2\x2"+
		"\x267\x268\a\x1F\x2\x2\x268\x269\x5@!\x2\x269\x7F\x3\x2\x2\x2\x26A\x26B"+
		"\t\a\x2\x2\x26B\x26C\x5l\x37\x2\x26C\x81\x3\x2\x2\x2\x26D\x26E\t\b\x2"+
		"\x2\x26E\x83\x3\x2\x2\x2\x26F\x270\t\b\x2\x2\x270\x85\x3\x2\x2\x2\x271"+
		"\x272\t\t\x2\x2\x272\x87\x3\x2\x2\x2\x273\x275\a\x18\x2\x2\x274\x276\x5"+
		"\x8A\x46\x2\x275\x274\x3\x2\x2\x2\x275\x276\x3\x2\x2\x2\x276\x277\x3\x2"+
		"\x2\x2\x277\x278\a\x19\x2\x2\x278\x89\x3\x2\x2\x2\x279\x27E\x5l\x37\x2"+
		"\x27A\x27B\a-\x2\x2\x27B\x27D\x5l\x37\x2\x27C\x27A\x3\x2\x2\x2\x27D\x280"+
		"\x3\x2\x2\x2\x27E\x27C\x3\x2\x2\x2\x27E\x27F\x3\x2\x2\x2\x27F\x8B\x3\x2"+
		"\x2\x2\x280\x27E\x3\x2\x2\x2\x281\x283\x5\x9AN\x2\x282\x284\x5\x8EH\x2"+
		"\x283\x282\x3\x2\x2\x2\x283\x284\x3\x2\x2\x2\x284\x8D\x3\x2\x2\x2\x285"+
		"\x286\x5\x88\x45\x2\x286\x287\x5\x8EH\x2\x287\x28F\x3\x2\x2\x2\x288\x289"+
		"\a,\x2\x2\x289\x28F\x5\x8CG\x2\x28A\x28C\x5\x94K\x2\x28B\x28D\x5\x8EH"+
		"\x2\x28C\x28B\x3\x2\x2\x2\x28C\x28D\x3\x2\x2\x2\x28D\x28F\x3\x2\x2\x2"+
		"\x28E\x285\x3\x2\x2\x2\x28E\x288\x3\x2\x2\x2\x28E\x28A\x3\x2\x2\x2\x28F"+
		"\x8F\x3\x2\x2\x2\x290\x291\x5\x88\x45\x2\x291\x91\x3\x2\x2\x2\x292\x293"+
		"\a,\x2\x2\x293\x294\x5\x9AN\x2\x294\x93\x3\x2\x2\x2\x295\x296\a\x1A\x2"+
		"\x2\x296\x297\x5l\x37\x2\x297\x298\a\x1B\x2\x2\x298\x95\x3\x2\x2\x2\x299"+
		"\x29C\x5\x92J\x2\x29A\x29C\x5\x94K\x2\x29B\x299\x3\x2\x2\x2\x29B\x29A"+
		"\x3\x2\x2\x2\x29C\x29E\x3\x2\x2\x2\x29D\x29F\x5\x98M\x2\x29E\x29D\x3\x2"+
		"\x2\x2\x29E\x29F\x3\x2\x2\x2\x29F\x97\x3\x2\x2\x2\x2A0\x2A4\x5\x90I\x2"+
		"\x2A1\x2A4\x5\x92J\x2\x2A2\x2A4\x5\x94K\x2\x2A3\x2A0\x3\x2\x2\x2\x2A3"+
		"\x2A1\x3\x2\x2\x2\x2A3\x2A2\x3\x2\x2\x2\x2A4\x2A6\x3\x2\x2\x2\x2A5\x2A7"+
		"\x5\x98M\x2\x2A6\x2A5\x3\x2\x2\x2\x2A6\x2A7\x3\x2\x2\x2\x2A7\x99\x3\x2"+
		"\x2\x2\x2A8\x2A9\aK\x2\x2\x2A9\x9B\x3\x2\x2\x2\x2AA\x2AC\a\x1A\x2\x2\x2AB"+
		"\x2AD\x5\x8A\x46\x2\x2AC\x2AB\x3\x2\x2\x2\x2AC\x2AD\x3\x2\x2\x2\x2AD\x2AE"+
		"\x3\x2\x2\x2\x2AE\x2AF\a\x1B\x2\x2\x2AF\x9D\x3\x2\x2\x2\x2B0\x2B2\a\x1C"+
		"\x2\x2\x2B1\x2B3\x5\xA0Q\x2\x2B2\x2B1\x3\x2\x2\x2\x2B2\x2B3\x3\x2\x2\x2"+
		"\x2B3\x2B4\x3\x2\x2\x2\x2B4\x2B5\a\x1D\x2\x2\x2B5\x9F\x3\x2\x2\x2\x2B6"+
		"\x2BB\x5\xA2R\x2\x2B7\x2B8\a-\x2\x2\x2B8\x2BA\x5\xA2R\x2\x2B9\x2B7\x3"+
		"\x2\x2\x2\x2BA\x2BD\x3\x2\x2\x2\x2BB\x2B9\x3\x2\x2\x2\x2BB\x2BC\x3\x2"+
		"\x2\x2\x2BC\xA1\x3\x2\x2\x2\x2BD\x2BB\x3\x2\x2\x2\x2BE\x2BF\x5\xA4S\x2"+
		"\x2BF\x2C0\a*\x2\x2\x2C0\x2C1\x5l\x37\x2\x2C1\xA3\x3\x2\x2\x2\x2C2\x2C3"+
		"\aK\x2\x2\x2C3\xA5\x3\x2\x2\x2\x2C4\x2C6\t\x3\x2\x2\x2C5\x2C4\x3\x2\x2"+
		"\x2\x2C5\x2C6\x3\x2\x2\x2\x2C6\x2C7\x3\x2\x2\x2\x2C7\x2CD\x5\xACW\x2\x2C8"+
		"\x2CD\a$\x2\x2\x2C9\x2CD\a%\x2\x2\x2CA\x2CD\a&\x2\x2\x2CB\x2CD\x5\xAA"+
		"V\x2\x2CC\x2C5\x3\x2\x2\x2\x2CC\x2C8\x3\x2\x2\x2\x2CC\x2C9\x3\x2\x2\x2"+
		"\x2CC\x2CA\x3\x2\x2\x2\x2CC\x2CB\x3\x2\x2\x2\x2CD\xA7\x3\x2\x2\x2\x2CE"+
		"\x2D4\x5\xACW\x2\x2CF\x2D4\a$\x2\x2\x2D0\x2D4\a%\x2\x2\x2D1\x2D4\a&\x2"+
		"\x2\x2D2\x2D4\x5\xAAV\x2\x2D3\x2CE\x3\x2\x2\x2\x2D3\x2CF\x3\x2\x2\x2\x2D3"+
		"\x2D0\x3\x2\x2\x2\x2D3\x2D1\x3\x2\x2\x2\x2D3\x2D2\x3\x2\x2\x2\x2D4\xA9"+
		"\x3\x2\x2\x2\x2D5\x2D6\a\x3\x2\x2\x2D6\xAB\x3\x2\x2\x2\x2D7\x2DB\x5\xAE"+
		"X\x2\x2D8\x2DB\x5\xB0Y\x2\x2D9\x2DB\t\n\x2\x2\x2DA\x2D7\x3\x2\x2\x2\x2DA"+
		"\x2D8\x3\x2\x2\x2\x2DA\x2D9\x3\x2\x2\x2\x2DB\xAD\x3\x2\x2\x2\x2DC\x2DD"+
		"\a!\x2\x2\x2DD\xAF\x3\x2\x2\x2\x2DE\x2DF\a\"\x2\x2\x2DF\xB1\x3\x2\x2\x2"+
		"L\xB8\xBA\xC0\xCC\xCE\xD7\xE0\xE9\xEB\xF1\x100\x102\x108\x110\x117\x11B"+
		"\x120\x126\x129\x12C\x133\x136\x13C\x145\x14E\x153\x15D\x162\x16A\x171"+
		"\x17D\x183\x18E\x19C\x19E\x1AB\x1BC\x1C0\x1C4\x1CB\x1CF\x1D5\x1E2\x1EB"+
		"\x1F2\x1F7\x1FB\x1FF\x208\x21E\x222\x226\x22B\x22E\x248\x24A\x25D\x265"+
		"\x275\x27E\x283\x28C\x28E\x29B\x29E\x2A3\x2A6\x2AC\x2B2\x2BB\x2C5\x2CC"+
		"\x2D3\x2DA";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
