//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Luiz Fernando/Documents/Visual Studio 2013/Engines/ZScript/ZScript\ZScript.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class ZScriptParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, StringLiteral=5, DoubleQuoteEscape=6, 
		SingleQuoteEscape=7, T_EXPORT=8, T_FUNCTION=9, T_OVERRIDE=10, T_OBJECT=11, 
		T_SEQUENCE=12, T_THIS=13, T_BASE=14, T_VAR=15, T_LET=16, T_CONST=17, T_NEW=18, 
		T_IS=19, T_IF=20, T_ELSE=21, T_WHILE=22, T_FOR=23, T_BREAK=24, T_CONTINUE=25, 
		T_SWITCH=26, T_CASE=27, T_DEFAULT=28, T_RETURN=29, T_LEFT_PAREN=30, T_RIGHT_PAREN=31, 
		T_LEFT_BRACKET=32, T_RIGHT_BRACKET=33, T_LEFT_CURLY=34, T_RIGHT_CURLY=35, 
		T_CLOSURE_RETURN=36, T_CLOSURE_CALL=37, T_NULL_COALESCE=38, T_NULL_CONDITIONAL=39, 
		T_INT=40, T_FLOAT=41, T_VOID=42, T_ANY=43, T_STRING=44, T_BOOL=45, INT=46, 
		HEX=47, BINARY=48, FLOAT=49, T_FALSE=50, T_TRUE=51, T_NULL=52, T_QUOTES=53, 
		T_DOUBLE_QUOTES=54, T_TRIPPLE_DOT=55, T_DOUBLE_COLON=56, T_SEMICOLON=57, 
		T_PERIOD=58, T_COMMA=59, T_MULT=60, T_DIV=61, T_MOD=62, T_NOT=63, T_PLUS=64, 
		T_MINUS=65, T_INCREMENT=66, T_DECREMENT=67, T_BITWISE_AND=68, T_BITWISE_XOR=69, 
		T_BITWISE_OR=70, T_SHIFTLEFT=71, T_SHIFTRIGHT=72, T_EQUALITY=73, T_UNEQUALITY=74, 
		T_MORE_THAN_OR_EQUALS=75, T_LESS_THAN_OR_EQUALS=76, T_MORE_THAN=77, T_LESS_THAN=78, 
		T_LOGICAL_AND=79, T_LOGICAL_OR=80, T_EQUALS=81, T_PLUS_EQUALS=82, T_MINUS_EQUALS=83, 
		T_TIMES_EQUALS=84, T_DIV_EQUALS=85, T_MOD_EQUALS=86, T_XOR_EQUALS=87, 
		T_AND_EQUALS=88, T_TILDE_EQUALS=89, T_OR_EQUALS=90, T_SHIFTLEFT_EQUALS=91, 
		T_SHIFTRIGHT_EQUALS=92, IDENT=93, Whitespace=94, Newline=95, BlockComment=96, 
		LineComment=97, ImportDirective=98;
	public const int
		RULE_program = 0, RULE_scriptBody = 1, RULE_classDefinition = 2, RULE_classInherit = 3, 
		RULE_className = 4, RULE_classBody = 5, RULE_classField = 6, RULE_classMethod = 7, 
		RULE_globalVariable = 8, RULE_sequenceBlock = 9, RULE_sequenceName = 10, 
		RULE_sequenceBody = 11, RULE_sequenceFrame = 12, RULE_sequenceFrameChange = 13, 
		RULE_frameName = 14, RULE_frameRange = 15, RULE_frameRangeElement = 16, 
		RULE_frameNumber = 17, RULE_functionDefinition = 18, RULE_exportDefinition = 19, 
		RULE_functionName = 20, RULE_functionBody = 21, RULE_functionArguments = 22, 
		RULE_argumentList = 23, RULE_returnType = 24, RULE_functionArg = 25, RULE_argumentName = 26, 
		RULE_genericParametersDefinition = 27, RULE_genericParameterDefinitionList = 28, 
		RULE_genericConstraintList = 29, RULE_genericConstraint = 30, RULE_genericType = 31, 
		RULE_genericParameters = 32, RULE_genericParameterList = 33, RULE_typeAlias = 34, 
		RULE_typeAliasBody = 35, RULE_typeAliasVariable = 36, RULE_typeAliasFunction = 37, 
		RULE_typeAliasName = 38, RULE_typeAliasInherit = 39, RULE_statement = 40, 
		RULE_blockStatement = 41, RULE_ifStatement = 42, RULE_elseStatement = 43, 
		RULE_switchStatement = 44, RULE_switchBlock = 45, RULE_caseBlock = 46, 
		RULE_defaultBlock = 47, RULE_whileStatement = 48, RULE_forStatement = 49, 
		RULE_forInit = 50, RULE_forCondition = 51, RULE_forIncrement = 52, RULE_returnStatement = 53, 
		RULE_breakStatement = 54, RULE_continueStatement = 55, RULE_valueDeclareStatement = 56, 
		RULE_valueHolderDecl = 57, RULE_valueHolderName = 58, RULE_type = 59, 
		RULE_objectType = 60, RULE_typeName = 61, RULE_complexTypeName = 62, RULE_primitiveType = 63, 
		RULE_callableType = 64, RULE_listType = 65, RULE_dictionaryType = 66, 
		RULE_callableTypeList = 67, RULE_callableArgType = 68, RULE_expression = 69, 
		RULE_multOp = 70, RULE_additionOp = 71, RULE_bitwiseShift = 72, RULE_bitwiseAndOp = 73, 
		RULE_bitwiseXOrOp = 74, RULE_bitwiseOrOp = 75, RULE_relationalOp = 76, 
		RULE_equalityOp = 77, RULE_logicalAnd = 78, RULE_logicalOr = 79, RULE_assignmentExpression = 80, 
		RULE_newExpression = 81, RULE_closureExpression = 82, RULE_prefixOperator = 83, 
		RULE_postfixOperator = 84, RULE_unaryOperator = 85, RULE_assignmentOperator = 86, 
		RULE_funcCallArguments = 87, RULE_expressionList = 88, RULE_leftValue = 89, 
		RULE_leftValueAccess = 90, RULE_functionCall = 91, RULE_fieldAccess = 92, 
		RULE_arrayAccess = 93, RULE_objectAccess = 94, RULE_valueAccess = 95, 
		RULE_memberName = 96, RULE_arrayLiteral = 97, RULE_dictionaryLiteral = 98, 
		RULE_objectLiteral = 99, RULE_stringLiteral = 100, RULE_dictionaryEntryList = 101, 
		RULE_dictionaryEntry = 102, RULE_arrayLiteralInit = 103, RULE_dictionaryLiteralInit = 104, 
		RULE_objectEntryList = 105, RULE_objectEntryDefinition = 106, RULE_entryName = 107, 
		RULE_compileConstant = 108, RULE_constantAtom = 109, RULE_numericAtom = 110, 
		RULE_hexadecimalNumber = 111, RULE_binaryNumber = 112;
	public static readonly string[] ruleNames = {
		"program", "scriptBody", "classDefinition", "classInherit", "className", 
		"classBody", "classField", "classMethod", "globalVariable", "sequenceBlock", 
		"sequenceName", "sequenceBody", "sequenceFrame", "sequenceFrameChange", 
		"frameName", "frameRange", "frameRangeElement", "frameNumber", "functionDefinition", 
		"exportDefinition", "functionName", "functionBody", "functionArguments", 
		"argumentList", "returnType", "functionArg", "argumentName", "genericParametersDefinition", 
		"genericParameterDefinitionList", "genericConstraintList", "genericConstraint", 
		"genericType", "genericParameters", "genericParameterList", "typeAlias", 
		"typeAliasBody", "typeAliasVariable", "typeAliasFunction", "typeAliasName", 
		"typeAliasInherit", "statement", "blockStatement", "ifStatement", "elseStatement", 
		"switchStatement", "switchBlock", "caseBlock", "defaultBlock", "whileStatement", 
		"forStatement", "forInit", "forCondition", "forIncrement", "returnStatement", 
		"breakStatement", "continueStatement", "valueDeclareStatement", "valueHolderDecl", 
		"valueHolderName", "type", "objectType", "typeName", "complexTypeName", 
		"primitiveType", "callableType", "listType", "dictionaryType", "callableTypeList", 
		"callableArgType", "expression", "multOp", "additionOp", "bitwiseShift", 
		"bitwiseAndOp", "bitwiseXOrOp", "bitwiseOrOp", "relationalOp", "equalityOp", 
		"logicalAnd", "logicalOr", "assignmentExpression", "newExpression", "closureExpression", 
		"prefixOperator", "postfixOperator", "unaryOperator", "assignmentOperator", 
		"funcCallArguments", "expressionList", "leftValue", "leftValueAccess", 
		"functionCall", "fieldAccess", "arrayAccess", "objectAccess", "valueAccess", 
		"memberName", "arrayLiteral", "dictionaryLiteral", "objectLiteral", "stringLiteral", 
		"dictionaryEntryList", "dictionaryEntry", "arrayLiteralInit", "dictionaryLiteralInit", 
		"objectEntryList", "objectEntryDefinition", "entryName", "compileConstant", 
		"constantAtom", "numericAtom", "hexadecimalNumber", "binaryNumber"
	};

	private static readonly string[] _LiteralNames = {
		null, "'class'", "'where'", "'typeAlias'", "'<-'", null, null, null, "'@'", 
		"'func'", "'override'", "'object'", "'sequence'", "'this'", "'base'", 
		"'var'", "'let'", "'const'", "'new'", "'is'", "'if'", "'else'", "'while'", 
		"'for'", "'break'", "'continue'", "'switch'", "'case'", "'default'", "'return'", 
		"'('", "')'", "'['", "']'", "'{'", "'}'", "'->'", "'=>'", "'?:'", "'?'", 
		"'int'", "'float'", "'void'", "'any'", "'string'", "'bool'", null, null, 
		null, null, "'false'", "'true'", "'null'", "'''", "'\"'", "'...'", "':'", 
		"';'", "'.'", "','", "'*'", "'/'", "'%'", "'!'", "'+'", "'-'", "'++'", 
		"'--'", "'&'", "'^'", "'|'", null, null, "'=='", "'!='", "'>='", "'<='", 
		"'>'", "'<'", "'&&'", "'||'", "'='", "'+='", "'-='", "'*='", "'/='", "'%='", 
		"'^='", "'&='", "'~='", "'|='", "'<<='", "'>>='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, "StringLiteral", "DoubleQuoteEscape", "SingleQuoteEscape", 
		"T_EXPORT", "T_FUNCTION", "T_OVERRIDE", "T_OBJECT", "T_SEQUENCE", "T_THIS", 
		"T_BASE", "T_VAR", "T_LET", "T_CONST", "T_NEW", "T_IS", "T_IF", "T_ELSE", 
		"T_WHILE", "T_FOR", "T_BREAK", "T_CONTINUE", "T_SWITCH", "T_CASE", "T_DEFAULT", 
		"T_RETURN", "T_LEFT_PAREN", "T_RIGHT_PAREN", "T_LEFT_BRACKET", "T_RIGHT_BRACKET", 
		"T_LEFT_CURLY", "T_RIGHT_CURLY", "T_CLOSURE_RETURN", "T_CLOSURE_CALL", 
		"T_NULL_COALESCE", "T_NULL_CONDITIONAL", "T_INT", "T_FLOAT", "T_VOID", 
		"T_ANY", "T_STRING", "T_BOOL", "INT", "HEX", "BINARY", "FLOAT", "T_FALSE", 
		"T_TRUE", "T_NULL", "T_QUOTES", "T_DOUBLE_QUOTES", "T_TRIPPLE_DOT", "T_DOUBLE_COLON", 
		"T_SEMICOLON", "T_PERIOD", "T_COMMA", "T_MULT", "T_DIV", "T_MOD", "T_NOT", 
		"T_PLUS", "T_MINUS", "T_INCREMENT", "T_DECREMENT", "T_BITWISE_AND", "T_BITWISE_XOR", 
		"T_BITWISE_OR", "T_SHIFTLEFT", "T_SHIFTRIGHT", "T_EQUALITY", "T_UNEQUALITY", 
		"T_MORE_THAN_OR_EQUALS", "T_LESS_THAN_OR_EQUALS", "T_MORE_THAN", "T_LESS_THAN", 
		"T_LOGICAL_AND", "T_LOGICAL_OR", "T_EQUALS", "T_PLUS_EQUALS", "T_MINUS_EQUALS", 
		"T_TIMES_EQUALS", "T_DIV_EQUALS", "T_MOD_EQUALS", "T_XOR_EQUALS", "T_AND_EQUALS", 
		"T_TILDE_EQUALS", "T_OR_EQUALS", "T_SHIFTLEFT_EQUALS", "T_SHIFTRIGHT_EQUALS", 
		"IDENT", "Whitespace", "Newline", "BlockComment", "LineComment", "ImportDirective"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ZScript.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public ZScriptParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ScriptBodyContext scriptBody() {
			return GetRuleContext<ScriptBodyContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226; scriptBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptBodyContext : ParserRuleContext {
		public FunctionDefinitionContext[] functionDefinition() {
			return GetRuleContexts<FunctionDefinitionContext>();
		}
		public FunctionDefinitionContext functionDefinition(int i) {
			return GetRuleContext<FunctionDefinitionContext>(i);
		}
		public GlobalVariableContext[] globalVariable() {
			return GetRuleContexts<GlobalVariableContext>();
		}
		public GlobalVariableContext globalVariable(int i) {
			return GetRuleContext<GlobalVariableContext>(i);
		}
		public ExportDefinitionContext[] exportDefinition() {
			return GetRuleContexts<ExportDefinitionContext>();
		}
		public ExportDefinitionContext exportDefinition(int i) {
			return GetRuleContext<ExportDefinitionContext>(i);
		}
		public ClassDefinitionContext[] classDefinition() {
			return GetRuleContexts<ClassDefinitionContext>();
		}
		public ClassDefinitionContext classDefinition(int i) {
			return GetRuleContext<ClassDefinitionContext>(i);
		}
		public SequenceBlockContext[] sequenceBlock() {
			return GetRuleContexts<SequenceBlockContext>();
		}
		public SequenceBlockContext sequenceBlock(int i) {
			return GetRuleContext<SequenceBlockContext>(i);
		}
		public TypeAliasContext[] typeAlias() {
			return GetRuleContexts<TypeAliasContext>();
		}
		public TypeAliasContext typeAlias(int i) {
			return GetRuleContext<TypeAliasContext>(i);
		}
		public ScriptBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scriptBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterScriptBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitScriptBody(this);
		}
	}

	[RuleVersion(0)]
	public ScriptBodyContext scriptBody() {
		ScriptBodyContext _localctx = new ScriptBodyContext(Context, State);
		EnterRule(_localctx, 2, RULE_scriptBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T_EXPORT) | (1L << T_FUNCTION) | (1L << T_SEQUENCE) | (1L << T_VAR) | (1L << T_LET))) != 0)) {
				{
				State = 234;
				switch (TokenStream.La(1)) {
				case T_FUNCTION:
					{
					State = 228; functionDefinition();
					}
					break;
				case T_VAR:
				case T_LET:
					{
					State = 229; globalVariable();
					}
					break;
				case T_EXPORT:
					{
					State = 230; exportDefinition();
					}
					break;
				case T__0:
					{
					State = 231; classDefinition();
					}
					break;
				case T_SEQUENCE:
					{
					State = 232; sequenceBlock();
					}
					break;
				case T__2:
					{
					State = 233; typeAlias();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 238;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDefinitionContext : ParserRuleContext {
		public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public GenericParametersDefinitionContext genericParametersDefinition() {
			return GetRuleContext<GenericParametersDefinitionContext>(0);
		}
		public ClassInheritContext classInherit() {
			return GetRuleContext<ClassInheritContext>(0);
		}
		public ClassDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterClassDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitClassDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ClassDefinitionContext classDefinition() {
		ClassDefinitionContext _localctx = new ClassDefinitionContext(Context, State);
		EnterRule(_localctx, 4, RULE_classDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239; Match(T__0);
			State = 240; className();
			State = 242;
			_la = TokenStream.La(1);
			if (_la==T_LESS_THAN) {
				{
				State = 241; genericParametersDefinition();
				}
			}

			State = 245;
			_la = TokenStream.La(1);
			if (_la==T_DOUBLE_COLON) {
				{
				State = 244; classInherit();
				}
			}

			State = 247; classBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassInheritContext : ParserRuleContext {
		public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		public ClassInheritContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classInherit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterClassInherit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitClassInherit(this);
		}
	}

	[RuleVersion(0)]
	public ClassInheritContext classInherit() {
		ClassInheritContext _localctx = new ClassInheritContext(Context, State);
		EnterRule(_localctx, 6, RULE_classInherit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249; Match(T_DOUBLE_COLON);
			State = 250; className();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassNameContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(ZScriptParser.IDENT, 0); }
		public ClassNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_className; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterClassName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitClassName(this);
		}
	}

	[RuleVersion(0)]
	public ClassNameContext className() {
		ClassNameContext _localctx = new ClassNameContext(Context, State);
		EnterRule(_localctx, 8, RULE_className);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252; Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		public ClassFieldContext[] classField() {
			return GetRuleContexts<ClassFieldContext>();
		}
		public ClassFieldContext classField(int i) {
			return GetRuleContext<ClassFieldContext>(i);
		}
		public ClassMethodContext[] classMethod() {
			return GetRuleContexts<ClassMethodContext>();
		}
		public ClassMethodContext classMethod(int i) {
			return GetRuleContext<ClassMethodContext>(i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 10, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254; Match(T_LEFT_CURLY);
			State = 259;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T_FUNCTION) | (1L << T_OVERRIDE) | (1L << T_VAR) | (1L << T_LET))) != 0)) {
				{
				State = 257;
				switch (TokenStream.La(1)) {
				case T_VAR:
				case T_LET:
					{
					State = 255; classField();
					}
					break;
				case T_FUNCTION:
				case T_OVERRIDE:
					{
					State = 256; classMethod();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 261;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 262; Match(T_RIGHT_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassFieldContext : ParserRuleContext {
		public ValueDeclareStatementContext valueDeclareStatement() {
			return GetRuleContext<ValueDeclareStatementContext>(0);
		}
		public ClassFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classField; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterClassField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitClassField(this);
		}
	}

	[RuleVersion(0)]
	public ClassFieldContext classField() {
		ClassFieldContext _localctx = new ClassFieldContext(Context, State);
		EnterRule(_localctx, 12, RULE_classField);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264; valueDeclareStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassMethodContext : ParserRuleContext {
		public IToken @override;
		public FunctionDefinitionContext functionDefinition() {
			return GetRuleContext<FunctionDefinitionContext>(0);
		}
		public ClassMethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classMethod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterClassMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitClassMethod(this);
		}
	}

	[RuleVersion(0)]
	public ClassMethodContext classMethod() {
		ClassMethodContext _localctx = new ClassMethodContext(Context, State);
		EnterRule(_localctx, 14, RULE_classMethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			_la = TokenStream.La(1);
			if (_la==T_OVERRIDE) {
				{
				State = 266; _localctx.@override = Match(T_OVERRIDE);
				}
			}

			State = 269; functionDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVariableContext : ParserRuleContext {
		public ValueDeclareStatementContext valueDeclareStatement() {
			return GetRuleContext<ValueDeclareStatementContext>(0);
		}
		public GlobalVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterGlobalVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitGlobalVariable(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVariableContext globalVariable() {
		GlobalVariableContext _localctx = new GlobalVariableContext(Context, State);
		EnterRule(_localctx, 16, RULE_globalVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271; valueDeclareStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SequenceBlockContext : ParserRuleContext {
		public SequenceNameContext sequenceName() {
			return GetRuleContext<SequenceNameContext>(0);
		}
		public SequenceBodyContext sequenceBody() {
			return GetRuleContext<SequenceBodyContext>(0);
		}
		public SequenceBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequenceBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterSequenceBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitSequenceBlock(this);
		}
	}

	[RuleVersion(0)]
	public SequenceBlockContext sequenceBlock() {
		SequenceBlockContext _localctx = new SequenceBlockContext(Context, State);
		EnterRule(_localctx, 18, RULE_sequenceBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273; Match(T_SEQUENCE);
			State = 274; sequenceName();
			State = 275; sequenceBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SequenceNameContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(ZScriptParser.IDENT, 0); }
		public SequenceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequenceName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterSequenceName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitSequenceName(this);
		}
	}

	[RuleVersion(0)]
	public SequenceNameContext sequenceName() {
		SequenceNameContext _localctx = new SequenceNameContext(Context, State);
		EnterRule(_localctx, 20, RULE_sequenceName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277; Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SequenceBodyContext : ParserRuleContext {
		public ClassFieldContext[] classField() {
			return GetRuleContexts<ClassFieldContext>();
		}
		public ClassFieldContext classField(int i) {
			return GetRuleContext<ClassFieldContext>(i);
		}
		public SequenceFrameContext[] sequenceFrame() {
			return GetRuleContexts<SequenceFrameContext>();
		}
		public SequenceFrameContext sequenceFrame(int i) {
			return GetRuleContext<SequenceFrameContext>(i);
		}
		public SequenceFrameChangeContext[] sequenceFrameChange() {
			return GetRuleContexts<SequenceFrameChangeContext>();
		}
		public SequenceFrameChangeContext sequenceFrameChange(int i) {
			return GetRuleContext<SequenceFrameChangeContext>(i);
		}
		public SequenceBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequenceBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterSequenceBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitSequenceBody(this);
		}
	}

	[RuleVersion(0)]
	public SequenceBodyContext sequenceBody() {
		SequenceBodyContext _localctx = new SequenceBodyContext(Context, State);
		EnterRule(_localctx, 22, RULE_sequenceBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279; Match(T_LEFT_BRACKET);
			State = 285;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T_VAR) | (1L << T_LET) | (1L << T_LEFT_CURLY) | (1L << INT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T_PLUS - 64)) | (1L << (T_MINUS - 64)) | (1L << (T_EQUALS - 64)) | (1L << (IDENT - 64)))) != 0)) {
				{
				State = 283;
				switch (TokenStream.La(1)) {
				case T_VAR:
				case T_LET:
					{
					State = 280; classField();
					}
					break;
				case T_LEFT_CURLY:
				case INT:
				case T_PLUS:
				case IDENT:
					{
					State = 281; sequenceFrame();
					}
					break;
				case T_MINUS:
				case T_EQUALS:
					{
					State = 282; sequenceFrameChange();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 287;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 288; Match(T_RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SequenceFrameContext : ParserRuleContext {
		public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public FrameNameContext frameName() {
			return GetRuleContext<FrameNameContext>(0);
		}
		public FrameRangeContext frameRange() {
			return GetRuleContext<FrameRangeContext>(0);
		}
		public SequenceFrameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequenceFrame; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterSequenceFrame(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitSequenceFrame(this);
		}
	}

	[RuleVersion(0)]
	public SequenceFrameContext sequenceFrame() {
		SequenceFrameContext _localctx = new SequenceFrameContext(Context, State);
		EnterRule(_localctx, 24, RULE_sequenceFrame);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			_la = TokenStream.La(1);
			if (_la==IDENT) {
				{
				State = 290; frameName();
				State = 291; Match(T_DOUBLE_COLON);
				}
			}

			State = 296;
			_la = TokenStream.La(1);
			if (_la==INT || _la==T_PLUS) {
				{
				State = 295; frameRange();
				}
			}

			State = 298; functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SequenceFrameChangeContext : ParserRuleContext {
		public FrameNumberContext frameNumber() {
			return GetRuleContext<FrameNumberContext>(0);
		}
		public SequenceFrameChangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequenceFrameChange; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterSequenceFrameChange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitSequenceFrameChange(this);
		}
	}

	[RuleVersion(0)]
	public SequenceFrameChangeContext sequenceFrameChange() {
		SequenceFrameChangeContext _localctx = new SequenceFrameChangeContext(Context, State);
		EnterRule(_localctx, 26, RULE_sequenceFrameChange);
		try {
			State = 304;
			switch (TokenStream.La(1)) {
			case T_EQUALS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 300; Match(T_EQUALS);
				State = 301; frameNumber();
				}
				break;
			case T_MINUS:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 302; Match(T_MINUS);
				State = 303; frameNumber();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameNameContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(ZScriptParser.IDENT, 0); }
		public FrameNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFrameName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFrameName(this);
		}
	}

	[RuleVersion(0)]
	public FrameNameContext frameName() {
		FrameNameContext _localctx = new FrameNameContext(Context, State);
		EnterRule(_localctx, 28, RULE_frameName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306; Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameRangeContext : ParserRuleContext {
		public FrameRangeElementContext[] frameRangeElement() {
			return GetRuleContexts<FrameRangeElementContext>();
		}
		public FrameRangeElementContext frameRangeElement(int i) {
			return GetRuleContext<FrameRangeElementContext>(i);
		}
		public FrameRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameRange; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFrameRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFrameRange(this);
		}
	}

	[RuleVersion(0)]
	public FrameRangeContext frameRange() {
		FrameRangeContext _localctx = new FrameRangeContext(Context, State);
		EnterRule(_localctx, 30, RULE_frameRange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308; frameRangeElement();
			State = 313;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T_COMMA) {
				{
				{
				State = 309; Match(T_COMMA);
				State = 310; frameRangeElement();
				}
				}
				State = 315;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameRangeElementContext : ParserRuleContext {
		public IToken relative;
		public FrameNumberContext[] frameNumber() {
			return GetRuleContexts<FrameNumberContext>();
		}
		public FrameNumberContext frameNumber(int i) {
			return GetRuleContext<FrameNumberContext>(i);
		}
		public FrameRangeElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameRangeElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFrameRangeElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFrameRangeElement(this);
		}
	}

	[RuleVersion(0)]
	public FrameRangeElementContext frameRangeElement() {
		FrameRangeElementContext _localctx = new FrameRangeElementContext(Context, State);
		EnterRule(_localctx, 32, RULE_frameRangeElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317;
			_la = TokenStream.La(1);
			if (_la==T_PLUS) {
				{
				State = 316; _localctx.relative = Match(T_PLUS);
				}
			}

			State = 319; frameNumber();
			State = 322;
			_la = TokenStream.La(1);
			if (_la==T_MINUS) {
				{
				State = 320; Match(T_MINUS);
				State = 321; frameNumber();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameNumberContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(ZScriptParser.INT, 0); }
		public FrameNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFrameNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFrameNumber(this);
		}
	}

	[RuleVersion(0)]
	public FrameNumberContext frameNumber() {
		FrameNumberContext _localctx = new FrameNumberContext(Context, State);
		EnterRule(_localctx, 34, RULE_frameNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 324; Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public GenericParametersDefinitionContext genericParametersDefinition() {
			return GetRuleContext<GenericParametersDefinitionContext>(0);
		}
		public FunctionArgumentsContext functionArguments() {
			return GetRuleContext<FunctionArgumentsContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFunctionDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFunctionDefinition(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 36, RULE_functionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 326; Match(T_FUNCTION);
			State = 327; functionName();
			State = 329;
			_la = TokenStream.La(1);
			if (_la==T_LESS_THAN) {
				{
				State = 328; genericParametersDefinition();
				}
			}

			State = 332;
			_la = TokenStream.La(1);
			if (_la==T_LEFT_PAREN) {
				{
				State = 331; functionArguments();
				}
			}

			State = 335;
			_la = TokenStream.La(1);
			if (_la==T_DOUBLE_COLON) {
				{
				State = 334; returnType();
				}
			}

			State = 337; functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportDefinitionContext : ParserRuleContext {
		public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		public FunctionArgumentsContext functionArguments() {
			return GetRuleContext<FunctionArgumentsContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public ExportDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterExportDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitExportDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ExportDefinitionContext exportDefinition() {
		ExportDefinitionContext _localctx = new ExportDefinitionContext(Context, State);
		EnterRule(_localctx, 38, RULE_exportDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339; Match(T_EXPORT);
			State = 340; functionName();
			State = 342;
			_la = TokenStream.La(1);
			if (_la==T_LEFT_PAREN) {
				{
				State = 341; functionArguments();
				}
			}

			State = 345;
			_la = TokenStream.La(1);
			if (_la==T_DOUBLE_COLON) {
				{
				State = 344; returnType();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionNameContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(ZScriptParser.IDENT, 0); }
		public FunctionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFunctionName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFunctionName(this);
		}
	}

	[RuleVersion(0)]
	public FunctionNameContext functionName() {
		FunctionNameContext _localctx = new FunctionNameContext(Context, State);
		EnterRule(_localctx, 40, RULE_functionName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 347; Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFunctionBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFunctionBody(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 42, RULE_functionBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 349; blockStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionArgumentsContext : ParserRuleContext {
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public FunctionArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFunctionArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFunctionArguments(this);
		}
	}

	[RuleVersion(0)]
	public FunctionArgumentsContext functionArguments() {
		FunctionArgumentsContext _localctx = new FunctionArgumentsContext(Context, State);
		EnterRule(_localctx, 44, RULE_functionArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 351; Match(T_LEFT_PAREN);
			State = 353;
			_la = TokenStream.La(1);
			if (_la==IDENT) {
				{
				State = 352; argumentList();
				}
			}

			State = 355; Match(T_RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public FunctionArgContext[] functionArg() {
			return GetRuleContexts<FunctionArgContext>();
		}
		public FunctionArgContext functionArg(int i) {
			return GetRuleContext<FunctionArgContext>(i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 46, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 357; functionArg();
			State = 362;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T_COMMA) {
				{
				{
				State = 358; Match(T_COMMA);
				State = 359; functionArg();
				}
				}
				State = 364;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnTypeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterReturnType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitReturnType(this);
		}
	}

	[RuleVersion(0)]
	public ReturnTypeContext returnType() {
		ReturnTypeContext _localctx = new ReturnTypeContext(Context, State);
		EnterRule(_localctx, 48, RULE_returnType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 365; Match(T_DOUBLE_COLON);
			State = 366; type(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionArgContext : ParserRuleContext {
		public IToken variadic;
		public ArgumentNameContext argumentName() {
			return GetRuleContext<ArgumentNameContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public CompileConstantContext compileConstant() {
			return GetRuleContext<CompileConstantContext>(0);
		}
		public FunctionArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFunctionArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFunctionArg(this);
		}
	}

	[RuleVersion(0)]
	public FunctionArgContext functionArg() {
		FunctionArgContext _localctx = new FunctionArgContext(Context, State);
		EnterRule(_localctx, 50, RULE_functionArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 368; argumentName();
			State = 371;
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 369; Match(T_DOUBLE_COLON);
				State = 370; type(0);
				}
				break;
			}
			State = 376;
			switch (TokenStream.La(1)) {
			case T_TRIPPLE_DOT:
				{
				State = 373; _localctx.variadic = Match(T_TRIPPLE_DOT);
				}
				break;
			case T_EQUALS:
				{
				{
				State = 374; Match(T_EQUALS);
				State = 375; compileConstant();
				}
				}
				break;
			case T_RIGHT_PAREN:
			case T_CLOSURE_CALL:
			case T_DOUBLE_COLON:
			case T_COMMA:
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentNameContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(ZScriptParser.IDENT, 0); }
		public ArgumentNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterArgumentName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitArgumentName(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentNameContext argumentName() {
		ArgumentNameContext _localctx = new ArgumentNameContext(Context, State);
		EnterRule(_localctx, 52, RULE_argumentName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 378; Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericParametersDefinitionContext : ParserRuleContext {
		public GenericParameterDefinitionListContext genericParameterDefinitionList() {
			return GetRuleContext<GenericParameterDefinitionListContext>(0);
		}
		public GenericConstraintListContext genericConstraintList() {
			return GetRuleContext<GenericConstraintListContext>(0);
		}
		public GenericParametersDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericParametersDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterGenericParametersDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitGenericParametersDefinition(this);
		}
	}

	[RuleVersion(0)]
	public GenericParametersDefinitionContext genericParametersDefinition() {
		GenericParametersDefinitionContext _localctx = new GenericParametersDefinitionContext(Context, State);
		EnterRule(_localctx, 54, RULE_genericParametersDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 380; Match(T_LESS_THAN);
			State = 381; genericParameterDefinitionList();
			State = 383;
			_la = TokenStream.La(1);
			if (_la==T__1) {
				{
				State = 382; genericConstraintList();
				}
			}

			State = 385; Match(T_MORE_THAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericParameterDefinitionListContext : ParserRuleContext {
		public GenericTypeContext[] genericType() {
			return GetRuleContexts<GenericTypeContext>();
		}
		public GenericTypeContext genericType(int i) {
			return GetRuleContext<GenericTypeContext>(i);
		}
		public GenericParameterDefinitionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericParameterDefinitionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterGenericParameterDefinitionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitGenericParameterDefinitionList(this);
		}
	}

	[RuleVersion(0)]
	public GenericParameterDefinitionListContext genericParameterDefinitionList() {
		GenericParameterDefinitionListContext _localctx = new GenericParameterDefinitionListContext(Context, State);
		EnterRule(_localctx, 56, RULE_genericParameterDefinitionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387; genericType();
			State = 392;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T_COMMA) {
				{
				{
				State = 388; Match(T_COMMA);
				State = 389; genericType();
				}
				}
				State = 394;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericConstraintListContext : ParserRuleContext {
		public GenericConstraintContext[] genericConstraint() {
			return GetRuleContexts<GenericConstraintContext>();
		}
		public GenericConstraintContext genericConstraint(int i) {
			return GetRuleContext<GenericConstraintContext>(i);
		}
		public GenericConstraintListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericConstraintList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterGenericConstraintList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitGenericConstraintList(this);
		}
	}

	[RuleVersion(0)]
	public GenericConstraintListContext genericConstraintList() {
		GenericConstraintListContext _localctx = new GenericConstraintListContext(Context, State);
		EnterRule(_localctx, 58, RULE_genericConstraintList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 395; Match(T__1);
			State = 396; genericConstraint();
			State = 401;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T_COMMA) {
				{
				{
				State = 397; Match(T_COMMA);
				State = 398; genericConstraint();
				}
				}
				State = 403;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericConstraintContext : ParserRuleContext {
		public GenericTypeContext genericType() {
			return GetRuleContext<GenericTypeContext>(0);
		}
		public ComplexTypeNameContext complexTypeName() {
			return GetRuleContext<ComplexTypeNameContext>(0);
		}
		public GenericConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericConstraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterGenericConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitGenericConstraint(this);
		}
	}

	[RuleVersion(0)]
	public GenericConstraintContext genericConstraint() {
		GenericConstraintContext _localctx = new GenericConstraintContext(Context, State);
		EnterRule(_localctx, 60, RULE_genericConstraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 404; genericType();
			State = 405; Match(T_DOUBLE_COLON);
			State = 406; complexTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericTypeContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(ZScriptParser.IDENT, 0); }
		public GenericTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterGenericType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitGenericType(this);
		}
	}

	[RuleVersion(0)]
	public GenericTypeContext genericType() {
		GenericTypeContext _localctx = new GenericTypeContext(Context, State);
		EnterRule(_localctx, 62, RULE_genericType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 408; Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericParametersContext : ParserRuleContext {
		public GenericParameterListContext genericParameterList() {
			return GetRuleContext<GenericParameterListContext>(0);
		}
		public GenericParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterGenericParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitGenericParameters(this);
		}
	}

	[RuleVersion(0)]
	public GenericParametersContext genericParameters() {
		GenericParametersContext _localctx = new GenericParametersContext(Context, State);
		EnterRule(_localctx, 64, RULE_genericParameters);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410; Match(T_LESS_THAN);
			State = 411; genericParameterList();
			State = 412; Match(T_MORE_THAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericParameterListContext : ParserRuleContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public GenericParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterGenericParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitGenericParameterList(this);
		}
	}

	[RuleVersion(0)]
	public GenericParameterListContext genericParameterList() {
		GenericParameterListContext _localctx = new GenericParameterListContext(Context, State);
		EnterRule(_localctx, 66, RULE_genericParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414; type(0);
			State = 419;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T_COMMA) {
				{
				{
				State = 415; Match(T_COMMA);
				State = 416; type(0);
				}
				}
				State = 421;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeAliasContext : ParserRuleContext {
		public TypeAliasNameContext typeAliasName() {
			return GetRuleContext<TypeAliasNameContext>(0);
		}
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public TypeAliasBodyContext typeAliasBody() {
			return GetRuleContext<TypeAliasBodyContext>(0);
		}
		public TypeAliasInheritContext typeAliasInherit() {
			return GetRuleContext<TypeAliasInheritContext>(0);
		}
		public TypeAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeAlias; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterTypeAlias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitTypeAlias(this);
		}
	}

	[RuleVersion(0)]
	public TypeAliasContext typeAlias() {
		TypeAliasContext _localctx = new TypeAliasContext(Context, State);
		EnterRule(_localctx, 68, RULE_typeAlias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 422; Match(T__2);
			State = 423; typeAliasName();
			State = 425;
			_la = TokenStream.La(1);
			if (_la==T__3) {
				{
				State = 424; typeAliasInherit();
				}
			}

			State = 427; Match(T_DOUBLE_COLON);
			State = 428; stringLiteral();
			State = 431;
			switch (TokenStream.La(1)) {
			case T_SEMICOLON:
				{
				State = 429; Match(T_SEMICOLON);
				}
				break;
			case T_LEFT_CURLY:
				{
				State = 430; typeAliasBody();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeAliasBodyContext : ParserRuleContext {
		public TypeAliasVariableContext[] typeAliasVariable() {
			return GetRuleContexts<TypeAliasVariableContext>();
		}
		public TypeAliasVariableContext typeAliasVariable(int i) {
			return GetRuleContext<TypeAliasVariableContext>(i);
		}
		public TypeAliasFunctionContext[] typeAliasFunction() {
			return GetRuleContexts<TypeAliasFunctionContext>();
		}
		public TypeAliasFunctionContext typeAliasFunction(int i) {
			return GetRuleContext<TypeAliasFunctionContext>(i);
		}
		public TypeAliasBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeAliasBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterTypeAliasBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitTypeAliasBody(this);
		}
	}

	[RuleVersion(0)]
	public TypeAliasBodyContext typeAliasBody() {
		TypeAliasBodyContext _localctx = new TypeAliasBodyContext(Context, State);
		EnterRule(_localctx, 70, RULE_typeAliasBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 433; Match(T_LEFT_CURLY);
			State = 440;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T_FUNCTION) | (1L << T_VAR) | (1L << T_LET))) != 0)) {
				{
				State = 438;
				switch (TokenStream.La(1)) {
				case T_VAR:
				case T_LET:
					{
					State = 434; typeAliasVariable();
					}
					break;
				case T_FUNCTION:
					{
					State = 435; typeAliasFunction();
					State = 436; Match(T_SEMICOLON);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 442;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 443; Match(T_RIGHT_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeAliasVariableContext : ParserRuleContext {
		public ValueDeclareStatementContext valueDeclareStatement() {
			return GetRuleContext<ValueDeclareStatementContext>(0);
		}
		public TypeAliasVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeAliasVariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterTypeAliasVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitTypeAliasVariable(this);
		}
	}

	[RuleVersion(0)]
	public TypeAliasVariableContext typeAliasVariable() {
		TypeAliasVariableContext _localctx = new TypeAliasVariableContext(Context, State);
		EnterRule(_localctx, 72, RULE_typeAliasVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 445; valueDeclareStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeAliasFunctionContext : ParserRuleContext {
		public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		public FunctionArgumentsContext functionArguments() {
			return GetRuleContext<FunctionArgumentsContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public TypeAliasFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeAliasFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterTypeAliasFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitTypeAliasFunction(this);
		}
	}

	[RuleVersion(0)]
	public TypeAliasFunctionContext typeAliasFunction() {
		TypeAliasFunctionContext _localctx = new TypeAliasFunctionContext(Context, State);
		EnterRule(_localctx, 74, RULE_typeAliasFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 447; Match(T_FUNCTION);
			State = 448; functionName();
			State = 449; functionArguments();
			State = 450; returnType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeAliasNameContext : ParserRuleContext {
		public ComplexTypeNameContext complexTypeName() {
			return GetRuleContext<ComplexTypeNameContext>(0);
		}
		public TypeAliasNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeAliasName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterTypeAliasName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitTypeAliasName(this);
		}
	}

	[RuleVersion(0)]
	public TypeAliasNameContext typeAliasName() {
		TypeAliasNameContext _localctx = new TypeAliasNameContext(Context, State);
		EnterRule(_localctx, 76, RULE_typeAliasName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 452; complexTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeAliasInheritContext : ParserRuleContext {
		public TypeAliasNameContext typeAliasName() {
			return GetRuleContext<TypeAliasNameContext>(0);
		}
		public TypeAliasInheritContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeAliasInherit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterTypeAliasInherit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitTypeAliasInherit(this);
		}
	}

	[RuleVersion(0)]
	public TypeAliasInheritContext typeAliasInherit() {
		TypeAliasInheritContext _localctx = new TypeAliasInheritContext(Context, State);
		EnterRule(_localctx, 78, RULE_typeAliasInherit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 454; Match(T__3);
			State = 455; typeAliasName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		public ValueDeclareStatementContext valueDeclareStatement() {
			return GetRuleContext<ValueDeclareStatementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 80, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 473;
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				{
				State = 459;
				switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
				case 1:
					{
					State = 457; expression(0);
					}
					break;
				case 2:
					{
					State = 458; assignmentExpression();
					}
					break;
				}
				State = 461; Match(T_SEMICOLON);
				}
				}
				break;
			case 2:
				{
				State = 463; blockStatement();
				}
				break;
			case 3:
				{
				State = 464; Match(T_SEMICOLON);
				}
				break;
			case 4:
				{
				State = 465; ifStatement();
				}
				break;
			case 5:
				{
				State = 466; whileStatement();
				}
				break;
			case 6:
				{
				State = 467; forStatement();
				}
				break;
			case 7:
				{
				State = 468; switchStatement();
				}
				break;
			case 8:
				{
				State = 469; returnStatement();
				}
				break;
			case 9:
				{
				State = 470; breakStatement();
				}
				break;
			case 10:
				{
				State = 471; continueStatement();
				}
				break;
			case 11:
				{
				State = 472; valueDeclareStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(Context, State);
		EnterRule(_localctx, 82, RULE_blockStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 475; Match(T_LEFT_CURLY);
			State = 479;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << StringLiteral) | (1L << T_THIS) | (1L << T_BASE) | (1L << T_VAR) | (1L << T_LET) | (1L << T_NEW) | (1L << T_IF) | (1L << T_WHILE) | (1L << T_FOR) | (1L << T_BREAK) | (1L << T_CONTINUE) | (1L << T_SWITCH) | (1L << T_RETURN) | (1L << T_LEFT_PAREN) | (1L << T_LEFT_BRACKET) | (1L << T_LEFT_CURLY) | (1L << INT) | (1L << HEX) | (1L << BINARY) | (1L << FLOAT) | (1L << T_FALSE) | (1L << T_TRUE) | (1L << T_NULL) | (1L << T_SEMICOLON) | (1L << T_NOT))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (T_MINUS - 65)) | (1L << (T_INCREMENT - 65)) | (1L << (T_DECREMENT - 65)) | (1L << (IDENT - 65)))) != 0)) {
				{
				{
				State = 476; statement();
				}
				}
				State = 481;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 482; Match(T_RIGHT_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 84, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 484; Match(T_IF);
			State = 485; Match(T_LEFT_PAREN);
			State = 486; expression(0);
			State = 487; Match(T_RIGHT_PAREN);
			State = 488; statement();
			State = 490;
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				State = 489; elseStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 86, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 492; Match(T_ELSE);
			State = 493; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		public SwitchBlockContext switchBlock() {
			return GetRuleContext<SwitchBlockContext>(0);
		}
		public ValueHolderDeclContext valueHolderDecl() {
			return GetRuleContext<ValueHolderDeclContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 88, RULE_switchStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 495; Match(T_SWITCH);
			State = 496; Match(T_LEFT_PAREN);
			State = 499;
			switch (TokenStream.La(1)) {
			case T_VAR:
			case T_LET:
				{
				State = 497; valueHolderDecl();
				}
				break;
			case StringLiteral:
			case T_THIS:
			case T_BASE:
			case T_NEW:
			case T_LEFT_PAREN:
			case T_LEFT_BRACKET:
			case T_LEFT_CURLY:
			case INT:
			case HEX:
			case BINARY:
			case FLOAT:
			case T_FALSE:
			case T_TRUE:
			case T_NULL:
			case T_NOT:
			case T_MINUS:
			case T_INCREMENT:
			case T_DECREMENT:
			case IDENT:
				{
				State = 498; expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 501; Match(T_RIGHT_PAREN);
			State = 502; switchBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBlockContext : ParserRuleContext {
		public CaseBlockContext[] caseBlock() {
			return GetRuleContexts<CaseBlockContext>();
		}
		public CaseBlockContext caseBlock(int i) {
			return GetRuleContext<CaseBlockContext>(i);
		}
		public DefaultBlockContext defaultBlock() {
			return GetRuleContext<DefaultBlockContext>(0);
		}
		public SwitchBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterSwitchBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitSwitchBlock(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBlockContext switchBlock() {
		SwitchBlockContext _localctx = new SwitchBlockContext(Context, State);
		EnterRule(_localctx, 90, RULE_switchBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 504; Match(T_LEFT_CURLY);
			State = 508;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T_CASE) {
				{
				{
				State = 505; caseBlock();
				}
				}
				State = 510;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 512;
			_la = TokenStream.La(1);
			if (_la==T_DEFAULT) {
				{
				State = 511; defaultBlock();
				}
			}

			State = 514; Match(T_RIGHT_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseBlockContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public CaseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterCaseBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitCaseBlock(this);
		}
	}

	[RuleVersion(0)]
	public CaseBlockContext caseBlock() {
		CaseBlockContext _localctx = new CaseBlockContext(Context, State);
		EnterRule(_localctx, 92, RULE_caseBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 516; Match(T_CASE);
			State = 517; expression(0);
			State = 518; Match(T_DOUBLE_COLON);
			State = 522;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << StringLiteral) | (1L << T_THIS) | (1L << T_BASE) | (1L << T_VAR) | (1L << T_LET) | (1L << T_NEW) | (1L << T_IF) | (1L << T_WHILE) | (1L << T_FOR) | (1L << T_BREAK) | (1L << T_CONTINUE) | (1L << T_SWITCH) | (1L << T_RETURN) | (1L << T_LEFT_PAREN) | (1L << T_LEFT_BRACKET) | (1L << T_LEFT_CURLY) | (1L << INT) | (1L << HEX) | (1L << BINARY) | (1L << FLOAT) | (1L << T_FALSE) | (1L << T_TRUE) | (1L << T_NULL) | (1L << T_SEMICOLON) | (1L << T_NOT))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (T_MINUS - 65)) | (1L << (T_INCREMENT - 65)) | (1L << (T_DECREMENT - 65)) | (1L << (IDENT - 65)))) != 0)) {
				{
				{
				State = 519; statement();
				}
				}
				State = 524;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultBlockContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public DefaultBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterDefaultBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitDefaultBlock(this);
		}
	}

	[RuleVersion(0)]
	public DefaultBlockContext defaultBlock() {
		DefaultBlockContext _localctx = new DefaultBlockContext(Context, State);
		EnterRule(_localctx, 94, RULE_defaultBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 525; Match(T_DEFAULT);
			State = 526; Match(T_DOUBLE_COLON);
			State = 528;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 527; statement();
				}
				}
				State = 530;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << StringLiteral) | (1L << T_THIS) | (1L << T_BASE) | (1L << T_VAR) | (1L << T_LET) | (1L << T_NEW) | (1L << T_IF) | (1L << T_WHILE) | (1L << T_FOR) | (1L << T_BREAK) | (1L << T_CONTINUE) | (1L << T_SWITCH) | (1L << T_RETURN) | (1L << T_LEFT_PAREN) | (1L << T_LEFT_BRACKET) | (1L << T_LEFT_CURLY) | (1L << INT) | (1L << HEX) | (1L << BINARY) | (1L << FLOAT) | (1L << T_FALSE) | (1L << T_TRUE) | (1L << T_NULL) | (1L << T_SEMICOLON) | (1L << T_NOT))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (T_MINUS - 65)) | (1L << (T_INCREMENT - 65)) | (1L << (T_DECREMENT - 65)) | (1L << (IDENT - 65)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 96, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 532; Match(T_WHILE);
			State = 533; Match(T_LEFT_PAREN);
			State = 534; expression(0);
			State = 535; Match(T_RIGHT_PAREN);
			State = 536; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ForInitContext forInit() {
			return GetRuleContext<ForInitContext>(0);
		}
		public ForConditionContext forCondition() {
			return GetRuleContext<ForConditionContext>(0);
		}
		public ForIncrementContext forIncrement() {
			return GetRuleContext<ForIncrementContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 98, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 538; Match(T_FOR);
			State = 539; Match(T_LEFT_PAREN);
			State = 541;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << StringLiteral) | (1L << T_THIS) | (1L << T_BASE) | (1L << T_VAR) | (1L << T_LET) | (1L << T_NEW) | (1L << T_LEFT_PAREN) | (1L << T_LEFT_BRACKET) | (1L << T_LEFT_CURLY) | (1L << INT) | (1L << HEX) | (1L << BINARY) | (1L << FLOAT) | (1L << T_FALSE) | (1L << T_TRUE) | (1L << T_NULL) | (1L << T_NOT))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (T_MINUS - 65)) | (1L << (T_INCREMENT - 65)) | (1L << (T_DECREMENT - 65)) | (1L << (IDENT - 65)))) != 0)) {
				{
				State = 540; forInit();
				}
			}

			State = 543; Match(T_SEMICOLON);
			State = 545;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << StringLiteral) | (1L << T_THIS) | (1L << T_BASE) | (1L << T_NEW) | (1L << T_LEFT_PAREN) | (1L << T_LEFT_BRACKET) | (1L << T_LEFT_CURLY) | (1L << INT) | (1L << HEX) | (1L << BINARY) | (1L << FLOAT) | (1L << T_FALSE) | (1L << T_TRUE) | (1L << T_NULL) | (1L << T_NOT))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (T_MINUS - 65)) | (1L << (T_INCREMENT - 65)) | (1L << (T_DECREMENT - 65)) | (1L << (IDENT - 65)))) != 0)) {
				{
				State = 544; forCondition();
				}
			}

			State = 547; Match(T_SEMICOLON);
			State = 549;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << StringLiteral) | (1L << T_THIS) | (1L << T_BASE) | (1L << T_NEW) | (1L << T_LEFT_PAREN) | (1L << T_LEFT_BRACKET) | (1L << T_LEFT_CURLY) | (1L << INT) | (1L << HEX) | (1L << BINARY) | (1L << FLOAT) | (1L << T_FALSE) | (1L << T_TRUE) | (1L << T_NULL) | (1L << T_NOT))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (T_MINUS - 65)) | (1L << (T_INCREMENT - 65)) | (1L << (T_DECREMENT - 65)) | (1L << (IDENT - 65)))) != 0)) {
				{
				State = 548; forIncrement();
				}
			}

			State = 551; Match(T_RIGHT_PAREN);
			State = 552; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitContext : ParserRuleContext {
		public ValueHolderDeclContext valueHolderDecl() {
			return GetRuleContext<ValueHolderDeclContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ForInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterForInit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitForInit(this);
		}
	}

	[RuleVersion(0)]
	public ForInitContext forInit() {
		ForInitContext _localctx = new ForInitContext(Context, State);
		EnterRule(_localctx, 100, RULE_forInit);
		try {
			State = 557;
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 554; valueHolderDecl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 555; expression(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 556; assignmentExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForConditionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forCondition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterForCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitForCondition(this);
		}
	}

	[RuleVersion(0)]
	public ForConditionContext forCondition() {
		ForConditionContext _localctx = new ForConditionContext(Context, State);
		EnterRule(_localctx, 102, RULE_forCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 559; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForIncrementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForIncrementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forIncrement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterForIncrement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitForIncrement(this);
		}
	}

	[RuleVersion(0)]
	public ForIncrementContext forIncrement() {
		ForIncrementContext _localctx = new ForIncrementContext(Context, State);
		EnterRule(_localctx, 104, RULE_forIncrement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 561; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ExpressionContext value;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 106, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 563; Match(T_RETURN);
			State = 565;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << StringLiteral) | (1L << T_THIS) | (1L << T_BASE) | (1L << T_NEW) | (1L << T_LEFT_PAREN) | (1L << T_LEFT_BRACKET) | (1L << T_LEFT_CURLY) | (1L << INT) | (1L << HEX) | (1L << BINARY) | (1L << FLOAT) | (1L << T_FALSE) | (1L << T_TRUE) | (1L << T_NULL) | (1L << T_NOT))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (T_MINUS - 65)) | (1L << (T_INCREMENT - 65)) | (1L << (T_DECREMENT - 65)) | (1L << (IDENT - 65)))) != 0)) {
				{
				State = 564; _localctx.value = expression(0);
				}
			}

			State = 567; Match(T_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 108, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 569; Match(T_BREAK);
			State = 570; Match(T_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 110, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 572; Match(T_CONTINUE);
			State = 573; Match(T_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueDeclareStatementContext : ParserRuleContext {
		public ValueHolderDeclContext valueHolderDecl() {
			return GetRuleContext<ValueHolderDeclContext>(0);
		}
		public ValueDeclareStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueDeclareStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterValueDeclareStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitValueDeclareStatement(this);
		}
	}

	[RuleVersion(0)]
	public ValueDeclareStatementContext valueDeclareStatement() {
		ValueDeclareStatementContext _localctx = new ValueDeclareStatementContext(Context, State);
		EnterRule(_localctx, 112, RULE_valueDeclareStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 575; valueHolderDecl();
			State = 576; Match(T_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueHolderDeclContext : ParserRuleContext {
		public IToken var;
		public IToken let;
		public ValueHolderNameContext valueHolderName() {
			return GetRuleContext<ValueHolderNameContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ValueHolderDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueHolderDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterValueHolderDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitValueHolderDecl(this);
		}
	}

	[RuleVersion(0)]
	public ValueHolderDeclContext valueHolderDecl() {
		ValueHolderDeclContext _localctx = new ValueHolderDeclContext(Context, State);
		EnterRule(_localctx, 114, RULE_valueHolderDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 580;
			switch (TokenStream.La(1)) {
			case T_VAR:
				{
				State = 578; _localctx.var = Match(T_VAR);
				}
				break;
			case T_LET:
				{
				State = 579; _localctx.let = Match(T_LET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 582; valueHolderName();
			State = 585;
			_la = TokenStream.La(1);
			if (_la==T_DOUBLE_COLON) {
				{
				State = 583; Match(T_DOUBLE_COLON);
				State = 584; type(0);
				}
			}

			State = 589;
			_la = TokenStream.La(1);
			if (_la==T_EQUALS) {
				{
				State = 587; Match(T_EQUALS);
				State = 588; expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueHolderNameContext : ParserRuleContext {
		public MemberNameContext memberName() {
			return GetRuleContext<MemberNameContext>(0);
		}
		public ValueHolderNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueHolderName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterValueHolderName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitValueHolderName(this);
		}
	}

	[RuleVersion(0)]
	public ValueHolderNameContext valueHolderName() {
		ValueHolderNameContext _localctx = new ValueHolderNameContext(Context, State);
		EnterRule(_localctx, 116, RULE_valueHolderName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 591; memberName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public IToken optional;
		public ObjectTypeContext objectType() {
			return GetRuleContext<ObjectTypeContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public CallableTypeContext callableType() {
			return GetRuleContext<CallableTypeContext>(0);
		}
		public ListTypeContext listType() {
			return GetRuleContext<ListTypeContext>(0);
		}
		public DictionaryTypeContext dictionaryType() {
			return GetRuleContext<DictionaryTypeContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode T_NULL_CONDITIONAL() { return GetToken(ZScriptParser.T_NULL_CONDITIONAL, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		return type(0);
	}

	private TypeContext type(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeContext _localctx = new TypeContext(Context, _parentState);
		TypeContext _prevctx = _localctx;
		int _startState = 118;
		EnterRecursionRule(_localctx, 118, RULE_type, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 599;
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				{
				State = 594; objectType();
				}
				break;
			case 2:
				{
				State = 595; typeName();
				}
				break;
			case 3:
				{
				State = 596; callableType();
				}
				break;
			case 4:
				{
				State = 597; listType();
				}
				break;
			case 5:
				{
				State = 598; dictionaryType();
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 605;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TypeContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_type);
					State = 601;
					if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
					State = 602; _localctx.optional = Match(T_NULL_CONDITIONAL);
					}
					} 
				}
				State = 607;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ObjectTypeContext : ParserRuleContext {
		public ObjectTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterObjectType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitObjectType(this);
		}
	}

	[RuleVersion(0)]
	public ObjectTypeContext objectType() {
		ObjectTypeContext _localctx = new ObjectTypeContext(Context, State);
		EnterRule(_localctx, 120, RULE_objectType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 608; Match(T_OBJECT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public ComplexTypeNameContext complexTypeName() {
			return GetRuleContext<ComplexTypeNameContext>(0);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 122, RULE_typeName);
		try {
			State = 612;
			switch (TokenStream.La(1)) {
			case T_INT:
			case T_FLOAT:
			case T_VOID:
			case T_ANY:
			case T_STRING:
			case T_BOOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 610; primitiveType();
				}
				break;
			case IDENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 611; complexTypeName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexTypeNameContext : ParserRuleContext {
		public ITerminalNode[] IDENT() { return GetTokens(ZScriptParser.IDENT); }
		public ITerminalNode IDENT(int i) {
			return GetToken(ZScriptParser.IDENT, i);
		}
		public GenericParametersContext genericParameters() {
			return GetRuleContext<GenericParametersContext>(0);
		}
		public ComplexTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterComplexTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitComplexTypeName(this);
		}
	}

	[RuleVersion(0)]
	public ComplexTypeNameContext complexTypeName() {
		ComplexTypeNameContext _localctx = new ComplexTypeNameContext(Context, State);
		EnterRule(_localctx, 124, RULE_complexTypeName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 614; Match(IDENT);
			State = 619;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 615; Match(T_PERIOD);
					State = 616; Match(IDENT);
					}
					} 
				}
				State = 621;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			}
			State = 623;
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				{
				State = 622; genericParameters();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public ITerminalNode T_INT() { return GetToken(ZScriptParser.T_INT, 0); }
		public ITerminalNode T_FLOAT() { return GetToken(ZScriptParser.T_FLOAT, 0); }
		public ITerminalNode T_VOID() { return GetToken(ZScriptParser.T_VOID, 0); }
		public ITerminalNode T_ANY() { return GetToken(ZScriptParser.T_ANY, 0); }
		public ITerminalNode T_STRING() { return GetToken(ZScriptParser.T_STRING, 0); }
		public ITerminalNode T_BOOL() { return GetToken(ZScriptParser.T_BOOL, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 126, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 625;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T_INT) | (1L << T_FLOAT) | (1L << T_VOID) | (1L << T_ANY) | (1L << T_STRING) | (1L << T_BOOL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallableTypeContext : ParserRuleContext {
		public CallableTypeListContext callableTypeList() {
			return GetRuleContext<CallableTypeListContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public CallableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callableType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterCallableType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitCallableType(this);
		}
	}

	[RuleVersion(0)]
	public CallableTypeContext callableType() {
		CallableTypeContext _localctx = new CallableTypeContext(Context, State);
		EnterRule(_localctx, 128, RULE_callableType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 627; Match(T_LEFT_PAREN);
			State = 629;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T_OBJECT) | (1L << T_LEFT_PAREN) | (1L << T_LEFT_BRACKET) | (1L << T_INT) | (1L << T_FLOAT) | (1L << T_VOID) | (1L << T_ANY) | (1L << T_STRING) | (1L << T_BOOL))) != 0) || _la==IDENT) {
				{
				State = 628; callableTypeList();
				}
			}

			State = 631; Match(T_CLOSURE_RETURN);
			State = 633;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T_OBJECT) | (1L << T_LEFT_PAREN) | (1L << T_LEFT_BRACKET) | (1L << T_INT) | (1L << T_FLOAT) | (1L << T_VOID) | (1L << T_ANY) | (1L << T_STRING) | (1L << T_BOOL))) != 0) || _la==IDENT) {
				{
				State = 632; type(0);
				}
			}

			State = 635; Match(T_RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListTypeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ListTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterListType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitListType(this);
		}
	}

	[RuleVersion(0)]
	public ListTypeContext listType() {
		ListTypeContext _localctx = new ListTypeContext(Context, State);
		EnterRule(_localctx, 130, RULE_listType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 637; Match(T_LEFT_BRACKET);
			State = 638; type(0);
			State = 639; Match(T_RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictionaryTypeContext : ParserRuleContext {
		public TypeContext keyType;
		public TypeContext valueType;
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public DictionaryTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionaryType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterDictionaryType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitDictionaryType(this);
		}
	}

	[RuleVersion(0)]
	public DictionaryTypeContext dictionaryType() {
		DictionaryTypeContext _localctx = new DictionaryTypeContext(Context, State);
		EnterRule(_localctx, 132, RULE_dictionaryType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 641; Match(T_LEFT_BRACKET);
			State = 642; _localctx.keyType = type(0);
			State = 643; Match(T_DOUBLE_COLON);
			State = 644; _localctx.valueType = type(0);
			State = 645; Match(T_RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallableTypeListContext : ParserRuleContext {
		public CallableArgTypeContext[] callableArgType() {
			return GetRuleContexts<CallableArgTypeContext>();
		}
		public CallableArgTypeContext callableArgType(int i) {
			return GetRuleContext<CallableArgTypeContext>(i);
		}
		public CallableTypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callableTypeList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterCallableTypeList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitCallableTypeList(this);
		}
	}

	[RuleVersion(0)]
	public CallableTypeListContext callableTypeList() {
		CallableTypeListContext _localctx = new CallableTypeListContext(Context, State);
		EnterRule(_localctx, 134, RULE_callableTypeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 647; callableArgType();
			State = 652;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T_COMMA) {
				{
				{
				State = 648; Match(T_COMMA);
				State = 649; callableArgType();
				}
				}
				State = 654;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallableArgTypeContext : ParserRuleContext {
		public IToken variadic;
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public CallableArgTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callableArgType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterCallableArgType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitCallableArgType(this);
		}
	}

	[RuleVersion(0)]
	public CallableArgTypeContext callableArgType() {
		CallableArgTypeContext _localctx = new CallableArgTypeContext(Context, State);
		EnterRule(_localctx, 136, RULE_callableArgType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 655; type(0);
			State = 657;
			_la = TokenStream.La(1);
			if (_la==T_TRIPPLE_DOT) {
				{
				State = 656; _localctx.variadic = Match(T_TRIPPLE_DOT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public IToken unwrap;
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public UnaryOperatorContext unaryOperator() {
			return GetRuleContext<UnaryOperatorContext>(0);
		}
		public ValueAccessContext valueAccess() {
			return GetRuleContext<ValueAccessContext>(0);
		}
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ITerminalNode T_THIS() { return GetToken(ZScriptParser.T_THIS, 0); }
		public ObjectAccessContext objectAccess() {
			return GetRuleContext<ObjectAccessContext>(0);
		}
		public ITerminalNode T_BASE() { return GetToken(ZScriptParser.T_BASE, 0); }
		public PrefixOperatorContext prefixOperator() {
			return GetRuleContext<PrefixOperatorContext>(0);
		}
		public LeftValueContext leftValue() {
			return GetRuleContext<LeftValueContext>(0);
		}
		public PostfixOperatorContext postfixOperator() {
			return GetRuleContext<PostfixOperatorContext>(0);
		}
		public ClosureExpressionContext closureExpression() {
			return GetRuleContext<ClosureExpressionContext>(0);
		}
		public MemberNameContext memberName() {
			return GetRuleContext<MemberNameContext>(0);
		}
		public ObjectLiteralContext objectLiteral() {
			return GetRuleContext<ObjectLiteralContext>(0);
		}
		public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		public DictionaryLiteralContext dictionaryLiteral() {
			return GetRuleContext<DictionaryLiteralContext>(0);
		}
		public ArrayLiteralInitContext arrayLiteralInit() {
			return GetRuleContext<ArrayLiteralInitContext>(0);
		}
		public DictionaryLiteralInitContext dictionaryLiteralInit() {
			return GetRuleContext<DictionaryLiteralInitContext>(0);
		}
		public NewExpressionContext newExpression() {
			return GetRuleContext<NewExpressionContext>(0);
		}
		public ConstantAtomContext constantAtom() {
			return GetRuleContext<ConstantAtomContext>(0);
		}
		public ITerminalNode T_NULL_COALESCE() { return GetToken(ZScriptParser.T_NULL_COALESCE, 0); }
		public MultOpContext multOp() {
			return GetRuleContext<MultOpContext>(0);
		}
		public AdditionOpContext additionOp() {
			return GetRuleContext<AdditionOpContext>(0);
		}
		public RelationalOpContext relationalOp() {
			return GetRuleContext<RelationalOpContext>(0);
		}
		public BitwiseShiftContext bitwiseShift() {
			return GetRuleContext<BitwiseShiftContext>(0);
		}
		public BitwiseAndOpContext bitwiseAndOp() {
			return GetRuleContext<BitwiseAndOpContext>(0);
		}
		public BitwiseXOrOpContext bitwiseXOrOp() {
			return GetRuleContext<BitwiseXOrOpContext>(0);
		}
		public BitwiseOrOpContext bitwiseOrOp() {
			return GetRuleContext<BitwiseOrOpContext>(0);
		}
		public EqualityOpContext equalityOp() {
			return GetRuleContext<EqualityOpContext>(0);
		}
		public LogicalAndContext logicalAnd() {
			return GetRuleContext<LogicalAndContext>(0);
		}
		public LogicalOrContext logicalOr() {
			return GetRuleContext<LogicalOrContext>(0);
		}
		public ITerminalNode T_IS() { return GetToken(ZScriptParser.T_IS, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 138;
		EnterRecursionRule(_localctx, 138, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 728;
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				{
				State = 660; Match(T_LEFT_PAREN);
				State = 661; type(0);
				State = 662; Match(T_RIGHT_PAREN);
				State = 663; expression(16);
				}
				break;
			case 2:
				{
				State = 665; unaryOperator();
				State = 666; expression(15);
				}
				break;
			case 3:
				{
				State = 668; Match(T_LEFT_PAREN);
				State = 669; expression(0);
				State = 670; Match(T_RIGHT_PAREN);
				State = 672;
				switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
				case 1:
					{
					State = 671; valueAccess();
					}
					break;
				}
				}
				break;
			case 4:
				{
				State = 674; Match(T_LEFT_PAREN);
				State = 675; assignmentExpression();
				State = 676; Match(T_RIGHT_PAREN);
				}
				break;
			case 5:
				{
				State = 678; Match(T_THIS);
				State = 680;
				switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
				case 1:
					{
					State = 679; objectAccess();
					}
					break;
				}
				}
				break;
			case 6:
				{
				State = 682; Match(T_BASE);
				State = 684;
				switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
				case 1:
					{
					State = 683; valueAccess();
					}
					break;
				}
				}
				break;
			case 7:
				{
				State = 686; prefixOperator();
				State = 687; leftValue();
				}
				break;
			case 8:
				{
				State = 689; leftValue();
				State = 690; postfixOperator();
				}
				break;
			case 9:
				{
				State = 692; closureExpression();
				State = 694;
				switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
				case 1:
					{
					State = 693; valueAccess();
					}
					break;
				}
				}
				break;
			case 10:
				{
				State = 696; memberName();
				State = 698;
				switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
				case 1:
					{
					State = 697; valueAccess();
					}
					break;
				}
				}
				break;
			case 11:
				{
				State = 700; objectLiteral();
				State = 702;
				switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
				case 1:
					{
					State = 701; objectAccess();
					}
					break;
				}
				}
				break;
			case 12:
				{
				State = 704; arrayLiteral();
				State = 706;
				switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
				case 1:
					{
					State = 705; objectAccess();
					}
					break;
				}
				}
				break;
			case 13:
				{
				State = 708; dictionaryLiteral();
				State = 710;
				switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
				case 1:
					{
					State = 709; objectAccess();
					}
					break;
				}
				}
				break;
			case 14:
				{
				State = 712; arrayLiteralInit();
				State = 714;
				switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
				case 1:
					{
					State = 713; objectAccess();
					}
					break;
				}
				}
				break;
			case 15:
				{
				State = 716; dictionaryLiteralInit();
				State = 718;
				switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
				case 1:
					{
					State = 717; objectAccess();
					}
					break;
				}
				}
				break;
			case 16:
				{
				State = 720; newExpression();
				State = 722;
				switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
				case 1:
					{
					State = 721; valueAccess();
					}
					break;
				}
				}
				break;
			case 17:
				{
				State = 724; constantAtom();
				State = 726;
				switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
				case 1:
					{
					State = 725; objectAccess();
					}
					break;
				}
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 789;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 787;
					switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 730;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 731; Match(T_NULL_COALESCE);
						State = 732; expression(14);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 733;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 734; multOp();
						State = 735; expression(14);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 737;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 738; additionOp();
						State = 739; expression(13);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 741;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 742; relationalOp();
						State = 743; expression(12);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 745;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 746; bitwiseShift();
						State = 747; expression(10);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 749;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 750; bitwiseAndOp();
						State = 751; expression(9);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 753;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 754; bitwiseXOrOp();
						State = 755; expression(8);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 757;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 758; bitwiseOrOp();
						State = 759; expression(7);
						}
						break;
					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 761;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 762; equalityOp();
						State = 763; expression(6);
						}
						break;
					case 10:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 765;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 766; logicalAnd();
						State = 767; expression(5);
						}
						break;
					case 11:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 769;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 770; logicalOr();
						State = 771; expression(4);
						}
						break;
					case 12:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 773;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 774; Match(T_NULL_CONDITIONAL);
						State = 775; expression(0);
						State = 776; Match(T_DOUBLE_COLON);
						State = 777; expression(2);
						}
						break;
					case 13:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 779;
						if (!(Precpred(Context, 29))) throw new FailedPredicateException(this, "Precpred(Context, 29)");
						State = 780; _localctx.unwrap = Match(T_NOT);
						State = 782;
						switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
						case 1:
							{
							State = 781; valueAccess();
							}
							break;
						}
						}
						break;
					case 14:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 784;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 785; Match(T_IS);
						State = 786; type(0);
						}
						break;
					}
					} 
				}
				State = 791;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultOpContext : ParserRuleContext {
		public MultOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterMultOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitMultOp(this);
		}
	}

	[RuleVersion(0)]
	public MultOpContext multOp() {
		MultOpContext _localctx = new MultOpContext(Context, State);
		EnterRule(_localctx, 140, RULE_multOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 792;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T_MULT) | (1L << T_DIV) | (1L << T_MOD))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditionOpContext : ParserRuleContext {
		public AdditionOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additionOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterAdditionOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitAdditionOp(this);
		}
	}

	[RuleVersion(0)]
	public AdditionOpContext additionOp() {
		AdditionOpContext _localctx = new AdditionOpContext(Context, State);
		EnterRule(_localctx, 142, RULE_additionOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 794;
			_la = TokenStream.La(1);
			if ( !(_la==T_PLUS || _la==T_MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitwiseShiftContext : ParserRuleContext {
		public ITerminalNode T_SHIFTLEFT() { return GetToken(ZScriptParser.T_SHIFTLEFT, 0); }
		public ITerminalNode T_SHIFTRIGHT() { return GetToken(ZScriptParser.T_SHIFTRIGHT, 0); }
		public BitwiseShiftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwiseShift; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterBitwiseShift(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitBitwiseShift(this);
		}
	}

	[RuleVersion(0)]
	public BitwiseShiftContext bitwiseShift() {
		BitwiseShiftContext _localctx = new BitwiseShiftContext(Context, State);
		EnterRule(_localctx, 144, RULE_bitwiseShift);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 796;
			_la = TokenStream.La(1);
			if ( !(_la==T_SHIFTLEFT || _la==T_SHIFTRIGHT) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitwiseAndOpContext : ParserRuleContext {
		public BitwiseAndOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwiseAndOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterBitwiseAndOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitBitwiseAndOp(this);
		}
	}

	[RuleVersion(0)]
	public BitwiseAndOpContext bitwiseAndOp() {
		BitwiseAndOpContext _localctx = new BitwiseAndOpContext(Context, State);
		EnterRule(_localctx, 146, RULE_bitwiseAndOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 798;
			_la = TokenStream.La(1);
			if ( !(_la==T_BITWISE_AND || _la==T_BITWISE_XOR) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitwiseXOrOpContext : ParserRuleContext {
		public BitwiseXOrOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwiseXOrOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterBitwiseXOrOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitBitwiseXOrOp(this);
		}
	}

	[RuleVersion(0)]
	public BitwiseXOrOpContext bitwiseXOrOp() {
		BitwiseXOrOpContext _localctx = new BitwiseXOrOpContext(Context, State);
		EnterRule(_localctx, 148, RULE_bitwiseXOrOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 800; Match(T_BITWISE_XOR);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitwiseOrOpContext : ParserRuleContext {
		public BitwiseOrOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwiseOrOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterBitwiseOrOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitBitwiseOrOp(this);
		}
	}

	[RuleVersion(0)]
	public BitwiseOrOpContext bitwiseOrOp() {
		BitwiseOrOpContext _localctx = new BitwiseOrOpContext(Context, State);
		EnterRule(_localctx, 150, RULE_bitwiseOrOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 802; Match(T_BITWISE_OR);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalOpContext : ParserRuleContext {
		public RelationalOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterRelationalOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitRelationalOp(this);
		}
	}

	[RuleVersion(0)]
	public RelationalOpContext relationalOp() {
		RelationalOpContext _localctx = new RelationalOpContext(Context, State);
		EnterRule(_localctx, 152, RULE_relationalOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 804;
			_la = TokenStream.La(1);
			if ( !(((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (T_MORE_THAN_OR_EQUALS - 75)) | (1L << (T_LESS_THAN_OR_EQUALS - 75)) | (1L << (T_MORE_THAN - 75)) | (1L << (T_LESS_THAN - 75)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityOpContext : ParserRuleContext {
		public EqualityOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterEqualityOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitEqualityOp(this);
		}
	}

	[RuleVersion(0)]
	public EqualityOpContext equalityOp() {
		EqualityOpContext _localctx = new EqualityOpContext(Context, State);
		EnterRule(_localctx, 154, RULE_equalityOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 806;
			_la = TokenStream.La(1);
			if ( !(_la==T_EQUALITY || _la==T_UNEQUALITY) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalAndContext : ParserRuleContext {
		public LogicalAndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalAnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterLogicalAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitLogicalAnd(this);
		}
	}

	[RuleVersion(0)]
	public LogicalAndContext logicalAnd() {
		LogicalAndContext _localctx = new LogicalAndContext(Context, State);
		EnterRule(_localctx, 156, RULE_logicalAnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 808; Match(T_LOGICAL_AND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOrContext : ParserRuleContext {
		public LogicalOrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterLogicalOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitLogicalOr(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOrContext logicalOr() {
		LogicalOrContext _localctx = new LogicalOrContext(Context, State);
		EnterRule(_localctx, 158, RULE_logicalOr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 810; Match(T_LOGICAL_OR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		public LeftValueContext leftValue() {
			return GetRuleContext<LeftValueContext>(0);
		}
		public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 160, RULE_assignmentExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 812; leftValue();
			State = 813; assignmentOperator();
			State = 816;
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				{
				State = 814; expression(0);
				}
				break;
			case 2:
				{
				State = 815; assignmentExpression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewExpressionContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public FuncCallArgumentsContext funcCallArguments() {
			return GetRuleContext<FuncCallArgumentsContext>(0);
		}
		public NewExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterNewExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitNewExpression(this);
		}
	}

	[RuleVersion(0)]
	public NewExpressionContext newExpression() {
		NewExpressionContext _localctx = new NewExpressionContext(Context, State);
		EnterRule(_localctx, 162, RULE_newExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 818; Match(T_NEW);
			State = 819; typeName();
			State = 820; funcCallArguments();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClosureExpressionContext : ParserRuleContext {
		public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public FunctionArgContext functionArg() {
			return GetRuleContext<FunctionArgContext>(0);
		}
		public FunctionArgumentsContext functionArguments() {
			return GetRuleContext<FunctionArgumentsContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public ClosureExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closureExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterClosureExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitClosureExpression(this);
		}
	}

	[RuleVersion(0)]
	public ClosureExpressionContext closureExpression() {
		ClosureExpressionContext _localctx = new ClosureExpressionContext(Context, State);
		EnterRule(_localctx, 164, RULE_closureExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 824;
			switch (TokenStream.La(1)) {
			case IDENT:
				{
				State = 822; functionArg();
				}
				break;
			case T_LEFT_PAREN:
				{
				State = 823; functionArguments();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 827;
			_la = TokenStream.La(1);
			if (_la==T_DOUBLE_COLON) {
				{
				State = 826; returnType();
				}
			}

			State = 829; Match(T_CLOSURE_CALL);
			State = 830; functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefixOperatorContext : ParserRuleContext {
		public PrefixOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterPrefixOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitPrefixOperator(this);
		}
	}

	[RuleVersion(0)]
	public PrefixOperatorContext prefixOperator() {
		PrefixOperatorContext _localctx = new PrefixOperatorContext(Context, State);
		EnterRule(_localctx, 166, RULE_prefixOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 832;
			_la = TokenStream.La(1);
			if ( !(_la==T_INCREMENT || _la==T_DECREMENT) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixOperatorContext : ParserRuleContext {
		public PostfixOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterPostfixOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitPostfixOperator(this);
		}
	}

	[RuleVersion(0)]
	public PostfixOperatorContext postfixOperator() {
		PostfixOperatorContext _localctx = new PostfixOperatorContext(Context, State);
		EnterRule(_localctx, 168, RULE_postfixOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 834;
			_la = TokenStream.La(1);
			if ( !(_la==T_INCREMENT || _la==T_DECREMENT) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOperatorContext : ParserRuleContext {
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterUnaryOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitUnaryOperator(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOperatorContext unaryOperator() {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(Context, State);
		EnterRule(_localctx, 170, RULE_unaryOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 836;
			_la = TokenStream.La(1);
			if ( !(_la==T_NOT || _la==T_MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterAssignmentOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitAssignmentOperator(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 172, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 838;
			_la = TokenStream.La(1);
			if ( !(((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (T_EQUALS - 81)) | (1L << (T_PLUS_EQUALS - 81)) | (1L << (T_MINUS_EQUALS - 81)) | (1L << (T_TIMES_EQUALS - 81)) | (1L << (T_DIV_EQUALS - 81)) | (1L << (T_MOD_EQUALS - 81)) | (1L << (T_XOR_EQUALS - 81)) | (1L << (T_AND_EQUALS - 81)) | (1L << (T_TILDE_EQUALS - 81)) | (1L << (T_OR_EQUALS - 81)) | (1L << (T_SHIFTLEFT_EQUALS - 81)) | (1L << (T_SHIFTRIGHT_EQUALS - 81)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncCallArgumentsContext : ParserRuleContext {
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public FuncCallArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcCallArguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFuncCallArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFuncCallArguments(this);
		}
	}

	[RuleVersion(0)]
	public FuncCallArgumentsContext funcCallArguments() {
		FuncCallArgumentsContext _localctx = new FuncCallArgumentsContext(Context, State);
		EnterRule(_localctx, 174, RULE_funcCallArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 840; Match(T_LEFT_PAREN);
			State = 842;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << StringLiteral) | (1L << T_THIS) | (1L << T_BASE) | (1L << T_NEW) | (1L << T_LEFT_PAREN) | (1L << T_LEFT_BRACKET) | (1L << T_LEFT_CURLY) | (1L << INT) | (1L << HEX) | (1L << BINARY) | (1L << FLOAT) | (1L << T_FALSE) | (1L << T_TRUE) | (1L << T_NULL) | (1L << T_NOT))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (T_MINUS - 65)) | (1L << (T_INCREMENT - 65)) | (1L << (T_DECREMENT - 65)) | (1L << (IDENT - 65)))) != 0)) {
				{
				State = 841; expressionList();
				}
			}

			State = 844; Match(T_RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 176, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 846; expression(0);
			State = 851;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T_COMMA) {
				{
				{
				State = 847; Match(T_COMMA);
				State = 848; expression(0);
				}
				}
				State = 853;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeftValueContext : ParserRuleContext {
		public MemberNameContext memberName() {
			return GetRuleContext<MemberNameContext>(0);
		}
		public LeftValueAccessContext leftValueAccess() {
			return GetRuleContext<LeftValueAccessContext>(0);
		}
		public LeftValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leftValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterLeftValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitLeftValue(this);
		}
	}

	[RuleVersion(0)]
	public LeftValueContext leftValue() {
		LeftValueContext _localctx = new LeftValueContext(Context, State);
		EnterRule(_localctx, 178, RULE_leftValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 856;
			switch (TokenStream.La(1)) {
			case IDENT:
				{
				State = 854; memberName();
				}
				break;
			case T_THIS:
				{
				State = 855; Match(T_THIS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 859;
			switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
			case 1:
				{
				State = 858; leftValueAccess();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeftValueAccessContext : ParserRuleContext {
		public IToken unwrap;
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public LeftValueAccessContext leftValueAccess() {
			return GetRuleContext<LeftValueAccessContext>(0);
		}
		public FieldAccessContext fieldAccess() {
			return GetRuleContext<FieldAccessContext>(0);
		}
		public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		public LeftValueAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leftValueAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterLeftValueAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitLeftValueAccess(this);
		}
	}

	[RuleVersion(0)]
	public LeftValueAccessContext leftValueAccess() {
		LeftValueAccessContext _localctx = new LeftValueAccessContext(Context, State);
		EnterRule(_localctx, 180, RULE_leftValueAccess);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 862;
			_la = TokenStream.La(1);
			if (_la==T_NOT) {
				{
				State = 861; _localctx.unwrap = Match(T_NOT);
				}
			}

			State = 875;
			switch (TokenStream.La(1)) {
			case T_LEFT_PAREN:
				{
				{
				State = 864; functionCall();
				State = 865; leftValueAccess();
				}
				}
				break;
			case T_PERIOD:
				{
				{
				State = 867; fieldAccess();
				State = 869;
				switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
				case 1:
					{
					State = 868; leftValueAccess();
					}
					break;
				}
				}
				}
				break;
			case T_LEFT_BRACKET:
				{
				{
				State = 871; arrayAccess();
				State = 873;
				switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
				case 1:
					{
					State = 872; leftValueAccess();
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public FuncCallArgumentsContext funcCallArguments() {
			return GetRuleContext<FuncCallArgumentsContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 182, RULE_functionCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 877; funcCallArguments();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldAccessContext : ParserRuleContext {
		public MemberNameContext memberName() {
			return GetRuleContext<MemberNameContext>(0);
		}
		public FieldAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFieldAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFieldAccess(this);
		}
	}

	[RuleVersion(0)]
	public FieldAccessContext fieldAccess() {
		FieldAccessContext _localctx = new FieldAccessContext(Context, State);
		EnterRule(_localctx, 184, RULE_fieldAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 879; Match(T_PERIOD);
			State = 880; memberName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAccessContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrayAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterArrayAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitArrayAccess(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccessContext arrayAccess() {
		ArrayAccessContext _localctx = new ArrayAccessContext(Context, State);
		EnterRule(_localctx, 186, RULE_arrayAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 882; Match(T_LEFT_BRACKET);
			State = 883; expression(0);
			State = 884; Match(T_RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectAccessContext : ParserRuleContext {
		public FieldAccessContext fieldAccess() {
			return GetRuleContext<FieldAccessContext>(0);
		}
		public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		public ValueAccessContext valueAccess() {
			return GetRuleContext<ValueAccessContext>(0);
		}
		public ObjectAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterObjectAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitObjectAccess(this);
		}
	}

	[RuleVersion(0)]
	public ObjectAccessContext objectAccess() {
		ObjectAccessContext _localctx = new ObjectAccessContext(Context, State);
		EnterRule(_localctx, 188, RULE_objectAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 888;
			switch (TokenStream.La(1)) {
			case T_PERIOD:
				{
				State = 886; fieldAccess();
				}
				break;
			case T_LEFT_BRACKET:
				{
				State = 887; arrayAccess();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 891;
			switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
			case 1:
				{
				State = 890; valueAccess();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueAccessContext : ParserRuleContext {
		public IToken nullable;
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FieldAccessContext fieldAccess() {
			return GetRuleContext<FieldAccessContext>(0);
		}
		public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		public ValueAccessContext valueAccess() {
			return GetRuleContext<ValueAccessContext>(0);
		}
		public ITerminalNode[] T_NULL_CONDITIONAL() { return GetTokens(ZScriptParser.T_NULL_CONDITIONAL); }
		public ITerminalNode T_NULL_CONDITIONAL(int i) {
			return GetToken(ZScriptParser.T_NULL_CONDITIONAL, i);
		}
		public ValueAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterValueAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitValueAccess(this);
		}
	}

	[RuleVersion(0)]
	public ValueAccessContext valueAccess() {
		ValueAccessContext _localctx = new ValueAccessContext(Context, State);
		EnterRule(_localctx, 190, RULE_valueAccess);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 896;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T_NULL_CONDITIONAL) {
				{
				{
				State = 893; _localctx.nullable = Match(T_NULL_CONDITIONAL);
				}
				}
				State = 898;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 902;
			switch (TokenStream.La(1)) {
			case T_LEFT_PAREN:
				{
				State = 899; functionCall();
				}
				break;
			case T_PERIOD:
				{
				State = 900; fieldAccess();
				}
				break;
			case T_LEFT_BRACKET:
				{
				State = 901; arrayAccess();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 905;
			switch ( Interpreter.AdaptivePredict(TokenStream,89,Context) ) {
			case 1:
				{
				State = 904; valueAccess();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberNameContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(ZScriptParser.IDENT, 0); }
		public MemberNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterMemberName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitMemberName(this);
		}
	}

	[RuleVersion(0)]
	public MemberNameContext memberName() {
		MemberNameContext _localctx = new MemberNameContext(Context, State);
		EnterRule(_localctx, 192, RULE_memberName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 907; Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayLiteralContext : ParserRuleContext {
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ArrayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterArrayLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitArrayLiteral(this);
		}
	}

	[RuleVersion(0)]
	public ArrayLiteralContext arrayLiteral() {
		ArrayLiteralContext _localctx = new ArrayLiteralContext(Context, State);
		EnterRule(_localctx, 194, RULE_arrayLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 909; Match(T_LEFT_BRACKET);
			State = 911;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << StringLiteral) | (1L << T_THIS) | (1L << T_BASE) | (1L << T_NEW) | (1L << T_LEFT_PAREN) | (1L << T_LEFT_BRACKET) | (1L << T_LEFT_CURLY) | (1L << INT) | (1L << HEX) | (1L << BINARY) | (1L << FLOAT) | (1L << T_FALSE) | (1L << T_TRUE) | (1L << T_NULL) | (1L << T_NOT))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (T_MINUS - 65)) | (1L << (T_INCREMENT - 65)) | (1L << (T_DECREMENT - 65)) | (1L << (IDENT - 65)))) != 0)) {
				{
				State = 910; expressionList();
				}
			}

			State = 913; Match(T_RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictionaryLiteralContext : ParserRuleContext {
		public DictionaryEntryListContext dictionaryEntryList() {
			return GetRuleContext<DictionaryEntryListContext>(0);
		}
		public DictionaryLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionaryLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterDictionaryLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitDictionaryLiteral(this);
		}
	}

	[RuleVersion(0)]
	public DictionaryLiteralContext dictionaryLiteral() {
		DictionaryLiteralContext _localctx = new DictionaryLiteralContext(Context, State);
		EnterRule(_localctx, 196, RULE_dictionaryLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 915; Match(T_LEFT_BRACKET);
			State = 916; dictionaryEntryList();
			State = 917; Match(T_RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectLiteralContext : ParserRuleContext {
		public ObjectEntryListContext objectEntryList() {
			return GetRuleContext<ObjectEntryListContext>(0);
		}
		public ObjectLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterObjectLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitObjectLiteral(this);
		}
	}

	[RuleVersion(0)]
	public ObjectLiteralContext objectLiteral() {
		ObjectLiteralContext _localctx = new ObjectLiteralContext(Context, State);
		EnterRule(_localctx, 198, RULE_objectLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 919; Match(T_LEFT_CURLY);
			State = 921;
			_la = TokenStream.La(1);
			if (_la==StringLiteral || _la==IDENT) {
				{
				State = 920; objectEntryList();
				}
			}

			State = 923; Match(T_RIGHT_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		public ITerminalNode StringLiteral() { return GetToken(ZScriptParser.StringLiteral, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 200, RULE_stringLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 925; Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictionaryEntryListContext : ParserRuleContext {
		public DictionaryEntryContext[] dictionaryEntry() {
			return GetRuleContexts<DictionaryEntryContext>();
		}
		public DictionaryEntryContext dictionaryEntry(int i) {
			return GetRuleContext<DictionaryEntryContext>(i);
		}
		public DictionaryEntryListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionaryEntryList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterDictionaryEntryList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitDictionaryEntryList(this);
		}
	}

	[RuleVersion(0)]
	public DictionaryEntryListContext dictionaryEntryList() {
		DictionaryEntryListContext _localctx = new DictionaryEntryListContext(Context, State);
		EnterRule(_localctx, 202, RULE_dictionaryEntryList);
		int _la;
		try {
			State = 936;
			switch (TokenStream.La(1)) {
			case T_DOUBLE_COLON:
				EnterOuterAlt(_localctx, 1);
				{
				State = 927; Match(T_DOUBLE_COLON);
				}
				break;
			case StringLiteral:
			case T_THIS:
			case T_BASE:
			case T_NEW:
			case T_LEFT_PAREN:
			case T_LEFT_BRACKET:
			case T_LEFT_CURLY:
			case INT:
			case HEX:
			case BINARY:
			case FLOAT:
			case T_FALSE:
			case T_TRUE:
			case T_NULL:
			case T_NOT:
			case T_MINUS:
			case T_INCREMENT:
			case T_DECREMENT:
			case IDENT:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 928; dictionaryEntry();
				State = 933;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==T_COMMA) {
					{
					{
					State = 929; Match(T_COMMA);
					State = 930; dictionaryEntry();
					}
					}
					State = 935;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictionaryEntryContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DictionaryEntryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionaryEntry; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterDictionaryEntry(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitDictionaryEntry(this);
		}
	}

	[RuleVersion(0)]
	public DictionaryEntryContext dictionaryEntry() {
		DictionaryEntryContext _localctx = new DictionaryEntryContext(Context, State);
		EnterRule(_localctx, 204, RULE_dictionaryEntry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 938; expression(0);
			State = 939; Match(T_DOUBLE_COLON);
			State = 940; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayLiteralInitContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ArrayLiteralInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLiteralInit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterArrayLiteralInit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitArrayLiteralInit(this);
		}
	}

	[RuleVersion(0)]
	public ArrayLiteralInitContext arrayLiteralInit() {
		ArrayLiteralInitContext _localctx = new ArrayLiteralInitContext(Context, State);
		EnterRule(_localctx, 206, RULE_arrayLiteralInit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 942; Match(T_LEFT_BRACKET);
			State = 943; type(0);
			State = 944; Match(T_RIGHT_BRACKET);
			State = 945; functionCall();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictionaryLiteralInitContext : ParserRuleContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public DictionaryLiteralInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionaryLiteralInit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterDictionaryLiteralInit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitDictionaryLiteralInit(this);
		}
	}

	[RuleVersion(0)]
	public DictionaryLiteralInitContext dictionaryLiteralInit() {
		DictionaryLiteralInitContext _localctx = new DictionaryLiteralInitContext(Context, State);
		EnterRule(_localctx, 208, RULE_dictionaryLiteralInit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 947; Match(T_LEFT_BRACKET);
			State = 948; type(0);
			State = 949; Match(T_DOUBLE_COLON);
			State = 950; type(0);
			State = 951; Match(T_RIGHT_BRACKET);
			State = 952; functionCall();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectEntryListContext : ParserRuleContext {
		public ObjectEntryDefinitionContext[] objectEntryDefinition() {
			return GetRuleContexts<ObjectEntryDefinitionContext>();
		}
		public ObjectEntryDefinitionContext objectEntryDefinition(int i) {
			return GetRuleContext<ObjectEntryDefinitionContext>(i);
		}
		public ObjectEntryListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectEntryList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterObjectEntryList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitObjectEntryList(this);
		}
	}

	[RuleVersion(0)]
	public ObjectEntryListContext objectEntryList() {
		ObjectEntryListContext _localctx = new ObjectEntryListContext(Context, State);
		EnterRule(_localctx, 210, RULE_objectEntryList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 954; objectEntryDefinition();
			State = 959;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T_COMMA) {
				{
				{
				State = 955; Match(T_COMMA);
				State = 956; objectEntryDefinition();
				}
				}
				State = 961;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectEntryDefinitionContext : ParserRuleContext {
		public EntryNameContext entryName() {
			return GetRuleContext<EntryNameContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ObjectEntryDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectEntryDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterObjectEntryDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitObjectEntryDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ObjectEntryDefinitionContext objectEntryDefinition() {
		ObjectEntryDefinitionContext _localctx = new ObjectEntryDefinitionContext(Context, State);
		EnterRule(_localctx, 212, RULE_objectEntryDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 962; entryName();
			State = 963; Match(T_DOUBLE_COLON);
			State = 964; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntryNameContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(ZScriptParser.IDENT, 0); }
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public EntryNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entryName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterEntryName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitEntryName(this);
		}
	}

	[RuleVersion(0)]
	public EntryNameContext entryName() {
		EntryNameContext _localctx = new EntryNameContext(Context, State);
		EnterRule(_localctx, 214, RULE_entryName);
		try {
			State = 968;
			switch (TokenStream.La(1)) {
			case IDENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 966; Match(IDENT);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 967; stringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompileConstantContext : ParserRuleContext {
		public NumericAtomContext numericAtom() {
			return GetRuleContext<NumericAtomContext>(0);
		}
		public ITerminalNode T_FALSE() { return GetToken(ZScriptParser.T_FALSE, 0); }
		public ITerminalNode T_TRUE() { return GetToken(ZScriptParser.T_TRUE, 0); }
		public ITerminalNode T_NULL() { return GetToken(ZScriptParser.T_NULL, 0); }
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public CompileConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileConstant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterCompileConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitCompileConstant(this);
		}
	}

	[RuleVersion(0)]
	public CompileConstantContext compileConstant() {
		CompileConstantContext _localctx = new CompileConstantContext(Context, State);
		EnterRule(_localctx, 216, RULE_compileConstant);
		int _la;
		try {
			State = 978;
			switch (TokenStream.La(1)) {
			case INT:
			case HEX:
			case BINARY:
			case FLOAT:
			case T_MINUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 971;
				_la = TokenStream.La(1);
				if (_la==T_MINUS) {
					{
					State = 970; Match(T_MINUS);
					}
				}

				State = 973; numericAtom();
				}
				break;
			case T_FALSE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 974; Match(T_FALSE);
				}
				break;
			case T_TRUE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 975; Match(T_TRUE);
				}
				break;
			case T_NULL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 976; Match(T_NULL);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 5);
				{
				State = 977; stringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantAtomContext : ParserRuleContext {
		public NumericAtomContext numericAtom() {
			return GetRuleContext<NumericAtomContext>(0);
		}
		public ITerminalNode T_FALSE() { return GetToken(ZScriptParser.T_FALSE, 0); }
		public ITerminalNode T_TRUE() { return GetToken(ZScriptParser.T_TRUE, 0); }
		public ITerminalNode T_NULL() { return GetToken(ZScriptParser.T_NULL, 0); }
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public ConstantAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantAtom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterConstantAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitConstantAtom(this);
		}
	}

	[RuleVersion(0)]
	public ConstantAtomContext constantAtom() {
		ConstantAtomContext _localctx = new ConstantAtomContext(Context, State);
		EnterRule(_localctx, 218, RULE_constantAtom);
		try {
			State = 985;
			switch (TokenStream.La(1)) {
			case INT:
			case HEX:
			case BINARY:
			case FLOAT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 980; numericAtom();
				}
				break;
			case T_FALSE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 981; Match(T_FALSE);
				}
				break;
			case T_TRUE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 982; Match(T_TRUE);
				}
				break;
			case T_NULL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 983; Match(T_NULL);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 5);
				{
				State = 984; stringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericAtomContext : ParserRuleContext {
		public HexadecimalNumberContext hexadecimalNumber() {
			return GetRuleContext<HexadecimalNumberContext>(0);
		}
		public BinaryNumberContext binaryNumber() {
			return GetRuleContext<BinaryNumberContext>(0);
		}
		public ITerminalNode FLOAT() { return GetToken(ZScriptParser.FLOAT, 0); }
		public ITerminalNode INT() { return GetToken(ZScriptParser.INT, 0); }
		public NumericAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericAtom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterNumericAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitNumericAtom(this);
		}
	}

	[RuleVersion(0)]
	public NumericAtomContext numericAtom() {
		NumericAtomContext _localctx = new NumericAtomContext(Context, State);
		EnterRule(_localctx, 220, RULE_numericAtom);
		int _la;
		try {
			State = 990;
			switch (TokenStream.La(1)) {
			case HEX:
				EnterOuterAlt(_localctx, 1);
				{
				State = 987; hexadecimalNumber();
				}
				break;
			case BINARY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 988; binaryNumber();
				}
				break;
			case INT:
			case FLOAT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 989;
				_la = TokenStream.La(1);
				if ( !(_la==INT || _la==FLOAT) ) {
				ErrorHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HexadecimalNumberContext : ParserRuleContext {
		public ITerminalNode HEX() { return GetToken(ZScriptParser.HEX, 0); }
		public HexadecimalNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hexadecimalNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterHexadecimalNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitHexadecimalNumber(this);
		}
	}

	[RuleVersion(0)]
	public HexadecimalNumberContext hexadecimalNumber() {
		HexadecimalNumberContext _localctx = new HexadecimalNumberContext(Context, State);
		EnterRule(_localctx, 222, RULE_hexadecimalNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 992; Match(HEX);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryNumberContext : ParserRuleContext {
		public ITerminalNode BINARY() { return GetToken(ZScriptParser.BINARY, 0); }
		public BinaryNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterBinaryNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitBinaryNumber(this);
		}
	}

	[RuleVersion(0)]
	public BinaryNumberContext binaryNumber() {
		BinaryNumberContext _localctx = new BinaryNumberContext(Context, State);
		EnterRule(_localctx, 224, RULE_binaryNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 994; Match(BINARY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 59: return type_sempred((TypeContext)_localctx, predIndex);
		case 69: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool type_sempred(TypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 14);
		case 2: return Precpred(Context, 13);
		case 3: return Precpred(Context, 12);
		case 4: return Precpred(Context, 11);
		case 5: return Precpred(Context, 9);
		case 6: return Precpred(Context, 8);
		case 7: return Precpred(Context, 7);
		case 8: return Precpred(Context, 6);
		case 9: return Precpred(Context, 5);
		case 10: return Precpred(Context, 4);
		case 11: return Precpred(Context, 3);
		case 12: return Precpred(Context, 2);
		case 13: return Precpred(Context, 29);
		case 14: return Precpred(Context, 10);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x64\x3E7\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\a\x3\xED\n"+
		"\x3\f\x3\xE\x3\xF0\v\x3\x3\x4\x3\x4\x3\x4\x5\x4\xF5\n\x4\x3\x4\x5\x4\xF8"+
		"\n\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\a\a\a\x104"+
		"\n\a\f\a\xE\a\x107\v\a\x3\a\x3\a\x3\b\x3\b\x3\t\x5\t\x10E\n\t\x3\t\x3"+
		"\t\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\a\r\x11E"+
		"\n\r\f\r\xE\r\x121\v\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x5\xE\x128\n\xE\x3"+
		"\xE\x5\xE\x12B\n\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x133\n\xF"+
		"\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\a\x11\x13A\n\x11\f\x11\xE\x11\x13D"+
		"\v\x11\x3\x12\x5\x12\x140\n\x12\x3\x12\x3\x12\x3\x12\x5\x12\x145\n\x12"+
		"\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x5\x14\x14C\n\x14\x3\x14\x5\x14\x14F"+
		"\n\x14\x3\x14\x5\x14\x152\n\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x5"+
		"\x15\x159\n\x15\x3\x15\x5\x15\x15C\n\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3"+
		"\x18\x3\x18\x5\x18\x164\n\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\a\x19"+
		"\x16B\n\x19\f\x19\xE\x19\x16E\v\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B"+
		"\x3\x1B\x5\x1B\x176\n\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x17B\n\x1B\x3\x1C"+
		"\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x182\n\x1D\x3\x1D\x3\x1D\x3\x1E\x3"+
		"\x1E\x3\x1E\a\x1E\x189\n\x1E\f\x1E\xE\x1E\x18C\v\x1E\x3\x1F\x3\x1F\x3"+
		"\x1F\x3\x1F\a\x1F\x192\n\x1F\f\x1F\xE\x1F\x195\v\x1F\x3 \x3 \x3 \x3 \x3"+
		"!\x3!\x3\"\x3\"\x3\"\x3\"\x3#\x3#\x3#\a#\x1A4\n#\f#\xE#\x1A7\v#\x3$\x3"+
		"$\x3$\x5$\x1AC\n$\x3$\x3$\x3$\x3$\x5$\x1B2\n$\x3%\x3%\x3%\x3%\x3%\a%\x1B9"+
		"\n%\f%\xE%\x1BC\v%\x3%\x3%\x3&\x3&\x3\'\x3\'\x3\'\x3\'\x3\'\x3(\x3(\x3"+
		")\x3)\x3)\x3*\x3*\x5*\x1CE\n*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3*"+
		"\x3*\x3*\x5*\x1DC\n*\x3+\x3+\a+\x1E0\n+\f+\xE+\x1E3\v+\x3+\x3+\x3,\x3"+
		",\x3,\x3,\x3,\x3,\x5,\x1ED\n,\x3-\x3-\x3-\x3.\x3.\x3.\x3.\x5.\x1F6\n."+
		"\x3.\x3.\x3.\x3/\x3/\a/\x1FD\n/\f/\xE/\x200\v/\x3/\x5/\x203\n/\x3/\x3"+
		"/\x3\x30\x3\x30\x3\x30\x3\x30\a\x30\x20B\n\x30\f\x30\xE\x30\x20E\v\x30"+
		"\x3\x31\x3\x31\x3\x31\x6\x31\x213\n\x31\r\x31\xE\x31\x214\x3\x32\x3\x32"+
		"\x3\x32\x3\x32\x3\x32\x3\x32\x3\x33\x3\x33\x3\x33\x5\x33\x220\n\x33\x3"+
		"\x33\x3\x33\x5\x33\x224\n\x33\x3\x33\x3\x33\x5\x33\x228\n\x33\x3\x33\x3"+
		"\x33\x3\x33\x3\x34\x3\x34\x3\x34\x5\x34\x230\n\x34\x3\x35\x3\x35\x3\x36"+
		"\x3\x36\x3\x37\x3\x37\x5\x37\x238\n\x37\x3\x37\x3\x37\x3\x38\x3\x38\x3"+
		"\x38\x3\x39\x3\x39\x3\x39\x3:\x3:\x3:\x3;\x3;\x5;\x247\n;\x3;\x3;\x3;"+
		"\x5;\x24C\n;\x3;\x3;\x5;\x250\n;\x3<\x3<\x3=\x3=\x3=\x3=\x3=\x3=\x5=\x25A"+
		"\n=\x3=\x3=\a=\x25E\n=\f=\xE=\x261\v=\x3>\x3>\x3?\x3?\x5?\x267\n?\x3@"+
		"\x3@\x3@\a@\x26C\n@\f@\xE@\x26F\v@\x3@\x5@\x272\n@\x3\x41\x3\x41\x3\x42"+
		"\x3\x42\x5\x42\x278\n\x42\x3\x42\x3\x42\x5\x42\x27C\n\x42\x3\x42\x3\x42"+
		"\x3\x43\x3\x43\x3\x43\x3\x43\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44"+
		"\x3\x45\x3\x45\x3\x45\a\x45\x28D\n\x45\f\x45\xE\x45\x290\v\x45\x3\x46"+
		"\x3\x46\x5\x46\x294\n\x46\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G"+
		"\x3G\x3G\x5G\x2A3\nG\x3G\x3G\x3G\x3G\x3G\x3G\x5G\x2AB\nG\x3G\x3G\x5G\x2AF"+
		"\nG\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x5G\x2B9\nG\x3G\x3G\x5G\x2BD\nG\x3"+
		"G\x3G\x5G\x2C1\nG\x3G\x3G\x5G\x2C5\nG\x3G\x3G\x5G\x2C9\nG\x3G\x3G\x5G"+
		"\x2CD\nG\x3G\x3G\x5G\x2D1\nG\x3G\x3G\x5G\x2D5\nG\x3G\x3G\x5G\x2D9\nG\x5"+
		"G\x2DB\nG\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G"+
		"\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3"+
		"G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3G"+
		"\x3G\x3G\x5G\x311\nG\x3G\x3G\x3G\aG\x316\nG\fG\xEG\x319\vG\x3H\x3H\x3"+
		"I\x3I\x3J\x3J\x3K\x3K\x3L\x3L\x3M\x3M\x3N\x3N\x3O\x3O\x3P\x3P\x3Q\x3Q"+
		"\x3R\x3R\x3R\x3R\x5R\x333\nR\x3S\x3S\x3S\x3S\x3T\x3T\x5T\x33B\nT\x3T\x5"+
		"T\x33E\nT\x3T\x3T\x3T\x3U\x3U\x3V\x3V\x3W\x3W\x3X\x3X\x3Y\x3Y\x5Y\x34D"+
		"\nY\x3Y\x3Y\x3Z\x3Z\x3Z\aZ\x354\nZ\fZ\xEZ\x357\vZ\x3[\x3[\x5[\x35B\n["+
		"\x3[\x5[\x35E\n[\x3\\\x5\\\x361\n\\\x3\\\x3\\\x3\\\x3\\\x3\\\x5\\\x368"+
		"\n\\\x3\\\x3\\\x5\\\x36C\n\\\x5\\\x36E\n\\\x3]\x3]\x3^\x3^\x3^\x3_\x3"+
		"_\x3_\x3_\x3`\x3`\x5`\x37B\n`\x3`\x5`\x37E\n`\x3\x61\a\x61\x381\n\x61"+
		"\f\x61\xE\x61\x384\v\x61\x3\x61\x3\x61\x3\x61\x5\x61\x389\n\x61\x3\x61"+
		"\x5\x61\x38C\n\x61\x3\x62\x3\x62\x3\x63\x3\x63\x5\x63\x392\n\x63\x3\x63"+
		"\x3\x63\x3\x64\x3\x64\x3\x64\x3\x64\x3\x65\x3\x65\x5\x65\x39C\n\x65\x3"+
		"\x65\x3\x65\x3\x66\x3\x66\x3g\x3g\x3g\x3g\ag\x3A6\ng\fg\xEg\x3A9\vg\x5"+
		"g\x3AB\ng\x3h\x3h\x3h\x3h\x3i\x3i\x3i\x3i\x3i\x3j\x3j\x3j\x3j\x3j\x3j"+
		"\x3j\x3k\x3k\x3k\ak\x3C0\nk\fk\xEk\x3C3\vk\x3l\x3l\x3l\x3l\x3m\x3m\x5"+
		"m\x3CB\nm\x3n\x5n\x3CE\nn\x3n\x3n\x3n\x3n\x3n\x5n\x3D5\nn\x3o\x3o\x3o"+
		"\x3o\x3o\x5o\x3DC\no\x3p\x3p\x3p\x5p\x3E1\np\x3q\x3q\x3r\x3r\x3r\x2\x4"+
		"x\x8Cs\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&(*,.\x30"+
		"\x32\x34\x36\x38:<>@\x42\x44\x46HJLNPRTVXZ\\^`\x62\x64\x66hjlnprtvxz|"+
		"~\x80\x82\x84\x86\x88\x8A\x8C\x8E\x90\x92\x94\x96\x98\x9A\x9C\x9E\xA0"+
		"\xA2\xA4\xA6\xA8\xAA\xAC\xAE\xB0\xB2\xB4\xB6\xB8\xBA\xBC\xBE\xC0\xC2\xC4"+
		"\xC6\xC8\xCA\xCC\xCE\xD0\xD2\xD4\xD6\xD8\xDA\xDC\xDE\xE0\xE2\x2\r\x3\x2"+
		"*/\x3\x2>@\x3\x2\x42\x43\x3\x2IJ\x3\x2\x46G\x3\x2MP\x3\x2KL\x3\x2\x44"+
		"\x45\x4\x2\x41\x41\x43\x43\x3\x2S^\x4\x2\x30\x30\x33\x33\x410\x2\xE4\x3"+
		"\x2\x2\x2\x4\xEE\x3\x2\x2\x2\x6\xF1\x3\x2\x2\x2\b\xFB\x3\x2\x2\x2\n\xFE"+
		"\x3\x2\x2\x2\f\x100\x3\x2\x2\x2\xE\x10A\x3\x2\x2\x2\x10\x10D\x3\x2\x2"+
		"\x2\x12\x111\x3\x2\x2\x2\x14\x113\x3\x2\x2\x2\x16\x117\x3\x2\x2\x2\x18"+
		"\x119\x3\x2\x2\x2\x1A\x127\x3\x2\x2\x2\x1C\x132\x3\x2\x2\x2\x1E\x134\x3"+
		"\x2\x2\x2 \x136\x3\x2\x2\x2\"\x13F\x3\x2\x2\x2$\x146\x3\x2\x2\x2&\x148"+
		"\x3\x2\x2\x2(\x155\x3\x2\x2\x2*\x15D\x3\x2\x2\x2,\x15F\x3\x2\x2\x2.\x161"+
		"\x3\x2\x2\x2\x30\x167\x3\x2\x2\x2\x32\x16F\x3\x2\x2\x2\x34\x172\x3\x2"+
		"\x2\x2\x36\x17C\x3\x2\x2\x2\x38\x17E\x3\x2\x2\x2:\x185\x3\x2\x2\x2<\x18D"+
		"\x3\x2\x2\x2>\x196\x3\x2\x2\x2@\x19A\x3\x2\x2\x2\x42\x19C\x3\x2\x2\x2"+
		"\x44\x1A0\x3\x2\x2\x2\x46\x1A8\x3\x2\x2\x2H\x1B3\x3\x2\x2\x2J\x1BF\x3"+
		"\x2\x2\x2L\x1C1\x3\x2\x2\x2N\x1C6\x3\x2\x2\x2P\x1C8\x3\x2\x2\x2R\x1DB"+
		"\x3\x2\x2\x2T\x1DD\x3\x2\x2\x2V\x1E6\x3\x2\x2\x2X\x1EE\x3\x2\x2\x2Z\x1F1"+
		"\x3\x2\x2\x2\\\x1FA\x3\x2\x2\x2^\x206\x3\x2\x2\x2`\x20F\x3\x2\x2\x2\x62"+
		"\x216\x3\x2\x2\x2\x64\x21C\x3\x2\x2\x2\x66\x22F\x3\x2\x2\x2h\x231\x3\x2"+
		"\x2\x2j\x233\x3\x2\x2\x2l\x235\x3\x2\x2\x2n\x23B\x3\x2\x2\x2p\x23E\x3"+
		"\x2\x2\x2r\x241\x3\x2\x2\x2t\x246\x3\x2\x2\x2v\x251\x3\x2\x2\x2x\x259"+
		"\x3\x2\x2\x2z\x262\x3\x2\x2\x2|\x266\x3\x2\x2\x2~\x268\x3\x2\x2\x2\x80"+
		"\x273\x3\x2\x2\x2\x82\x275\x3\x2\x2\x2\x84\x27F\x3\x2\x2\x2\x86\x283\x3"+
		"\x2\x2\x2\x88\x289\x3\x2\x2\x2\x8A\x291\x3\x2\x2\x2\x8C\x2DA\x3\x2\x2"+
		"\x2\x8E\x31A\x3\x2\x2\x2\x90\x31C\x3\x2\x2\x2\x92\x31E\x3\x2\x2\x2\x94"+
		"\x320\x3\x2\x2\x2\x96\x322\x3\x2\x2\x2\x98\x324\x3\x2\x2\x2\x9A\x326\x3"+
		"\x2\x2\x2\x9C\x328\x3\x2\x2\x2\x9E\x32A\x3\x2\x2\x2\xA0\x32C\x3\x2\x2"+
		"\x2\xA2\x32E\x3\x2\x2\x2\xA4\x334\x3\x2\x2\x2\xA6\x33A\x3\x2\x2\x2\xA8"+
		"\x342\x3\x2\x2\x2\xAA\x344\x3\x2\x2\x2\xAC\x346\x3\x2\x2\x2\xAE\x348\x3"+
		"\x2\x2\x2\xB0\x34A\x3\x2\x2\x2\xB2\x350\x3\x2\x2\x2\xB4\x35A\x3\x2\x2"+
		"\x2\xB6\x360\x3\x2\x2\x2\xB8\x36F\x3\x2\x2\x2\xBA\x371\x3\x2\x2\x2\xBC"+
		"\x374\x3\x2\x2\x2\xBE\x37A\x3\x2\x2\x2\xC0\x382\x3\x2\x2\x2\xC2\x38D\x3"+
		"\x2\x2\x2\xC4\x38F\x3\x2\x2\x2\xC6\x395\x3\x2\x2\x2\xC8\x399\x3\x2\x2"+
		"\x2\xCA\x39F\x3\x2\x2\x2\xCC\x3AA\x3\x2\x2\x2\xCE\x3AC\x3\x2\x2\x2\xD0"+
		"\x3B0\x3\x2\x2\x2\xD2\x3B5\x3\x2\x2\x2\xD4\x3BC\x3\x2\x2\x2\xD6\x3C4\x3"+
		"\x2\x2\x2\xD8\x3CA\x3\x2\x2\x2\xDA\x3D4\x3\x2\x2\x2\xDC\x3DB\x3\x2\x2"+
		"\x2\xDE\x3E0\x3\x2\x2\x2\xE0\x3E2\x3\x2\x2\x2\xE2\x3E4\x3\x2\x2\x2\xE4"+
		"\xE5\x5\x4\x3\x2\xE5\x3\x3\x2\x2\x2\xE6\xED\x5&\x14\x2\xE7\xED\x5\x12"+
		"\n\x2\xE8\xED\x5(\x15\x2\xE9\xED\x5\x6\x4\x2\xEA\xED\x5\x14\v\x2\xEB\xED"+
		"\x5\x46$\x2\xEC\xE6\x3\x2\x2\x2\xEC\xE7\x3\x2\x2\x2\xEC\xE8\x3\x2\x2\x2"+
		"\xEC\xE9\x3\x2\x2\x2\xEC\xEA\x3\x2\x2\x2\xEC\xEB\x3\x2\x2\x2\xED\xF0\x3"+
		"\x2\x2\x2\xEE\xEC\x3\x2\x2\x2\xEE\xEF\x3\x2\x2\x2\xEF\x5\x3\x2\x2\x2\xF0"+
		"\xEE\x3\x2\x2\x2\xF1\xF2\a\x3\x2\x2\xF2\xF4\x5\n\x6\x2\xF3\xF5\x5\x38"+
		"\x1D\x2\xF4\xF3\x3\x2\x2\x2\xF4\xF5\x3\x2\x2\x2\xF5\xF7\x3\x2\x2\x2\xF6"+
		"\xF8\x5\b\x5\x2\xF7\xF6\x3\x2\x2\x2\xF7\xF8\x3\x2\x2\x2\xF8\xF9\x3\x2"+
		"\x2\x2\xF9\xFA\x5\f\a\x2\xFA\a\x3\x2\x2\x2\xFB\xFC\a:\x2\x2\xFC\xFD\x5"+
		"\n\x6\x2\xFD\t\x3\x2\x2\x2\xFE\xFF\a_\x2\x2\xFF\v\x3\x2\x2\x2\x100\x105"+
		"\a$\x2\x2\x101\x104\x5\xE\b\x2\x102\x104\x5\x10\t\x2\x103\x101\x3\x2\x2"+
		"\x2\x103\x102\x3\x2\x2\x2\x104\x107\x3\x2\x2\x2\x105\x103\x3\x2\x2\x2"+
		"\x105\x106\x3\x2\x2\x2\x106\x108\x3\x2\x2\x2\x107\x105\x3\x2\x2\x2\x108"+
		"\x109\a%\x2\x2\x109\r\x3\x2\x2\x2\x10A\x10B\x5r:\x2\x10B\xF\x3\x2\x2\x2"+
		"\x10C\x10E\a\f\x2\x2\x10D\x10C\x3\x2\x2\x2\x10D\x10E\x3\x2\x2\x2\x10E"+
		"\x10F\x3\x2\x2\x2\x10F\x110\x5&\x14\x2\x110\x11\x3\x2\x2\x2\x111\x112"+
		"\x5r:\x2\x112\x13\x3\x2\x2\x2\x113\x114\a\xE\x2\x2\x114\x115\x5\x16\f"+
		"\x2\x115\x116\x5\x18\r\x2\x116\x15\x3\x2\x2\x2\x117\x118\a_\x2\x2\x118"+
		"\x17\x3\x2\x2\x2\x119\x11F\a\"\x2\x2\x11A\x11E\x5\xE\b\x2\x11B\x11E\x5"+
		"\x1A\xE\x2\x11C\x11E\x5\x1C\xF\x2\x11D\x11A\x3\x2\x2\x2\x11D\x11B\x3\x2"+
		"\x2\x2\x11D\x11C\x3\x2\x2\x2\x11E\x121\x3\x2\x2\x2\x11F\x11D\x3\x2\x2"+
		"\x2\x11F\x120\x3\x2\x2\x2\x120\x122\x3\x2\x2\x2\x121\x11F\x3\x2\x2\x2"+
		"\x122\x123\a#\x2\x2\x123\x19\x3\x2\x2\x2\x124\x125\x5\x1E\x10\x2\x125"+
		"\x126\a:\x2\x2\x126\x128\x3\x2\x2\x2\x127\x124\x3\x2\x2\x2\x127\x128\x3"+
		"\x2\x2\x2\x128\x12A\x3\x2\x2\x2\x129\x12B\x5 \x11\x2\x12A\x129\x3\x2\x2"+
		"\x2\x12A\x12B\x3\x2\x2\x2\x12B\x12C\x3\x2\x2\x2\x12C\x12D\x5,\x17\x2\x12D"+
		"\x1B\x3\x2\x2\x2\x12E\x12F\aS\x2\x2\x12F\x133\x5$\x13\x2\x130\x131\a\x43"+
		"\x2\x2\x131\x133\x5$\x13\x2\x132\x12E\x3\x2\x2\x2\x132\x130\x3\x2\x2\x2"+
		"\x133\x1D\x3\x2\x2\x2\x134\x135\a_\x2\x2\x135\x1F\x3\x2\x2\x2\x136\x13B"+
		"\x5\"\x12\x2\x137\x138\a=\x2\x2\x138\x13A\x5\"\x12\x2\x139\x137\x3\x2"+
		"\x2\x2\x13A\x13D\x3\x2\x2\x2\x13B\x139\x3\x2\x2\x2\x13B\x13C\x3\x2\x2"+
		"\x2\x13C!\x3\x2\x2\x2\x13D\x13B\x3\x2\x2\x2\x13E\x140\a\x42\x2\x2\x13F"+
		"\x13E\x3\x2\x2\x2\x13F\x140\x3\x2\x2\x2\x140\x141\x3\x2\x2\x2\x141\x144"+
		"\x5$\x13\x2\x142\x143\a\x43\x2\x2\x143\x145\x5$\x13\x2\x144\x142\x3\x2"+
		"\x2\x2\x144\x145\x3\x2\x2\x2\x145#\x3\x2\x2\x2\x146\x147\a\x30\x2\x2\x147"+
		"%\x3\x2\x2\x2\x148\x149\a\v\x2\x2\x149\x14B\x5*\x16\x2\x14A\x14C\x5\x38"+
		"\x1D\x2\x14B\x14A\x3\x2\x2\x2\x14B\x14C\x3\x2\x2\x2\x14C\x14E\x3\x2\x2"+
		"\x2\x14D\x14F\x5.\x18\x2\x14E\x14D\x3\x2\x2\x2\x14E\x14F\x3\x2\x2\x2\x14F"+
		"\x151\x3\x2\x2\x2\x150\x152\x5\x32\x1A\x2\x151\x150\x3\x2\x2\x2\x151\x152"+
		"\x3\x2\x2\x2\x152\x153\x3\x2\x2\x2\x153\x154\x5,\x17\x2\x154\'\x3\x2\x2"+
		"\x2\x155\x156\a\n\x2\x2\x156\x158\x5*\x16\x2\x157\x159\x5.\x18\x2\x158"+
		"\x157\x3\x2\x2\x2\x158\x159\x3\x2\x2\x2\x159\x15B\x3\x2\x2\x2\x15A\x15C"+
		"\x5\x32\x1A\x2\x15B\x15A\x3\x2\x2\x2\x15B\x15C\x3\x2\x2\x2\x15C)\x3\x2"+
		"\x2\x2\x15D\x15E\a_\x2\x2\x15E+\x3\x2\x2\x2\x15F\x160\x5T+\x2\x160-\x3"+
		"\x2\x2\x2\x161\x163\a \x2\x2\x162\x164\x5\x30\x19\x2\x163\x162\x3\x2\x2"+
		"\x2\x163\x164\x3\x2\x2\x2\x164\x165\x3\x2\x2\x2\x165\x166\a!\x2\x2\x166"+
		"/\x3\x2\x2\x2\x167\x16C\x5\x34\x1B\x2\x168\x169\a=\x2\x2\x169\x16B\x5"+
		"\x34\x1B\x2\x16A\x168\x3\x2\x2\x2\x16B\x16E\x3\x2\x2\x2\x16C\x16A\x3\x2"+
		"\x2\x2\x16C\x16D\x3\x2\x2\x2\x16D\x31\x3\x2\x2\x2\x16E\x16C\x3\x2\x2\x2"+
		"\x16F\x170\a:\x2\x2\x170\x171\x5x=\x2\x171\x33\x3\x2\x2\x2\x172\x175\x5"+
		"\x36\x1C\x2\x173\x174\a:\x2\x2\x174\x176\x5x=\x2\x175\x173\x3\x2\x2\x2"+
		"\x175\x176\x3\x2\x2\x2\x176\x17A\x3\x2\x2\x2\x177\x17B\a\x39\x2\x2\x178"+
		"\x179\aS\x2\x2\x179\x17B\x5\xDAn\x2\x17A\x177\x3\x2\x2\x2\x17A\x178\x3"+
		"\x2\x2\x2\x17A\x17B\x3\x2\x2\x2\x17B\x35\x3\x2\x2\x2\x17C\x17D\a_\x2\x2"+
		"\x17D\x37\x3\x2\x2\x2\x17E\x17F\aP\x2\x2\x17F\x181\x5:\x1E\x2\x180\x182"+
		"\x5<\x1F\x2\x181\x180\x3\x2\x2\x2\x181\x182\x3\x2\x2\x2\x182\x183\x3\x2"+
		"\x2\x2\x183\x184\aO\x2\x2\x184\x39\x3\x2\x2\x2\x185\x18A\x5@!\x2\x186"+
		"\x187\a=\x2\x2\x187\x189\x5@!\x2\x188\x186\x3\x2\x2\x2\x189\x18C\x3\x2"+
		"\x2\x2\x18A\x188\x3\x2\x2\x2\x18A\x18B\x3\x2\x2\x2\x18B;\x3\x2\x2\x2\x18C"+
		"\x18A\x3\x2\x2\x2\x18D\x18E\a\x4\x2\x2\x18E\x193\x5> \x2\x18F\x190\a="+
		"\x2\x2\x190\x192\x5> \x2\x191\x18F\x3\x2\x2\x2\x192\x195\x3\x2\x2\x2\x193"+
		"\x191\x3\x2\x2\x2\x193\x194\x3\x2\x2\x2\x194=\x3\x2\x2\x2\x195\x193\x3"+
		"\x2\x2\x2\x196\x197\x5@!\x2\x197\x198\a:\x2\x2\x198\x199\x5~@\x2\x199"+
		"?\x3\x2\x2\x2\x19A\x19B\a_\x2\x2\x19B\x41\x3\x2\x2\x2\x19C\x19D\aP\x2"+
		"\x2\x19D\x19E\x5\x44#\x2\x19E\x19F\aO\x2\x2\x19F\x43\x3\x2\x2\x2\x1A0"+
		"\x1A5\x5x=\x2\x1A1\x1A2\a=\x2\x2\x1A2\x1A4\x5x=\x2\x1A3\x1A1\x3\x2\x2"+
		"\x2\x1A4\x1A7\x3\x2\x2\x2\x1A5\x1A3\x3\x2\x2\x2\x1A5\x1A6\x3\x2\x2\x2"+
		"\x1A6\x45\x3\x2\x2\x2\x1A7\x1A5\x3\x2\x2\x2\x1A8\x1A9\a\x5\x2\x2\x1A9"+
		"\x1AB\x5N(\x2\x1AA\x1AC\x5P)\x2\x1AB\x1AA\x3\x2\x2\x2\x1AB\x1AC\x3\x2"+
		"\x2\x2\x1AC\x1AD\x3\x2\x2\x2\x1AD\x1AE\a:\x2\x2\x1AE\x1B1\x5\xCA\x66\x2"+
		"\x1AF\x1B2\a;\x2\x2\x1B0\x1B2\x5H%\x2\x1B1\x1AF\x3\x2\x2\x2\x1B1\x1B0"+
		"\x3\x2\x2\x2\x1B2G\x3\x2\x2\x2\x1B3\x1BA\a$\x2\x2\x1B4\x1B9\x5J&\x2\x1B5"+
		"\x1B6\x5L\'\x2\x1B6\x1B7\a;\x2\x2\x1B7\x1B9\x3\x2\x2\x2\x1B8\x1B4\x3\x2"+
		"\x2\x2\x1B8\x1B5\x3\x2\x2\x2\x1B9\x1BC\x3\x2\x2\x2\x1BA\x1B8\x3\x2\x2"+
		"\x2\x1BA\x1BB\x3\x2\x2\x2\x1BB\x1BD\x3\x2\x2\x2\x1BC\x1BA\x3\x2\x2\x2"+
		"\x1BD\x1BE\a%\x2\x2\x1BEI\x3\x2\x2\x2\x1BF\x1C0\x5r:\x2\x1C0K\x3\x2\x2"+
		"\x2\x1C1\x1C2\a\v\x2\x2\x1C2\x1C3\x5*\x16\x2\x1C3\x1C4\x5.\x18\x2\x1C4"+
		"\x1C5\x5\x32\x1A\x2\x1C5M\x3\x2\x2\x2\x1C6\x1C7\x5~@\x2\x1C7O\x3\x2\x2"+
		"\x2\x1C8\x1C9\a\x6\x2\x2\x1C9\x1CA\x5N(\x2\x1CAQ\x3\x2\x2\x2\x1CB\x1CE"+
		"\x5\x8CG\x2\x1CC\x1CE\x5\xA2R\x2\x1CD\x1CB\x3\x2\x2\x2\x1CD\x1CC\x3\x2"+
		"\x2\x2\x1CE\x1CF\x3\x2\x2\x2\x1CF\x1D0\a;\x2\x2\x1D0\x1DC\x3\x2\x2\x2"+
		"\x1D1\x1DC\x5T+\x2\x1D2\x1DC\a;\x2\x2\x1D3\x1DC\x5V,\x2\x1D4\x1DC\x5\x62"+
		"\x32\x2\x1D5\x1DC\x5\x64\x33\x2\x1D6\x1DC\x5Z.\x2\x1D7\x1DC\x5l\x37\x2"+
		"\x1D8\x1DC\x5n\x38\x2\x1D9\x1DC\x5p\x39\x2\x1DA\x1DC\x5r:\x2\x1DB\x1CD"+
		"\x3\x2\x2\x2\x1DB\x1D1\x3\x2\x2\x2\x1DB\x1D2\x3\x2\x2\x2\x1DB\x1D3\x3"+
		"\x2\x2\x2\x1DB\x1D4\x3\x2\x2\x2\x1DB\x1D5\x3\x2\x2\x2\x1DB\x1D6\x3\x2"+
		"\x2\x2\x1DB\x1D7\x3\x2\x2\x2\x1DB\x1D8\x3\x2\x2\x2\x1DB\x1D9\x3\x2\x2"+
		"\x2\x1DB\x1DA\x3\x2\x2\x2\x1DCS\x3\x2\x2\x2\x1DD\x1E1\a$\x2\x2\x1DE\x1E0"+
		"\x5R*\x2\x1DF\x1DE\x3\x2\x2\x2\x1E0\x1E3\x3\x2\x2\x2\x1E1\x1DF\x3\x2\x2"+
		"\x2\x1E1\x1E2\x3\x2\x2\x2\x1E2\x1E4\x3\x2\x2\x2\x1E3\x1E1\x3\x2\x2\x2"+
		"\x1E4\x1E5\a%\x2\x2\x1E5U\x3\x2\x2\x2\x1E6\x1E7\a\x16\x2\x2\x1E7\x1E8"+
		"\a \x2\x2\x1E8\x1E9\x5\x8CG\x2\x1E9\x1EA\a!\x2\x2\x1EA\x1EC\x5R*\x2\x1EB"+
		"\x1ED\x5X-\x2\x1EC\x1EB\x3\x2\x2\x2\x1EC\x1ED\x3\x2\x2\x2\x1EDW\x3\x2"+
		"\x2\x2\x1EE\x1EF\a\x17\x2\x2\x1EF\x1F0\x5R*\x2\x1F0Y\x3\x2\x2\x2\x1F1"+
		"\x1F2\a\x1C\x2\x2\x1F2\x1F5\a \x2\x2\x1F3\x1F6\x5t;\x2\x1F4\x1F6\x5\x8C"+
		"G\x2\x1F5\x1F3\x3\x2\x2\x2\x1F5\x1F4\x3\x2\x2\x2\x1F6\x1F7\x3\x2\x2\x2"+
		"\x1F7\x1F8\a!\x2\x2\x1F8\x1F9\x5\\/\x2\x1F9[\x3\x2\x2\x2\x1FA\x1FE\a$"+
		"\x2\x2\x1FB\x1FD\x5^\x30\x2\x1FC\x1FB\x3\x2\x2\x2\x1FD\x200\x3\x2\x2\x2"+
		"\x1FE\x1FC\x3\x2\x2\x2\x1FE\x1FF\x3\x2\x2\x2\x1FF\x202\x3\x2\x2\x2\x200"+
		"\x1FE\x3\x2\x2\x2\x201\x203\x5`\x31\x2\x202\x201\x3\x2\x2\x2\x202\x203"+
		"\x3\x2\x2\x2\x203\x204\x3\x2\x2\x2\x204\x205\a%\x2\x2\x205]\x3\x2\x2\x2"+
		"\x206\x207\a\x1D\x2\x2\x207\x208\x5\x8CG\x2\x208\x20C\a:\x2\x2\x209\x20B"+
		"\x5R*\x2\x20A\x209\x3\x2\x2\x2\x20B\x20E\x3\x2\x2\x2\x20C\x20A\x3\x2\x2"+
		"\x2\x20C\x20D\x3\x2\x2\x2\x20D_\x3\x2\x2\x2\x20E\x20C\x3\x2\x2\x2\x20F"+
		"\x210\a\x1E\x2\x2\x210\x212\a:\x2\x2\x211\x213\x5R*\x2\x212\x211\x3\x2"+
		"\x2\x2\x213\x214\x3\x2\x2\x2\x214\x212\x3\x2\x2\x2\x214\x215\x3\x2\x2"+
		"\x2\x215\x61\x3\x2\x2\x2\x216\x217\a\x18\x2\x2\x217\x218\a \x2\x2\x218"+
		"\x219\x5\x8CG\x2\x219\x21A\a!\x2\x2\x21A\x21B\x5R*\x2\x21B\x63\x3\x2\x2"+
		"\x2\x21C\x21D\a\x19\x2\x2\x21D\x21F\a \x2\x2\x21E\x220\x5\x66\x34\x2\x21F"+
		"\x21E\x3\x2\x2\x2\x21F\x220\x3\x2\x2\x2\x220\x221\x3\x2\x2\x2\x221\x223"+
		"\a;\x2\x2\x222\x224\x5h\x35\x2\x223\x222\x3\x2\x2\x2\x223\x224\x3\x2\x2"+
		"\x2\x224\x225\x3\x2\x2\x2\x225\x227\a;\x2\x2\x226\x228\x5j\x36\x2\x227"+
		"\x226\x3\x2\x2\x2\x227\x228\x3\x2\x2\x2\x228\x229\x3\x2\x2\x2\x229\x22A"+
		"\a!\x2\x2\x22A\x22B\x5R*\x2\x22B\x65\x3\x2\x2\x2\x22C\x230\x5t;\x2\x22D"+
		"\x230\x5\x8CG\x2\x22E\x230\x5\xA2R\x2\x22F\x22C\x3\x2\x2\x2\x22F\x22D"+
		"\x3\x2\x2\x2\x22F\x22E\x3\x2\x2\x2\x230g\x3\x2\x2\x2\x231\x232\x5\x8C"+
		"G\x2\x232i\x3\x2\x2\x2\x233\x234\x5\x8CG\x2\x234k\x3\x2\x2\x2\x235\x237"+
		"\a\x1F\x2\x2\x236\x238\x5\x8CG\x2\x237\x236\x3\x2\x2\x2\x237\x238\x3\x2"+
		"\x2\x2\x238\x239\x3\x2\x2\x2\x239\x23A\a;\x2\x2\x23Am\x3\x2\x2\x2\x23B"+
		"\x23C\a\x1A\x2\x2\x23C\x23D\a;\x2\x2\x23Do\x3\x2\x2\x2\x23E\x23F\a\x1B"+
		"\x2\x2\x23F\x240\a;\x2\x2\x240q\x3\x2\x2\x2\x241\x242\x5t;\x2\x242\x243"+
		"\a;\x2\x2\x243s\x3\x2\x2\x2\x244\x247\a\x11\x2\x2\x245\x247\a\x12\x2\x2"+
		"\x246\x244\x3\x2\x2\x2\x246\x245\x3\x2\x2\x2\x247\x248\x3\x2\x2\x2\x248"+
		"\x24B\x5v<\x2\x249\x24A\a:\x2\x2\x24A\x24C\x5x=\x2\x24B\x249\x3\x2\x2"+
		"\x2\x24B\x24C\x3\x2\x2\x2\x24C\x24F\x3\x2\x2\x2\x24D\x24E\aS\x2\x2\x24E"+
		"\x250\x5\x8CG\x2\x24F\x24D\x3\x2\x2\x2\x24F\x250\x3\x2\x2\x2\x250u\x3"+
		"\x2\x2\x2\x251\x252\x5\xC2\x62\x2\x252w\x3\x2\x2\x2\x253\x254\b=\x1\x2"+
		"\x254\x25A\x5z>\x2\x255\x25A\x5|?\x2\x256\x25A\x5\x82\x42\x2\x257\x25A"+
		"\x5\x84\x43\x2\x258\x25A\x5\x86\x44\x2\x259\x253\x3\x2\x2\x2\x259\x255"+
		"\x3\x2\x2\x2\x259\x256\x3\x2\x2\x2\x259\x257\x3\x2\x2\x2\x259\x258\x3"+
		"\x2\x2\x2\x25A\x25F\x3\x2\x2\x2\x25B\x25C\f\b\x2\x2\x25C\x25E\a)\x2\x2"+
		"\x25D\x25B\x3\x2\x2\x2\x25E\x261\x3\x2\x2\x2\x25F\x25D\x3\x2\x2\x2\x25F"+
		"\x260\x3\x2\x2\x2\x260y\x3\x2\x2\x2\x261\x25F\x3\x2\x2\x2\x262\x263\a"+
		"\r\x2\x2\x263{\x3\x2\x2\x2\x264\x267\x5\x80\x41\x2\x265\x267\x5~@\x2\x266"+
		"\x264\x3\x2\x2\x2\x266\x265\x3\x2\x2\x2\x267}\x3\x2\x2\x2\x268\x26D\a"+
		"_\x2\x2\x269\x26A\a<\x2\x2\x26A\x26C\a_\x2\x2\x26B\x269\x3\x2\x2\x2\x26C"+
		"\x26F\x3\x2\x2\x2\x26D\x26B\x3\x2\x2\x2\x26D\x26E\x3\x2\x2\x2\x26E\x271"+
		"\x3\x2\x2\x2\x26F\x26D\x3\x2\x2\x2\x270\x272\x5\x42\"\x2\x271\x270\x3"+
		"\x2\x2\x2\x271\x272\x3\x2\x2\x2\x272\x7F\x3\x2\x2\x2\x273\x274\t\x2\x2"+
		"\x2\x274\x81\x3\x2\x2\x2\x275\x277\a \x2\x2\x276\x278\x5\x88\x45\x2\x277"+
		"\x276\x3\x2\x2\x2\x277\x278\x3\x2\x2\x2\x278\x279\x3\x2\x2\x2\x279\x27B"+
		"\a&\x2\x2\x27A\x27C\x5x=\x2\x27B\x27A\x3\x2\x2\x2\x27B\x27C\x3\x2\x2\x2"+
		"\x27C\x27D\x3\x2\x2\x2\x27D\x27E\a!\x2\x2\x27E\x83\x3\x2\x2\x2\x27F\x280"+
		"\a\"\x2\x2\x280\x281\x5x=\x2\x281\x282\a#\x2\x2\x282\x85\x3\x2\x2\x2\x283"+
		"\x284\a\"\x2\x2\x284\x285\x5x=\x2\x285\x286\a:\x2\x2\x286\x287\x5x=\x2"+
		"\x287\x288\a#\x2\x2\x288\x87\x3\x2\x2\x2\x289\x28E\x5\x8A\x46\x2\x28A"+
		"\x28B\a=\x2\x2\x28B\x28D\x5\x8A\x46\x2\x28C\x28A\x3\x2\x2\x2\x28D\x290"+
		"\x3\x2\x2\x2\x28E\x28C\x3\x2\x2\x2\x28E\x28F\x3\x2\x2\x2\x28F\x89\x3\x2"+
		"\x2\x2\x290\x28E\x3\x2\x2\x2\x291\x293\x5x=\x2\x292\x294\a\x39\x2\x2\x293"+
		"\x292\x3\x2\x2\x2\x293\x294\x3\x2\x2\x2\x294\x8B\x3\x2\x2\x2\x295\x296"+
		"\bG\x1\x2\x296\x297\a \x2\x2\x297\x298\x5x=\x2\x298\x299\a!\x2\x2\x299"+
		"\x29A\x5\x8CG\x12\x29A\x2DB\x3\x2\x2\x2\x29B\x29C\x5\xACW\x2\x29C\x29D"+
		"\x5\x8CG\x11\x29D\x2DB\x3\x2\x2\x2\x29E\x29F\a \x2\x2\x29F\x2A0\x5\x8C"+
		"G\x2\x2A0\x2A2\a!\x2\x2\x2A1\x2A3\x5\xC0\x61\x2\x2A2\x2A1\x3\x2\x2\x2"+
		"\x2A2\x2A3\x3\x2\x2\x2\x2A3\x2DB\x3\x2\x2\x2\x2A4\x2A5\a \x2\x2\x2A5\x2A6"+
		"\x5\xA2R\x2\x2A6\x2A7\a!\x2\x2\x2A7\x2DB\x3\x2\x2\x2\x2A8\x2AA\a\xF\x2"+
		"\x2\x2A9\x2AB\x5\xBE`\x2\x2AA\x2A9\x3\x2\x2\x2\x2AA\x2AB\x3\x2\x2\x2\x2AB"+
		"\x2DB\x3\x2\x2\x2\x2AC\x2AE\a\x10\x2\x2\x2AD\x2AF\x5\xC0\x61\x2\x2AE\x2AD"+
		"\x3\x2\x2\x2\x2AE\x2AF\x3\x2\x2\x2\x2AF\x2DB\x3\x2\x2\x2\x2B0\x2B1\x5"+
		"\xA8U\x2\x2B1\x2B2\x5\xB4[\x2\x2B2\x2DB\x3\x2\x2\x2\x2B3\x2B4\x5\xB4["+
		"\x2\x2B4\x2B5\x5\xAAV\x2\x2B5\x2DB\x3\x2\x2\x2\x2B6\x2B8\x5\xA6T\x2\x2B7"+
		"\x2B9\x5\xC0\x61\x2\x2B8\x2B7\x3\x2\x2\x2\x2B8\x2B9\x3\x2\x2\x2\x2B9\x2DB"+
		"\x3\x2\x2\x2\x2BA\x2BC\x5\xC2\x62\x2\x2BB\x2BD\x5\xC0\x61\x2\x2BC\x2BB"+
		"\x3\x2\x2\x2\x2BC\x2BD\x3\x2\x2\x2\x2BD\x2DB\x3\x2\x2\x2\x2BE\x2C0\x5"+
		"\xC8\x65\x2\x2BF\x2C1\x5\xBE`\x2\x2C0\x2BF\x3\x2\x2\x2\x2C0\x2C1\x3\x2"+
		"\x2\x2\x2C1\x2DB\x3\x2\x2\x2\x2C2\x2C4\x5\xC4\x63\x2\x2C3\x2C5\x5\xBE"+
		"`\x2\x2C4\x2C3\x3\x2\x2\x2\x2C4\x2C5\x3\x2\x2\x2\x2C5\x2DB\x3\x2\x2\x2"+
		"\x2C6\x2C8\x5\xC6\x64\x2\x2C7\x2C9\x5\xBE`\x2\x2C8\x2C7\x3\x2\x2\x2\x2C8"+
		"\x2C9\x3\x2\x2\x2\x2C9\x2DB\x3\x2\x2\x2\x2CA\x2CC\x5\xD0i\x2\x2CB\x2CD"+
		"\x5\xBE`\x2\x2CC\x2CB\x3\x2\x2\x2\x2CC\x2CD\x3\x2\x2\x2\x2CD\x2DB\x3\x2"+
		"\x2\x2\x2CE\x2D0\x5\xD2j\x2\x2CF\x2D1\x5\xBE`\x2\x2D0\x2CF\x3\x2\x2\x2"+
		"\x2D0\x2D1\x3\x2\x2\x2\x2D1\x2DB\x3\x2\x2\x2\x2D2\x2D4\x5\xA4S\x2\x2D3"+
		"\x2D5\x5\xC0\x61\x2\x2D4\x2D3\x3\x2\x2\x2\x2D4\x2D5\x3\x2\x2\x2\x2D5\x2DB"+
		"\x3\x2\x2\x2\x2D6\x2D8\x5\xDCo\x2\x2D7\x2D9\x5\xBE`\x2\x2D8\x2D7\x3\x2"+
		"\x2\x2\x2D8\x2D9\x3\x2\x2\x2\x2D9\x2DB\x3\x2\x2\x2\x2DA\x295\x3\x2\x2"+
		"\x2\x2DA\x29B\x3\x2\x2\x2\x2DA\x29E\x3\x2\x2\x2\x2DA\x2A4\x3\x2\x2\x2"+
		"\x2DA\x2A8\x3\x2\x2\x2\x2DA\x2AC\x3\x2\x2\x2\x2DA\x2B0\x3\x2\x2\x2\x2DA"+
		"\x2B3\x3\x2\x2\x2\x2DA\x2B6\x3\x2\x2\x2\x2DA\x2BA\x3\x2\x2\x2\x2DA\x2BE"+
		"\x3\x2\x2\x2\x2DA\x2C2\x3\x2\x2\x2\x2DA\x2C6\x3\x2\x2\x2\x2DA\x2CA\x3"+
		"\x2\x2\x2\x2DA\x2CE\x3\x2\x2\x2\x2DA\x2D2\x3\x2\x2\x2\x2DA\x2D6\x3\x2"+
		"\x2\x2\x2DB\x317\x3\x2\x2\x2\x2DC\x2DD\f\x10\x2\x2\x2DD\x2DE\a(\x2\x2"+
		"\x2DE\x316\x5\x8CG\x10\x2DF\x2E0\f\xF\x2\x2\x2E0\x2E1\x5\x8EH\x2\x2E1"+
		"\x2E2\x5\x8CG\x10\x2E2\x316\x3\x2\x2\x2\x2E3\x2E4\f\xE\x2\x2\x2E4\x2E5"+
		"\x5\x90I\x2\x2E5\x2E6\x5\x8CG\xF\x2E6\x316\x3\x2\x2\x2\x2E7\x2E8\f\r\x2"+
		"\x2\x2E8\x2E9\x5\x9AN\x2\x2E9\x2EA\x5\x8CG\xE\x2EA\x316\x3\x2\x2\x2\x2EB"+
		"\x2EC\f\v\x2\x2\x2EC\x2ED\x5\x92J\x2\x2ED\x2EE\x5\x8CG\f\x2EE\x316\x3"+
		"\x2\x2\x2\x2EF\x2F0\f\n\x2\x2\x2F0\x2F1\x5\x94K\x2\x2F1\x2F2\x5\x8CG\v"+
		"\x2F2\x316\x3\x2\x2\x2\x2F3\x2F4\f\t\x2\x2\x2F4\x2F5\x5\x96L\x2\x2F5\x2F6"+
		"\x5\x8CG\n\x2F6\x316\x3\x2\x2\x2\x2F7\x2F8\f\b\x2\x2\x2F8\x2F9\x5\x98"+
		"M\x2\x2F9\x2FA\x5\x8CG\t\x2FA\x316\x3\x2\x2\x2\x2FB\x2FC\f\a\x2\x2\x2FC"+
		"\x2FD\x5\x9CO\x2\x2FD\x2FE\x5\x8CG\b\x2FE\x316\x3\x2\x2\x2\x2FF\x300\f"+
		"\x6\x2\x2\x300\x301\x5\x9EP\x2\x301\x302\x5\x8CG\a\x302\x316\x3\x2\x2"+
		"\x2\x303\x304\f\x5\x2\x2\x304\x305\x5\xA0Q\x2\x305\x306\x5\x8CG\x6\x306"+
		"\x316\x3\x2\x2\x2\x307\x308\f\x4\x2\x2\x308\x309\a)\x2\x2\x309\x30A\x5"+
		"\x8CG\x2\x30A\x30B\a:\x2\x2\x30B\x30C\x5\x8CG\x4\x30C\x316\x3\x2\x2\x2"+
		"\x30D\x30E\f\x1F\x2\x2\x30E\x310\a\x41\x2\x2\x30F\x311\x5\xC0\x61\x2\x310"+
		"\x30F\x3\x2\x2\x2\x310\x311\x3\x2\x2\x2\x311\x316\x3\x2\x2\x2\x312\x313"+
		"\f\f\x2\x2\x313\x314\a\x15\x2\x2\x314\x316\x5x=\x2\x315\x2DC\x3\x2\x2"+
		"\x2\x315\x2DF\x3\x2\x2\x2\x315\x2E3\x3\x2\x2\x2\x315\x2E7\x3\x2\x2\x2"+
		"\x315\x2EB\x3\x2\x2\x2\x315\x2EF\x3\x2\x2\x2\x315\x2F3\x3\x2\x2\x2\x315"+
		"\x2F7\x3\x2\x2\x2\x315\x2FB\x3\x2\x2\x2\x315\x2FF\x3\x2\x2\x2\x315\x303"+
		"\x3\x2\x2\x2\x315\x307\x3\x2\x2\x2\x315\x30D\x3\x2\x2\x2\x315\x312\x3"+
		"\x2\x2\x2\x316\x319\x3\x2\x2\x2\x317\x315\x3\x2\x2\x2\x317\x318\x3\x2"+
		"\x2\x2\x318\x8D\x3\x2\x2\x2\x319\x317\x3\x2\x2\x2\x31A\x31B\t\x3\x2\x2"+
		"\x31B\x8F\x3\x2\x2\x2\x31C\x31D\t\x4\x2\x2\x31D\x91\x3\x2\x2\x2\x31E\x31F"+
		"\t\x5\x2\x2\x31F\x93\x3\x2\x2\x2\x320\x321\t\x6\x2\x2\x321\x95\x3\x2\x2"+
		"\x2\x322\x323\aG\x2\x2\x323\x97\x3\x2\x2\x2\x324\x325\aH\x2\x2\x325\x99"+
		"\x3\x2\x2\x2\x326\x327\t\a\x2\x2\x327\x9B\x3\x2\x2\x2\x328\x329\t\b\x2"+
		"\x2\x329\x9D\x3\x2\x2\x2\x32A\x32B\aQ\x2\x2\x32B\x9F\x3\x2\x2\x2\x32C"+
		"\x32D\aR\x2\x2\x32D\xA1\x3\x2\x2\x2\x32E\x32F\x5\xB4[\x2\x32F\x332\x5"+
		"\xAEX\x2\x330\x333\x5\x8CG\x2\x331\x333\x5\xA2R\x2\x332\x330\x3\x2\x2"+
		"\x2\x332\x331\x3\x2\x2\x2\x333\xA3\x3\x2\x2\x2\x334\x335\a\x14\x2\x2\x335"+
		"\x336\x5|?\x2\x336\x337\x5\xB0Y\x2\x337\xA5\x3\x2\x2\x2\x338\x33B\x5\x34"+
		"\x1B\x2\x339\x33B\x5.\x18\x2\x33A\x338\x3\x2\x2\x2\x33A\x339\x3\x2\x2"+
		"\x2\x33B\x33D\x3\x2\x2\x2\x33C\x33E\x5\x32\x1A\x2\x33D\x33C\x3\x2\x2\x2"+
		"\x33D\x33E\x3\x2\x2\x2\x33E\x33F\x3\x2\x2\x2\x33F\x340\a\'\x2\x2\x340"+
		"\x341\x5,\x17\x2\x341\xA7\x3\x2\x2\x2\x342\x343\t\t\x2\x2\x343\xA9\x3"+
		"\x2\x2\x2\x344\x345\t\t\x2\x2\x345\xAB\x3\x2\x2\x2\x346\x347\t\n\x2\x2"+
		"\x347\xAD\x3\x2\x2\x2\x348\x349\t\v\x2\x2\x349\xAF\x3\x2\x2\x2\x34A\x34C"+
		"\a \x2\x2\x34B\x34D\x5\xB2Z\x2\x34C\x34B\x3\x2\x2\x2\x34C\x34D\x3\x2\x2"+
		"\x2\x34D\x34E\x3\x2\x2\x2\x34E\x34F\a!\x2\x2\x34F\xB1\x3\x2\x2\x2\x350"+
		"\x355\x5\x8CG\x2\x351\x352\a=\x2\x2\x352\x354\x5\x8CG\x2\x353\x351\x3"+
		"\x2\x2\x2\x354\x357\x3\x2\x2\x2\x355\x353\x3\x2\x2\x2\x355\x356\x3\x2"+
		"\x2\x2\x356\xB3\x3\x2\x2\x2\x357\x355\x3\x2\x2\x2\x358\x35B\x5\xC2\x62"+
		"\x2\x359\x35B\a\xF\x2\x2\x35A\x358\x3\x2\x2\x2\x35A\x359\x3\x2\x2\x2\x35B"+
		"\x35D\x3\x2\x2\x2\x35C\x35E\x5\xB6\\\x2\x35D\x35C\x3\x2\x2\x2\x35D\x35E"+
		"\x3\x2\x2\x2\x35E\xB5\x3\x2\x2\x2\x35F\x361\a\x41\x2\x2\x360\x35F\x3\x2"+
		"\x2\x2\x360\x361\x3\x2\x2\x2\x361\x36D\x3\x2\x2\x2\x362\x363\x5\xB8]\x2"+
		"\x363\x364\x5\xB6\\\x2\x364\x36E\x3\x2\x2\x2\x365\x367\x5\xBA^\x2\x366"+
		"\x368\x5\xB6\\\x2\x367\x366\x3\x2\x2\x2\x367\x368\x3\x2\x2\x2\x368\x36E"+
		"\x3\x2\x2\x2\x369\x36B\x5\xBC_\x2\x36A\x36C\x5\xB6\\\x2\x36B\x36A\x3\x2"+
		"\x2\x2\x36B\x36C\x3\x2\x2\x2\x36C\x36E\x3\x2\x2\x2\x36D\x362\x3\x2\x2"+
		"\x2\x36D\x365\x3\x2\x2\x2\x36D\x369\x3\x2\x2\x2\x36E\xB7\x3\x2\x2\x2\x36F"+
		"\x370\x5\xB0Y\x2\x370\xB9\x3\x2\x2\x2\x371\x372\a<\x2\x2\x372\x373\x5"+
		"\xC2\x62\x2\x373\xBB\x3\x2\x2\x2\x374\x375\a\"\x2\x2\x375\x376\x5\x8C"+
		"G\x2\x376\x377\a#\x2\x2\x377\xBD\x3\x2\x2\x2\x378\x37B\x5\xBA^\x2\x379"+
		"\x37B\x5\xBC_\x2\x37A\x378\x3\x2\x2\x2\x37A\x379\x3\x2\x2\x2\x37B\x37D"+
		"\x3\x2\x2\x2\x37C\x37E\x5\xC0\x61\x2\x37D\x37C\x3\x2\x2\x2\x37D\x37E\x3"+
		"\x2\x2\x2\x37E\xBF\x3\x2\x2\x2\x37F\x381\a)\x2\x2\x380\x37F\x3\x2\x2\x2"+
		"\x381\x384\x3\x2\x2\x2\x382\x380\x3\x2\x2\x2\x382\x383\x3\x2\x2\x2\x383"+
		"\x388\x3\x2\x2\x2\x384\x382\x3\x2\x2\x2\x385\x389\x5\xB8]\x2\x386\x389"+
		"\x5\xBA^\x2\x387\x389\x5\xBC_\x2\x388\x385\x3\x2\x2\x2\x388\x386\x3\x2"+
		"\x2\x2\x388\x387\x3\x2\x2\x2\x389\x38B\x3\x2\x2\x2\x38A\x38C\x5\xC0\x61"+
		"\x2\x38B\x38A\x3\x2\x2\x2\x38B\x38C\x3\x2\x2\x2\x38C\xC1\x3\x2\x2\x2\x38D"+
		"\x38E\a_\x2\x2\x38E\xC3\x3\x2\x2\x2\x38F\x391\a\"\x2\x2\x390\x392\x5\xB2"+
		"Z\x2\x391\x390\x3\x2\x2\x2\x391\x392\x3\x2\x2\x2\x392\x393\x3\x2\x2\x2"+
		"\x393\x394\a#\x2\x2\x394\xC5\x3\x2\x2\x2\x395\x396\a\"\x2\x2\x396\x397"+
		"\x5\xCCg\x2\x397\x398\a#\x2\x2\x398\xC7\x3\x2\x2\x2\x399\x39B\a$\x2\x2"+
		"\x39A\x39C\x5\xD4k\x2\x39B\x39A\x3\x2\x2\x2\x39B\x39C\x3\x2\x2\x2\x39C"+
		"\x39D\x3\x2\x2\x2\x39D\x39E\a%\x2\x2\x39E\xC9\x3\x2\x2\x2\x39F\x3A0\a"+
		"\a\x2\x2\x3A0\xCB\x3\x2\x2\x2\x3A1\x3AB\a:\x2\x2\x3A2\x3A7\x5\xCEh\x2"+
		"\x3A3\x3A4\a=\x2\x2\x3A4\x3A6\x5\xCEh\x2\x3A5\x3A3\x3\x2\x2\x2\x3A6\x3A9"+
		"\x3\x2\x2\x2\x3A7\x3A5\x3\x2\x2\x2\x3A7\x3A8\x3\x2\x2\x2\x3A8\x3AB\x3"+
		"\x2\x2\x2\x3A9\x3A7\x3\x2\x2\x2\x3AA\x3A1\x3\x2\x2\x2\x3AA\x3A2\x3\x2"+
		"\x2\x2\x3AB\xCD\x3\x2\x2\x2\x3AC\x3AD\x5\x8CG\x2\x3AD\x3AE\a:\x2\x2\x3AE"+
		"\x3AF\x5\x8CG\x2\x3AF\xCF\x3\x2\x2\x2\x3B0\x3B1\a\"\x2\x2\x3B1\x3B2\x5"+
		"x=\x2\x3B2\x3B3\a#\x2\x2\x3B3\x3B4\x5\xB8]\x2\x3B4\xD1\x3\x2\x2\x2\x3B5"+
		"\x3B6\a\"\x2\x2\x3B6\x3B7\x5x=\x2\x3B7\x3B8\a:\x2\x2\x3B8\x3B9\x5x=\x2"+
		"\x3B9\x3BA\a#\x2\x2\x3BA\x3BB\x5\xB8]\x2\x3BB\xD3\x3\x2\x2\x2\x3BC\x3C1"+
		"\x5\xD6l\x2\x3BD\x3BE\a=\x2\x2\x3BE\x3C0\x5\xD6l\x2\x3BF\x3BD\x3\x2\x2"+
		"\x2\x3C0\x3C3\x3\x2\x2\x2\x3C1\x3BF\x3\x2\x2\x2\x3C1\x3C2\x3\x2\x2\x2"+
		"\x3C2\xD5\x3\x2\x2\x2\x3C3\x3C1\x3\x2\x2\x2\x3C4\x3C5\x5\xD8m\x2\x3C5"+
		"\x3C6\a:\x2\x2\x3C6\x3C7\x5\x8CG\x2\x3C7\xD7\x3\x2\x2\x2\x3C8\x3CB\a_"+
		"\x2\x2\x3C9\x3CB\x5\xCA\x66\x2\x3CA\x3C8\x3\x2\x2\x2\x3CA\x3C9\x3\x2\x2"+
		"\x2\x3CB\xD9\x3\x2\x2\x2\x3CC\x3CE\a\x43\x2\x2\x3CD\x3CC\x3\x2\x2\x2\x3CD"+
		"\x3CE\x3\x2\x2\x2\x3CE\x3CF\x3\x2\x2\x2\x3CF\x3D5\x5\xDEp\x2\x3D0\x3D5"+
		"\a\x34\x2\x2\x3D1\x3D5\a\x35\x2\x2\x3D2\x3D5\a\x36\x2\x2\x3D3\x3D5\x5"+
		"\xCA\x66\x2\x3D4\x3CD\x3\x2\x2\x2\x3D4\x3D0\x3\x2\x2\x2\x3D4\x3D1\x3\x2"+
		"\x2\x2\x3D4\x3D2\x3\x2\x2\x2\x3D4\x3D3\x3\x2\x2\x2\x3D5\xDB\x3\x2\x2\x2"+
		"\x3D6\x3DC\x5\xDEp\x2\x3D7\x3DC\a\x34\x2\x2\x3D8\x3DC\a\x35\x2\x2\x3D9"+
		"\x3DC\a\x36\x2\x2\x3DA\x3DC\x5\xCA\x66\x2\x3DB\x3D6\x3\x2\x2\x2\x3DB\x3D7"+
		"\x3\x2\x2\x2\x3DB\x3D8\x3\x2\x2\x2\x3DB\x3D9\x3\x2\x2\x2\x3DB\x3DA\x3"+
		"\x2\x2\x2\x3DC\xDD\x3\x2\x2\x2\x3DD\x3E1\x5\xE0q\x2\x3DE\x3E1\x5\xE2r"+
		"\x2\x3DF\x3E1\t\f\x2\x2\x3E0\x3DD\x3\x2\x2\x2\x3E0\x3DE\x3\x2\x2\x2\x3E0"+
		"\x3DF\x3\x2\x2\x2\x3E1\xDF\x3\x2\x2\x2\x3E2\x3E3\a\x31\x2\x2\x3E3\xE1"+
		"\x3\x2\x2\x2\x3E4\x3E5\a\x32\x2\x2\x3E5\xE3\x3\x2\x2\x2\x66\xEC\xEE\xF4"+
		"\xF7\x103\x105\x10D\x11D\x11F\x127\x12A\x132\x13B\x13F\x144\x14B\x14E"+
		"\x151\x158\x15B\x163\x16C\x175\x17A\x181\x18A\x193\x1A5\x1AB\x1B1\x1B8"+
		"\x1BA\x1CD\x1DB\x1E1\x1EC\x1F5\x1FE\x202\x20C\x214\x21F\x223\x227\x22F"+
		"\x237\x246\x24B\x24F\x259\x25F\x266\x26D\x271\x277\x27B\x28E\x293\x2A2"+
		"\x2AA\x2AE\x2B8\x2BC\x2C0\x2C4\x2C8\x2CC\x2D0\x2D4\x2D8\x2DA\x310\x315"+
		"\x317\x332\x33A\x33D\x34C\x355\x35A\x35D\x360\x367\x36B\x36D\x37A\x37D"+
		"\x382\x388\x38B\x391\x39B\x3A7\x3AA\x3C1\x3CA\x3CD\x3D4\x3DB\x3E0";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
