//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Luiz Fernando/Documents/Visual Studio 2013/Engines/ZScript/ZScript\ZScript.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class ZScriptParser : Parser {
	public const int
		StringLiteral=1, StringEscape=2, T_VAR=3, T_LET=4, T_CONST=5, T_NEW=6, 
		T_EXPORT=7, T_FUNCTION=8, T_OVERRIDE=9, T_OBJECT=10, T_SEQUENCE=11, T_IF=12, 
		T_ELSE=13, T_WHILE=14, T_FOR=15, T_BREAK=16, T_CONTINUE=17, T_SWITCH=18, 
		T_CASE=19, T_DEFAULT=20, T_RETURN=21, T_LEFT_PAREN=22, T_RIGHT_PAREN=23, 
		T_LEFT_BRACKET=24, T_RIGHT_BRACKET=25, T_LEFT_CURLY=26, T_RIGHT_CURLY=27, 
		T_CLOSURE_RETURN=28, T_CLOSURE_CALL=29, INT=30, HEX=31, BINARY=32, FLOAT=33, 
		T_FALSE=34, T_TRUE=35, T_NULL=36, T_QUOTES=37, T_DOUBLE_QUOTES=38, T_TRIPPLE_DOT=39, 
		T_DOUBLE_COLON=40, T_SEMICOLON=41, T_PERIOD=42, T_COMMA=43, T_MULT=44, 
		T_DIV=45, T_MOD=46, T_NOT=47, T_PLUS=48, T_MINUS=49, T_INCREMENT=50, T_DECREMENT=51, 
		T_BITWISE_AND=52, T_BITWISE_XOR=53, T_BITWISE_OR=54, T_EQUALITY=55, T_UNEQUALITY=56, 
		T_MORE_THAN_OR_EQUALS=57, T_LESS_THAN_OR_EQUALS=58, T_MORE_THAN=59, T_LESS_THAN=60, 
		T_LOGICAL_AND=61, T_LOGICAL_OR=62, T_EQUALS=63, T_PLUS_EQUALS=64, T_MINUS_EQUALS=65, 
		T_TIMES_EQUALS=66, T_DIV_EQUALS=67, T_MOD_EQUALS=68, T_XOR_EQUALS=69, 
		T_AND_EQUALS=70, T_TILDE_EQUALS=71, T_OR_EQUALS=72, IDENT=73, Whitespace=74, 
		Newline=75, BlockComment=76, LineComment=77, ImportDirective=78;
	public const int
		RULE_program = 0, RULE_scriptBody = 1, RULE_objectDefinition = 2, RULE_objectInherit = 3, 
		RULE_objectName = 4, RULE_objectBody = 5, RULE_objectField = 6, RULE_objectFunction = 7, 
		RULE_variableBlock = 8, RULE_functionBlock = 9, RULE_globalVariable = 10, 
		RULE_sequenceBlock = 11, RULE_sequenceName = 12, RULE_sequenceBody = 13, 
		RULE_sequenceFrame = 14, RULE_sequenceFrameChange = 15, RULE_frameRange = 16, 
		RULE_frameRangeElement = 17, RULE_frameNumber = 18, RULE_functionDefinition = 19, 
		RULE_exportDefinition = 20, RULE_functionName = 21, RULE_functionArguments = 22, 
		RULE_argumentList = 23, RULE_returnType = 24, RULE_functionArg = 25, RULE_argumentName = 26, 
		RULE_functionTriggers = 27, RULE_functionTriggerArgs = 28, RULE_functionTrigger = 29, 
		RULE_statement = 30, RULE_blockStatement = 31, RULE_ifStatement = 32, 
		RULE_elseStatement = 33, RULE_switchStatement = 34, RULE_switchBlock = 35, 
		RULE_caseBlock = 36, RULE_defaultBlock = 37, RULE_whileStatement = 38, 
		RULE_forStatement = 39, RULE_forInit = 40, RULE_returnStatement = 41, 
		RULE_valueDecl = 42, RULE_varDecl = 43, RULE_letDecl = 44, RULE_variableDeclare = 45, 
		RULE_constantDeclare = 46, RULE_valueHolderDecl = 47, RULE_valueHolderName = 48, 
		RULE_type = 49, RULE_typeName = 50, RULE_closureType = 51, RULE_typeList = 52, 
		RULE_expression = 53, RULE_multOp = 54, RULE_additionOp = 55, RULE_bitwiseAndXOrOp = 56, 
		RULE_bitwiseOrOp = 57, RULE_comparisionOp = 58, RULE_logicalOp = 59, RULE_assignmentExpression = 60, 
		RULE_newExpression = 61, RULE_closureExpression = 62, RULE_unaryExpression = 63, 
		RULE_binaryOperator = 64, RULE_prefixOperator = 65, RULE_postfixOperator = 66, 
		RULE_assignmentOperator = 67, RULE_arrayDeclaration = 68, RULE_funcCallArguments = 69, 
		RULE_expressionList = 70, RULE_leftValue = 71, RULE_leftValueAccess = 72, 
		RULE_functionCall = 73, RULE_fieldAccess = 74, RULE_arrayAccess = 75, 
		RULE_objectAccess = 76, RULE_valueAccess = 77, RULE_memberName = 78, RULE_object = 79, 
		RULE_objectEntryList = 80, RULE_objectEntryDefinition = 81, RULE_entryName = 82, 
		RULE_constantAtom = 83, RULE_stringLiteral = 84, RULE_atom = 85, RULE_numericAtom = 86, 
		RULE_hexadecimalNumber = 87, RULE_binaryNumber = 88;
	public static readonly string[] ruleNames = {
		"program", "scriptBody", "objectDefinition", "objectInherit", "objectName", 
		"objectBody", "objectField", "objectFunction", "variableBlock", "functionBlock", 
		"globalVariable", "sequenceBlock", "sequenceName", "sequenceBody", "sequenceFrame", 
		"sequenceFrameChange", "frameRange", "frameRangeElement", "frameNumber", 
		"functionDefinition", "exportDefinition", "functionName", "functionArguments", 
		"argumentList", "returnType", "functionArg", "argumentName", "functionTriggers", 
		"functionTriggerArgs", "functionTrigger", "statement", "blockStatement", 
		"ifStatement", "elseStatement", "switchStatement", "switchBlock", "caseBlock", 
		"defaultBlock", "whileStatement", "forStatement", "forInit", "returnStatement", 
		"valueDecl", "varDecl", "letDecl", "variableDeclare", "constantDeclare", 
		"valueHolderDecl", "valueHolderName", "type", "typeName", "closureType", 
		"typeList", "expression", "multOp", "additionOp", "bitwiseAndXOrOp", "bitwiseOrOp", 
		"comparisionOp", "logicalOp", "assignmentExpression", "newExpression", 
		"closureExpression", "unaryExpression", "binaryOperator", "prefixOperator", 
		"postfixOperator", "assignmentOperator", "arrayDeclaration", "funcCallArguments", 
		"expressionList", "leftValue", "leftValueAccess", "functionCall", "fieldAccess", 
		"arrayAccess", "objectAccess", "valueAccess", "memberName", "object", 
		"objectEntryList", "objectEntryDefinition", "entryName", "constantAtom", 
		"stringLiteral", "atom", "numericAtom", "hexadecimalNumber", "binaryNumber"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'var'", "'let'", "'const'", "'new'", "'@'", "'function'", 
		"'override'", "'object'", "'sequence'", "'if'", "'else'", "'while'", "'for'", 
		"'break'", "'continue'", "'switch'", "'case'", "'default'", "'return'", 
		"'('", "')'", "'['", "']'", "'{'", "'}'", "'->'", "'=>'", null, null, 
		null, null, "'false'", "'true'", "'null'", "'''", "'\"'", "'...'", "':'", 
		"';'", "'.'", "','", "'*'", "'/'", "'%'", "'!'", "'+'", "'-'", "'++'", 
		"'--'", "'&'", "'^'", "'|'", "'=='", "'!='", "'>='", "'<='", "'>'", "'<'", 
		"'&&'", "'||'", "'='", "'+='", "'-='", "'*='", "'/='", "'%='", "'^='", 
		"'&='", "'~='", "'|='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "StringLiteral", "StringEscape", "T_VAR", "T_LET", "T_CONST", "T_NEW", 
		"T_EXPORT", "T_FUNCTION", "T_OVERRIDE", "T_OBJECT", "T_SEQUENCE", "T_IF", 
		"T_ELSE", "T_WHILE", "T_FOR", "T_BREAK", "T_CONTINUE", "T_SWITCH", "T_CASE", 
		"T_DEFAULT", "T_RETURN", "T_LEFT_PAREN", "T_RIGHT_PAREN", "T_LEFT_BRACKET", 
		"T_RIGHT_BRACKET", "T_LEFT_CURLY", "T_RIGHT_CURLY", "T_CLOSURE_RETURN", 
		"T_CLOSURE_CALL", "INT", "HEX", "BINARY", "FLOAT", "T_FALSE", "T_TRUE", 
		"T_NULL", "T_QUOTES", "T_DOUBLE_QUOTES", "T_TRIPPLE_DOT", "T_DOUBLE_COLON", 
		"T_SEMICOLON", "T_PERIOD", "T_COMMA", "T_MULT", "T_DIV", "T_MOD", "T_NOT", 
		"T_PLUS", "T_MINUS", "T_INCREMENT", "T_DECREMENT", "T_BITWISE_AND", "T_BITWISE_XOR", 
		"T_BITWISE_OR", "T_EQUALITY", "T_UNEQUALITY", "T_MORE_THAN_OR_EQUALS", 
		"T_LESS_THAN_OR_EQUALS", "T_MORE_THAN", "T_LESS_THAN", "T_LOGICAL_AND", 
		"T_LOGICAL_OR", "T_EQUALS", "T_PLUS_EQUALS", "T_MINUS_EQUALS", "T_TIMES_EQUALS", 
		"T_DIV_EQUALS", "T_MOD_EQUALS", "T_XOR_EQUALS", "T_AND_EQUALS", "T_TILDE_EQUALS", 
		"T_OR_EQUALS", "IDENT", "Whitespace", "Newline", "BlockComment", "LineComment", 
		"ImportDirective"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ZScript.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public ZScriptParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ScriptBodyContext scriptBody() {
			return GetRuleContext<ScriptBodyContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178; scriptBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptBodyContext : ParserRuleContext {
		public VariableBlockContext[] variableBlock() {
			return GetRuleContexts<VariableBlockContext>();
		}
		public VariableBlockContext variableBlock(int i) {
			return GetRuleContext<VariableBlockContext>(i);
		}
		public FunctionBlockContext[] functionBlock() {
			return GetRuleContexts<FunctionBlockContext>();
		}
		public FunctionBlockContext functionBlock(int i) {
			return GetRuleContext<FunctionBlockContext>(i);
		}
		public ObjectDefinitionContext[] objectDefinition() {
			return GetRuleContexts<ObjectDefinitionContext>();
		}
		public ObjectDefinitionContext objectDefinition(int i) {
			return GetRuleContext<ObjectDefinitionContext>(i);
		}
		public SequenceBlockContext[] sequenceBlock() {
			return GetRuleContexts<SequenceBlockContext>();
		}
		public SequenceBlockContext sequenceBlock(int i) {
			return GetRuleContext<SequenceBlockContext>(i);
		}
		public ScriptBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scriptBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterScriptBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitScriptBody(this);
		}
	}

	[RuleVersion(0)]
	public ScriptBodyContext scriptBody() {
		ScriptBodyContext _localctx = new ScriptBodyContext(Context, State);
		EnterRule(_localctx, 2, RULE_scriptBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T_OBJECT) | (1L << T_SEQUENCE) | (1L << T_LEFT_BRACKET) | (1L << T_LEFT_CURLY))) != 0)) {
				{
				State = 184;
				switch (TokenStream.La(1)) {
				case T_LEFT_BRACKET:
					{
					State = 180; variableBlock();
					}
					break;
				case T_LEFT_CURLY:
					{
					State = 181; functionBlock();
					}
					break;
				case T_OBJECT:
					{
					State = 182; objectDefinition();
					}
					break;
				case T_SEQUENCE:
					{
					State = 183; sequenceBlock();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 188;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectDefinitionContext : ParserRuleContext {
		public ObjectNameContext objectName() {
			return GetRuleContext<ObjectNameContext>(0);
		}
		public ObjectBodyContext objectBody() {
			return GetRuleContext<ObjectBodyContext>(0);
		}
		public ObjectInheritContext objectInherit() {
			return GetRuleContext<ObjectInheritContext>(0);
		}
		public ObjectDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterObjectDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitObjectDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ObjectDefinitionContext objectDefinition() {
		ObjectDefinitionContext _localctx = new ObjectDefinitionContext(Context, State);
		EnterRule(_localctx, 4, RULE_objectDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189; Match(T_OBJECT);
			State = 190; objectName();
			State = 192;
			_la = TokenStream.La(1);
			if (_la==T_DOUBLE_COLON) {
				{
				State = 191; objectInherit();
				}
			}

			State = 194; objectBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectInheritContext : ParserRuleContext {
		public ObjectNameContext objectName() {
			return GetRuleContext<ObjectNameContext>(0);
		}
		public ObjectInheritContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectInherit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterObjectInherit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitObjectInherit(this);
		}
	}

	[RuleVersion(0)]
	public ObjectInheritContext objectInherit() {
		ObjectInheritContext _localctx = new ObjectInheritContext(Context, State);
		EnterRule(_localctx, 6, RULE_objectInherit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196; Match(T_DOUBLE_COLON);
			State = 197; objectName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectNameContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(ZScriptParser.IDENT, 0); }
		public ObjectNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterObjectName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitObjectName(this);
		}
	}

	[RuleVersion(0)]
	public ObjectNameContext objectName() {
		ObjectNameContext _localctx = new ObjectNameContext(Context, State);
		EnterRule(_localctx, 8, RULE_objectName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199; Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectBodyContext : ParserRuleContext {
		public ObjectFieldContext[] objectField() {
			return GetRuleContexts<ObjectFieldContext>();
		}
		public ObjectFieldContext objectField(int i) {
			return GetRuleContext<ObjectFieldContext>(i);
		}
		public ObjectFunctionContext[] objectFunction() {
			return GetRuleContexts<ObjectFunctionContext>();
		}
		public ObjectFunctionContext objectFunction(int i) {
			return GetRuleContext<ObjectFunctionContext>(i);
		}
		public ObjectBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterObjectBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitObjectBody(this);
		}
	}

	[RuleVersion(0)]
	public ObjectBodyContext objectBody() {
		ObjectBodyContext _localctx = new ObjectBodyContext(Context, State);
		EnterRule(_localctx, 10, RULE_objectBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201; Match(T_LEFT_CURLY);
			State = 206;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T_VAR) | (1L << T_FUNCTION) | (1L << T_OVERRIDE))) != 0)) {
				{
				State = 204;
				switch (TokenStream.La(1)) {
				case T_VAR:
					{
					State = 202; objectField();
					}
					break;
				case T_FUNCTION:
				case T_OVERRIDE:
					{
					State = 203; objectFunction();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 208;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 209; Match(T_RIGHT_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectFieldContext : ParserRuleContext {
		public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		public ObjectFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectField; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterObjectField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitObjectField(this);
		}
	}

	[RuleVersion(0)]
	public ObjectFieldContext objectField() {
		ObjectFieldContext _localctx = new ObjectFieldContext(Context, State);
		EnterRule(_localctx, 12, RULE_objectField);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211; varDecl();
			State = 212; Match(T_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectFunctionContext : ParserRuleContext {
		public FunctionDefinitionContext functionDefinition() {
			return GetRuleContext<FunctionDefinitionContext>(0);
		}
		public ObjectFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterObjectFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitObjectFunction(this);
		}
	}

	[RuleVersion(0)]
	public ObjectFunctionContext objectFunction() {
		ObjectFunctionContext _localctx = new ObjectFunctionContext(Context, State);
		EnterRule(_localctx, 14, RULE_objectFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			_la = TokenStream.La(1);
			if (_la==T_OVERRIDE) {
				{
				State = 214; Match(T_OVERRIDE);
				}
			}

			State = 217; Match(T_FUNCTION);
			State = 218; functionDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableBlockContext : ParserRuleContext {
		public GlobalVariableContext[] globalVariable() {
			return GetRuleContexts<GlobalVariableContext>();
		}
		public GlobalVariableContext globalVariable(int i) {
			return GetRuleContext<GlobalVariableContext>(i);
		}
		public VariableBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterVariableBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitVariableBlock(this);
		}
	}

	[RuleVersion(0)]
	public VariableBlockContext variableBlock() {
		VariableBlockContext _localctx = new VariableBlockContext(Context, State);
		EnterRule(_localctx, 16, RULE_variableBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220; Match(T_LEFT_BRACKET);
			State = 224;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T_CONST || _la==IDENT) {
				{
				{
				State = 221; globalVariable();
				}
				}
				State = 226;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 227; Match(T_RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBlockContext : ParserRuleContext {
		public VariableBlockContext[] variableBlock() {
			return GetRuleContexts<VariableBlockContext>();
		}
		public VariableBlockContext variableBlock(int i) {
			return GetRuleContext<VariableBlockContext>(i);
		}
		public ExportDefinitionContext[] exportDefinition() {
			return GetRuleContexts<ExportDefinitionContext>();
		}
		public ExportDefinitionContext exportDefinition(int i) {
			return GetRuleContext<ExportDefinitionContext>(i);
		}
		public FunctionDefinitionContext[] functionDefinition() {
			return GetRuleContexts<FunctionDefinitionContext>();
		}
		public FunctionDefinitionContext functionDefinition(int i) {
			return GetRuleContext<FunctionDefinitionContext>(i);
		}
		public FunctionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFunctionBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFunctionBlock(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBlockContext functionBlock() {
		FunctionBlockContext _localctx = new FunctionBlockContext(Context, State);
		EnterRule(_localctx, 18, RULE_functionBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229; Match(T_LEFT_CURLY);
			State = 235;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T_EXPORT || _la==T_LEFT_BRACKET || _la==IDENT) {
				{
				State = 233;
				switch (TokenStream.La(1)) {
				case T_LEFT_BRACKET:
					{
					State = 230; variableBlock();
					}
					break;
				case T_EXPORT:
					{
					State = 231; exportDefinition();
					}
					break;
				case IDENT:
					{
					State = 232; functionDefinition();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 237;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 238; Match(T_RIGHT_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVariableContext : ParserRuleContext {
		public VariableDeclareContext variableDeclare() {
			return GetRuleContext<VariableDeclareContext>(0);
		}
		public GlobalVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterGlobalVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitGlobalVariable(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVariableContext globalVariable() {
		GlobalVariableContext _localctx = new GlobalVariableContext(Context, State);
		EnterRule(_localctx, 20, RULE_globalVariable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241;
			_la = TokenStream.La(1);
			if (_la==T_CONST) {
				{
				State = 240; Match(T_CONST);
				}
			}

			State = 243; variableDeclare();
			State = 244; Match(T_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SequenceBlockContext : ParserRuleContext {
		public SequenceNameContext sequenceName() {
			return GetRuleContext<SequenceNameContext>(0);
		}
		public SequenceBodyContext sequenceBody() {
			return GetRuleContext<SequenceBodyContext>(0);
		}
		public SequenceBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequenceBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterSequenceBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitSequenceBlock(this);
		}
	}

	[RuleVersion(0)]
	public SequenceBlockContext sequenceBlock() {
		SequenceBlockContext _localctx = new SequenceBlockContext(Context, State);
		EnterRule(_localctx, 22, RULE_sequenceBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246; Match(T_SEQUENCE);
			State = 247; sequenceName();
			State = 248; sequenceBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SequenceNameContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(ZScriptParser.IDENT, 0); }
		public SequenceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequenceName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterSequenceName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitSequenceName(this);
		}
	}

	[RuleVersion(0)]
	public SequenceNameContext sequenceName() {
		SequenceNameContext _localctx = new SequenceNameContext(Context, State);
		EnterRule(_localctx, 24, RULE_sequenceName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250; Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SequenceBodyContext : ParserRuleContext {
		public ObjectFieldContext[] objectField() {
			return GetRuleContexts<ObjectFieldContext>();
		}
		public ObjectFieldContext objectField(int i) {
			return GetRuleContext<ObjectFieldContext>(i);
		}
		public SequenceFrameContext[] sequenceFrame() {
			return GetRuleContexts<SequenceFrameContext>();
		}
		public SequenceFrameContext sequenceFrame(int i) {
			return GetRuleContext<SequenceFrameContext>(i);
		}
		public SequenceFrameChangeContext[] sequenceFrameChange() {
			return GetRuleContexts<SequenceFrameChangeContext>();
		}
		public SequenceFrameChangeContext sequenceFrameChange(int i) {
			return GetRuleContext<SequenceFrameChangeContext>(i);
		}
		public SequenceBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequenceBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterSequenceBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitSequenceBody(this);
		}
	}

	[RuleVersion(0)]
	public SequenceBodyContext sequenceBody() {
		SequenceBodyContext _localctx = new SequenceBodyContext(Context, State);
		EnterRule(_localctx, 26, RULE_sequenceBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252; Match(T_LEFT_BRACKET);
			State = 258;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T_VAR) | (1L << T_LEFT_CURLY) | (1L << INT) | (1L << T_PLUS) | (1L << T_MINUS) | (1L << T_EQUALS))) != 0)) {
				{
				State = 256;
				switch (TokenStream.La(1)) {
				case T_VAR:
					{
					State = 253; objectField();
					}
					break;
				case T_LEFT_CURLY:
				case INT:
				case T_PLUS:
					{
					State = 254; sequenceFrame();
					}
					break;
				case T_MINUS:
				case T_EQUALS:
					{
					State = 255; sequenceFrameChange();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 260;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 261; Match(T_RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SequenceFrameContext : ParserRuleContext {
		public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		public FrameRangeContext[] frameRange() {
			return GetRuleContexts<FrameRangeContext>();
		}
		public FrameRangeContext frameRange(int i) {
			return GetRuleContext<FrameRangeContext>(i);
		}
		public SequenceFrameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequenceFrame; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterSequenceFrame(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitSequenceFrame(this);
		}
	}

	[RuleVersion(0)]
	public SequenceFrameContext sequenceFrame() {
		SequenceFrameContext _localctx = new SequenceFrameContext(Context, State);
		EnterRule(_localctx, 28, RULE_sequenceFrame);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			_la = TokenStream.La(1);
			if (_la==INT || _la==T_PLUS) {
				{
				State = 263; frameRange();
				State = 268;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==T_COMMA) {
					{
					{
					State = 264; Match(T_COMMA);
					State = 265; frameRange();
					}
					}
					State = 270;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			State = 273; blockStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SequenceFrameChangeContext : ParserRuleContext {
		public FrameNumberContext frameNumber() {
			return GetRuleContext<FrameNumberContext>(0);
		}
		public SequenceFrameChangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequenceFrameChange; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterSequenceFrameChange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitSequenceFrameChange(this);
		}
	}

	[RuleVersion(0)]
	public SequenceFrameChangeContext sequenceFrameChange() {
		SequenceFrameChangeContext _localctx = new SequenceFrameChangeContext(Context, State);
		EnterRule(_localctx, 30, RULE_sequenceFrameChange);
		try {
			State = 279;
			switch (TokenStream.La(1)) {
			case T_EQUALS:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 275; Match(T_EQUALS);
				State = 276; frameNumber();
				}
				}
				break;
			case T_MINUS:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 277; Match(T_MINUS);
				State = 278; frameNumber();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameRangeContext : ParserRuleContext {
		public FrameRangeElementContext[] frameRangeElement() {
			return GetRuleContexts<FrameRangeElementContext>();
		}
		public FrameRangeElementContext frameRangeElement(int i) {
			return GetRuleContext<FrameRangeElementContext>(i);
		}
		public FrameRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameRange; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFrameRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFrameRange(this);
		}
	}

	[RuleVersion(0)]
	public FrameRangeContext frameRange() {
		FrameRangeContext _localctx = new FrameRangeContext(Context, State);
		EnterRule(_localctx, 32, RULE_frameRange);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 281; frameRangeElement();
			State = 286;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 282; Match(T_COMMA);
					State = 283; frameRangeElement();
					}
					} 
				}
				State = 288;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameRangeElementContext : ParserRuleContext {
		public FrameNumberContext[] frameNumber() {
			return GetRuleContexts<FrameNumberContext>();
		}
		public FrameNumberContext frameNumber(int i) {
			return GetRuleContext<FrameNumberContext>(i);
		}
		public FrameRangeElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameRangeElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFrameRangeElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFrameRangeElement(this);
		}
	}

	[RuleVersion(0)]
	public FrameRangeElementContext frameRangeElement() {
		FrameRangeElementContext _localctx = new FrameRangeElementContext(Context, State);
		EnterRule(_localctx, 34, RULE_frameRangeElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290;
			_la = TokenStream.La(1);
			if (_la==T_PLUS) {
				{
				State = 289; Match(T_PLUS);
				}
			}

			State = 292; frameNumber();
			State = 295;
			_la = TokenStream.La(1);
			if (_la==T_MINUS) {
				{
				State = 293; Match(T_MINUS);
				State = 294; frameNumber();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameNumberContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(ZScriptParser.INT, 0); }
		public FrameNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFrameNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFrameNumber(this);
		}
	}

	[RuleVersion(0)]
	public FrameNumberContext frameNumber() {
		FrameNumberContext _localctx = new FrameNumberContext(Context, State);
		EnterRule(_localctx, 36, RULE_frameNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297; Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		public FunctionArgumentsContext functionArguments() {
			return GetRuleContext<FunctionArgumentsContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public FunctionTriggersContext functionTriggers() {
			return GetRuleContext<FunctionTriggersContext>(0);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFunctionDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFunctionDefinition(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 38, RULE_functionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299; functionName();
			State = 301;
			_la = TokenStream.La(1);
			if (_la==T_LEFT_PAREN) {
				{
				State = 300; functionArguments();
				}
			}

			State = 304;
			_la = TokenStream.La(1);
			if (_la==T_DOUBLE_COLON) {
				{
				State = 303; returnType();
				}
			}

			State = 307;
			_la = TokenStream.La(1);
			if (_la==T_EQUALS) {
				{
				State = 306; functionTriggers();
				}
			}

			State = 309; blockStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportDefinitionContext : ParserRuleContext {
		public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		public FunctionArgumentsContext functionArguments() {
			return GetRuleContext<FunctionArgumentsContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public ExportDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterExportDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitExportDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ExportDefinitionContext exportDefinition() {
		ExportDefinitionContext _localctx = new ExportDefinitionContext(Context, State);
		EnterRule(_localctx, 40, RULE_exportDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311; Match(T_EXPORT);
			State = 312; functionName();
			State = 314;
			_la = TokenStream.La(1);
			if (_la==T_LEFT_PAREN) {
				{
				State = 313; functionArguments();
				}
			}

			State = 317;
			_la = TokenStream.La(1);
			if (_la==T_DOUBLE_COLON) {
				{
				State = 316; returnType();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionNameContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(ZScriptParser.IDENT, 0); }
		public FunctionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFunctionName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFunctionName(this);
		}
	}

	[RuleVersion(0)]
	public FunctionNameContext functionName() {
		FunctionNameContext _localctx = new FunctionNameContext(Context, State);
		EnterRule(_localctx, 42, RULE_functionName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319; Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionArgumentsContext : ParserRuleContext {
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public FunctionArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFunctionArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFunctionArguments(this);
		}
	}

	[RuleVersion(0)]
	public FunctionArgumentsContext functionArguments() {
		FunctionArgumentsContext _localctx = new FunctionArgumentsContext(Context, State);
		EnterRule(_localctx, 44, RULE_functionArguments);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321; Match(T_LEFT_PAREN);
			State = 322; argumentList();
			State = 323; Match(T_RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public FunctionArgContext[] functionArg() {
			return GetRuleContexts<FunctionArgContext>();
		}
		public FunctionArgContext functionArg(int i) {
			return GetRuleContext<FunctionArgContext>(i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 46, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333;
			_la = TokenStream.La(1);
			if (_la==IDENT) {
				{
				State = 325; functionArg();
				State = 330;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==T_COMMA) {
					{
					{
					State = 326; Match(T_COMMA);
					State = 327; functionArg();
					}
					}
					State = 332;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnTypeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterReturnType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitReturnType(this);
		}
	}

	[RuleVersion(0)]
	public ReturnTypeContext returnType() {
		ReturnTypeContext _localctx = new ReturnTypeContext(Context, State);
		EnterRule(_localctx, 48, RULE_returnType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335; Match(T_DOUBLE_COLON);
			State = 336; type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionArgContext : ParserRuleContext {
		public ArgumentNameContext argumentName() {
			return GetRuleContext<ArgumentNameContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ConstantAtomContext constantAtom() {
			return GetRuleContext<ConstantAtomContext>(0);
		}
		public FunctionArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFunctionArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFunctionArg(this);
		}
	}

	[RuleVersion(0)]
	public FunctionArgContext functionArg() {
		FunctionArgContext _localctx = new FunctionArgContext(Context, State);
		EnterRule(_localctx, 50, RULE_functionArg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 338; argumentName();
			State = 341;
			_la = TokenStream.La(1);
			if (_la==T_DOUBLE_COLON) {
				{
				State = 339; Match(T_DOUBLE_COLON);
				State = 340; type();
				}
			}

			State = 346;
			switch (TokenStream.La(1)) {
			case T_TRIPPLE_DOT:
				{
				State = 343; Match(T_TRIPPLE_DOT);
				}
				break;
			case T_EQUALS:
				{
				{
				State = 344; Match(T_EQUALS);
				State = 345; constantAtom();
				}
				}
				break;
			case T_RIGHT_PAREN:
			case T_COMMA:
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentNameContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(ZScriptParser.IDENT, 0); }
		public ArgumentNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterArgumentName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitArgumentName(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentNameContext argumentName() {
		ArgumentNameContext _localctx = new ArgumentNameContext(Context, State);
		EnterRule(_localctx, 52, RULE_argumentName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348; Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTriggersContext : ParserRuleContext {
		public FunctionTriggerContext[] functionTrigger() {
			return GetRuleContexts<FunctionTriggerContext>();
		}
		public FunctionTriggerContext functionTrigger(int i) {
			return GetRuleContext<FunctionTriggerContext>(i);
		}
		public FunctionTriggersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionTriggers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFunctionTriggers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFunctionTriggers(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTriggersContext functionTriggers() {
		FunctionTriggersContext _localctx = new FunctionTriggersContext(Context, State);
		EnterRule(_localctx, 54, RULE_functionTriggers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 350; Match(T_EQUALS);
			State = 351; functionTrigger();
			State = 356;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T_COMMA) {
				{
				{
				State = 352; Match(T_COMMA);
				State = 353; functionTrigger();
				}
				}
				State = 358;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTriggerArgsContext : ParserRuleContext {
		public ConstantAtomContext[] constantAtom() {
			return GetRuleContexts<ConstantAtomContext>();
		}
		public ConstantAtomContext constantAtom(int i) {
			return GetRuleContext<ConstantAtomContext>(i);
		}
		public FunctionTriggerArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionTriggerArgs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFunctionTriggerArgs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFunctionTriggerArgs(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTriggerArgsContext functionTriggerArgs() {
		FunctionTriggerArgsContext _localctx = new FunctionTriggerArgsContext(Context, State);
		EnterRule(_localctx, 56, RULE_functionTriggerArgs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 359; Match(T_LEFT_PAREN);
			State = 360; constantAtom();
			State = 365;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T_COMMA) {
				{
				{
				State = 361; Match(T_COMMA);
				State = 362; constantAtom();
				}
				}
				State = 367;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 368; Match(T_RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTriggerContext : ParserRuleContext {
		public ConstantAtomContext constantAtom() {
			return GetRuleContext<ConstantAtomContext>(0);
		}
		public FunctionTriggerArgsContext functionTriggerArgs() {
			return GetRuleContext<FunctionTriggerArgsContext>(0);
		}
		public FunctionTriggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionTrigger; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFunctionTrigger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFunctionTrigger(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTriggerContext functionTrigger() {
		FunctionTriggerContext _localctx = new FunctionTriggerContext(Context, State);
		EnterRule(_localctx, 58, RULE_functionTrigger);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370; constantAtom();
			State = 372;
			_la = TokenStream.La(1);
			if (_la==T_LEFT_PAREN) {
				{
				State = 371; functionTriggerArgs();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public ValueDeclContext valueDecl() {
			return GetRuleContext<ValueDeclContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 60, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 388;
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				{
				{
				State = 376;
				switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
				case 1:
					{
					State = 374; expression(0);
					}
					break;
				case 2:
					{
					State = 375; assignmentExpression();
					}
					break;
				}
				State = 378; Match(T_SEMICOLON);
				}
				}
				break;
			case 2:
				{
				State = 380; blockStatement();
				}
				break;
			case 3:
				{
				State = 381; Match(T_SEMICOLON);
				}
				break;
			case 4:
				{
				State = 382; ifStatement();
				}
				break;
			case 5:
				{
				State = 383; whileStatement();
				}
				break;
			case 6:
				{
				State = 384; forStatement();
				}
				break;
			case 7:
				{
				State = 385; switchStatement();
				}
				break;
			case 8:
				{
				State = 386; returnStatement();
				}
				break;
			case 9:
				{
				State = 387; valueDecl();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(Context, State);
		EnterRule(_localctx, 62, RULE_blockStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 390; Match(T_LEFT_CURLY);
			State = 394;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << StringLiteral) | (1L << T_VAR) | (1L << T_LET) | (1L << T_NEW) | (1L << T_IF) | (1L << T_WHILE) | (1L << T_FOR) | (1L << T_SWITCH) | (1L << T_RETURN) | (1L << T_LEFT_PAREN) | (1L << T_LEFT_BRACKET) | (1L << T_LEFT_CURLY) | (1L << INT) | (1L << HEX) | (1L << BINARY) | (1L << FLOAT) | (1L << T_FALSE) | (1L << T_TRUE) | (1L << T_NULL) | (1L << T_SEMICOLON) | (1L << T_NOT) | (1L << T_PLUS) | (1L << T_MINUS) | (1L << T_INCREMENT) | (1L << T_DECREMENT))) != 0) || _la==IDENT) {
				{
				{
				State = 391; statement();
				}
				}
				State = 396;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 397; Match(T_RIGHT_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 64, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 399; Match(T_IF);
			State = 400; Match(T_LEFT_PAREN);
			State = 401; expression(0);
			State = 402; Match(T_RIGHT_PAREN);
			State = 403; statement();
			State = 405;
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				State = 404; elseStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 66, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 407; Match(T_ELSE);
			{
			State = 408; statement();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SwitchBlockContext switchBlock() {
			return GetRuleContext<SwitchBlockContext>(0);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 68, RULE_switchStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410; Match(T_SWITCH);
			State = 411; Match(T_LEFT_PAREN);
			State = 412; expression(0);
			State = 413; Match(T_RIGHT_PAREN);
			State = 414; switchBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBlockContext : ParserRuleContext {
		public CaseBlockContext[] caseBlock() {
			return GetRuleContexts<CaseBlockContext>();
		}
		public CaseBlockContext caseBlock(int i) {
			return GetRuleContext<CaseBlockContext>(i);
		}
		public DefaultBlockContext[] defaultBlock() {
			return GetRuleContexts<DefaultBlockContext>();
		}
		public DefaultBlockContext defaultBlock(int i) {
			return GetRuleContext<DefaultBlockContext>(i);
		}
		public SwitchBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterSwitchBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitSwitchBlock(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBlockContext switchBlock() {
		SwitchBlockContext _localctx = new SwitchBlockContext(Context, State);
		EnterRule(_localctx, 70, RULE_switchBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416; Match(T_LEFT_CURLY);
			State = 421;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T_CASE || _la==T_DEFAULT) {
				{
				State = 419;
				switch (TokenStream.La(1)) {
				case T_CASE:
					{
					State = 417; caseBlock();
					}
					break;
				case T_DEFAULT:
					{
					State = 418; defaultBlock();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 423;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 424; Match(T_RIGHT_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseBlockContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CaseBlockContext caseBlock() {
			return GetRuleContext<CaseBlockContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public CaseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterCaseBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitCaseBlock(this);
		}
	}

	[RuleVersion(0)]
	public CaseBlockContext caseBlock() {
		CaseBlockContext _localctx = new CaseBlockContext(Context, State);
		EnterRule(_localctx, 72, RULE_caseBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 426; Match(T_CASE);
			State = 427; expression(0);
			State = 428; Match(T_DOUBLE_COLON);
			State = 434;
			switch (TokenStream.La(1)) {
			case T_CASE:
				{
				{
				State = 429; caseBlock();
				}
				}
				break;
			case StringLiteral:
			case T_VAR:
			case T_LET:
			case T_NEW:
			case T_IF:
			case T_WHILE:
			case T_FOR:
			case T_SWITCH:
			case T_RETURN:
			case T_LEFT_PAREN:
			case T_LEFT_BRACKET:
			case T_LEFT_CURLY:
			case INT:
			case HEX:
			case BINARY:
			case FLOAT:
			case T_FALSE:
			case T_TRUE:
			case T_NULL:
			case T_SEMICOLON:
			case T_NOT:
			case T_PLUS:
			case T_MINUS:
			case T_INCREMENT:
			case T_DECREMENT:
			case IDENT:
				{
				{
				State = 430; statement();
				State = 431; Match(T_BREAK);
				State = 432; Match(T_SEMICOLON);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultBlockContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public DefaultBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterDefaultBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitDefaultBlock(this);
		}
	}

	[RuleVersion(0)]
	public DefaultBlockContext defaultBlock() {
		DefaultBlockContext _localctx = new DefaultBlockContext(Context, State);
		EnterRule(_localctx, 74, RULE_defaultBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 436; Match(T_DEFAULT);
			State = 437; Match(T_DOUBLE_COLON);
			State = 438; statement();
			State = 439; Match(T_BREAK);
			State = 440; Match(T_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 76, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442; Match(T_WHILE);
			State = 443; Match(T_LEFT_PAREN);
			State = 444; expression(0);
			State = 445; Match(T_RIGHT_PAREN);
			State = 446; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ForInitContext forInit() {
			return GetRuleContext<ForInitContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 78, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 448; Match(T_FOR);
			State = 449; Match(T_LEFT_PAREN);
			State = 451;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << StringLiteral) | (1L << T_VAR) | (1L << T_NEW) | (1L << T_LEFT_PAREN) | (1L << T_LEFT_BRACKET) | (1L << T_LEFT_CURLY) | (1L << INT) | (1L << HEX) | (1L << BINARY) | (1L << FLOAT) | (1L << T_FALSE) | (1L << T_TRUE) | (1L << T_NULL) | (1L << T_NOT) | (1L << T_PLUS) | (1L << T_MINUS) | (1L << T_INCREMENT) | (1L << T_DECREMENT))) != 0) || _la==IDENT) {
				{
				State = 450; forInit();
				}
			}

			State = 453; Match(T_SEMICOLON);
			State = 455;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << StringLiteral) | (1L << T_NEW) | (1L << T_LEFT_PAREN) | (1L << T_LEFT_BRACKET) | (1L << T_LEFT_CURLY) | (1L << INT) | (1L << HEX) | (1L << BINARY) | (1L << FLOAT) | (1L << T_FALSE) | (1L << T_TRUE) | (1L << T_NULL) | (1L << T_NOT) | (1L << T_PLUS) | (1L << T_MINUS) | (1L << T_INCREMENT) | (1L << T_DECREMENT))) != 0) || _la==IDENT) {
				{
				State = 454; expression(0);
				}
			}

			State = 457; Match(T_SEMICOLON);
			State = 459;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << StringLiteral) | (1L << T_NEW) | (1L << T_LEFT_PAREN) | (1L << T_LEFT_BRACKET) | (1L << T_LEFT_CURLY) | (1L << INT) | (1L << HEX) | (1L << BINARY) | (1L << FLOAT) | (1L << T_FALSE) | (1L << T_TRUE) | (1L << T_NULL) | (1L << T_NOT) | (1L << T_PLUS) | (1L << T_MINUS) | (1L << T_INCREMENT) | (1L << T_DECREMENT))) != 0) || _la==IDENT) {
				{
				State = 458; expression(0);
				}
			}

			State = 461; Match(T_RIGHT_PAREN);
			State = 462; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitContext : ParserRuleContext {
		public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterForInit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitForInit(this);
		}
	}

	[RuleVersion(0)]
	public ForInitContext forInit() {
		ForInitContext _localctx = new ForInitContext(Context, State);
		EnterRule(_localctx, 80, RULE_forInit);
		try {
			State = 466;
			switch (TokenStream.La(1)) {
			case T_VAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 464; varDecl();
				}
				break;
			case StringLiteral:
			case T_NEW:
			case T_LEFT_PAREN:
			case T_LEFT_BRACKET:
			case T_LEFT_CURLY:
			case INT:
			case HEX:
			case BINARY:
			case FLOAT:
			case T_FALSE:
			case T_TRUE:
			case T_NULL:
			case T_NOT:
			case T_PLUS:
			case T_MINUS:
			case T_INCREMENT:
			case T_DECREMENT:
			case IDENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 465; expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 82, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 468; Match(T_RETURN);
			State = 470;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << StringLiteral) | (1L << T_NEW) | (1L << T_LEFT_PAREN) | (1L << T_LEFT_BRACKET) | (1L << T_LEFT_CURLY) | (1L << INT) | (1L << HEX) | (1L << BINARY) | (1L << FLOAT) | (1L << T_FALSE) | (1L << T_TRUE) | (1L << T_NULL) | (1L << T_NOT) | (1L << T_PLUS) | (1L << T_MINUS) | (1L << T_INCREMENT) | (1L << T_DECREMENT))) != 0) || _la==IDENT) {
				{
				State = 469; expression(0);
				}
			}

			State = 472; Match(T_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueDeclContext : ParserRuleContext {
		public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		public LetDeclContext letDecl() {
			return GetRuleContext<LetDeclContext>(0);
		}
		public ValueDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterValueDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitValueDecl(this);
		}
	}

	[RuleVersion(0)]
	public ValueDeclContext valueDecl() {
		ValueDeclContext _localctx = new ValueDeclContext(Context, State);
		EnterRule(_localctx, 84, RULE_valueDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 476;
			switch (TokenStream.La(1)) {
			case T_VAR:
				{
				State = 474; varDecl();
				}
				break;
			case T_LET:
				{
				State = 475; letDecl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 478; Match(T_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		public VariableDeclareContext variableDeclare() {
			return GetRuleContext<VariableDeclareContext>(0);
		}
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterVarDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitVarDecl(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 86, RULE_varDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 480; Match(T_VAR);
			State = 481; variableDeclare();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetDeclContext : ParserRuleContext {
		public ConstantDeclareContext constantDeclare() {
			return GetRuleContext<ConstantDeclareContext>(0);
		}
		public LetDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterLetDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitLetDecl(this);
		}
	}

	[RuleVersion(0)]
	public LetDeclContext letDecl() {
		LetDeclContext _localctx = new LetDeclContext(Context, State);
		EnterRule(_localctx, 88, RULE_letDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 483; Match(T_LET);
			State = 484; constantDeclare();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclareContext : ParserRuleContext {
		public ValueHolderDeclContext valueHolderDecl() {
			return GetRuleContext<ValueHolderDeclContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclare; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterVariableDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitVariableDeclare(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclareContext variableDeclare() {
		VariableDeclareContext _localctx = new VariableDeclareContext(Context, State);
		EnterRule(_localctx, 90, RULE_variableDeclare);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 486; valueHolderDecl();
			State = 489;
			_la = TokenStream.La(1);
			if (_la==T_EQUALS) {
				{
				State = 487; Match(T_EQUALS);
				State = 488; expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantDeclareContext : ParserRuleContext {
		public ValueHolderDeclContext valueHolderDecl() {
			return GetRuleContext<ValueHolderDeclContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConstantDeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantDeclare; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterConstantDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitConstantDeclare(this);
		}
	}

	[RuleVersion(0)]
	public ConstantDeclareContext constantDeclare() {
		ConstantDeclareContext _localctx = new ConstantDeclareContext(Context, State);
		EnterRule(_localctx, 92, RULE_constantDeclare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 491; valueHolderDecl();
			State = 492; Match(T_EQUALS);
			State = 493; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueHolderDeclContext : ParserRuleContext {
		public ValueHolderNameContext valueHolderName() {
			return GetRuleContext<ValueHolderNameContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ValueHolderDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueHolderDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterValueHolderDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitValueHolderDecl(this);
		}
	}

	[RuleVersion(0)]
	public ValueHolderDeclContext valueHolderDecl() {
		ValueHolderDeclContext _localctx = new ValueHolderDeclContext(Context, State);
		EnterRule(_localctx, 94, RULE_valueHolderDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 495; valueHolderName();
			State = 498;
			_la = TokenStream.La(1);
			if (_la==T_DOUBLE_COLON) {
				{
				State = 496; Match(T_DOUBLE_COLON);
				State = 497; type();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueHolderNameContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(ZScriptParser.IDENT, 0); }
		public ValueHolderNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueHolderName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterValueHolderName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitValueHolderName(this);
		}
	}

	[RuleVersion(0)]
	public ValueHolderNameContext valueHolderName() {
		ValueHolderNameContext _localctx = new ValueHolderNameContext(Context, State);
		EnterRule(_localctx, 96, RULE_valueHolderName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 500; Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ClosureTypeContext closureType() {
			return GetRuleContext<ClosureTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 98, RULE_type);
		try {
			State = 505;
			switch (TokenStream.La(1)) {
			case T_OBJECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 502; Match(T_OBJECT);
				}
				break;
			case IDENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 503; typeName();
				}
				break;
			case T_LEFT_PAREN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 504; closureType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(ZScriptParser.IDENT, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 100, RULE_typeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 507; Match(IDENT);
			State = 510;
			_la = TokenStream.La(1);
			if (_la==T_PERIOD) {
				{
				State = 508; Match(T_PERIOD);
				State = 509; typeName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClosureTypeContext : ParserRuleContext {
		public TypeListContext typeList() {
			return GetRuleContext<TypeListContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ClosureTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closureType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterClosureType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitClosureType(this);
		}
	}

	[RuleVersion(0)]
	public ClosureTypeContext closureType() {
		ClosureTypeContext _localctx = new ClosureTypeContext(Context, State);
		EnterRule(_localctx, 102, RULE_closureType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 512; Match(T_LEFT_PAREN);
			State = 514;
			_la = TokenStream.La(1);
			if (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (T_OBJECT - 10)) | (1L << (T_LEFT_PAREN - 10)) | (1L << (IDENT - 10)))) != 0)) {
				{
				State = 513; typeList();
				}
			}

			State = 516; Match(T_CLOSURE_RETURN);
			State = 518;
			_la = TokenStream.La(1);
			if (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (T_OBJECT - 10)) | (1L << (T_LEFT_PAREN - 10)) | (1L << (IDENT - 10)))) != 0)) {
				{
				State = 517; type();
				}
			}

			State = 520; Match(T_RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeListContext : ParserRuleContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public TypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterTypeList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitTypeList(this);
		}
	}

	[RuleVersion(0)]
	public TypeListContext typeList() {
		TypeListContext _localctx = new TypeListContext(Context, State);
		EnterRule(_localctx, 104, RULE_typeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 522; type();
			State = 527;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T_COMMA) {
				{
				{
				State = 523; Match(T_COMMA);
				State = 524; type();
				}
				}
				State = 529;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public PrefixOperatorContext prefixOperator() {
			return GetRuleContext<PrefixOperatorContext>(0);
		}
		public LeftValueContext leftValue() {
			return GetRuleContext<LeftValueContext>(0);
		}
		public PostfixOperatorContext postfixOperator() {
			return GetRuleContext<PostfixOperatorContext>(0);
		}
		public ClosureExpressionContext closureExpression() {
			return GetRuleContext<ClosureExpressionContext>(0);
		}
		public ITerminalNode IDENT() { return GetToken(ZScriptParser.IDENT, 0); }
		public ValueAccessContext valueAccess() {
			return GetRuleContext<ValueAccessContext>(0);
		}
		public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		public ObjectAccessContext objectAccess() {
			return GetRuleContext<ObjectAccessContext>(0);
		}
		public NewExpressionContext newExpression() {
			return GetRuleContext<NewExpressionContext>(0);
		}
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public ArrayDeclarationContext arrayDeclaration() {
			return GetRuleContext<ArrayDeclarationContext>(0);
		}
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public ConstantAtomContext constantAtom() {
			return GetRuleContext<ConstantAtomContext>(0);
		}
		public MultOpContext multOp() {
			return GetRuleContext<MultOpContext>(0);
		}
		public AdditionOpContext additionOp() {
			return GetRuleContext<AdditionOpContext>(0);
		}
		public BitwiseAndXOrOpContext bitwiseAndXOrOp() {
			return GetRuleContext<BitwiseAndXOrOpContext>(0);
		}
		public BitwiseOrOpContext bitwiseOrOp() {
			return GetRuleContext<BitwiseOrOpContext>(0);
		}
		public ComparisionOpContext comparisionOp() {
			return GetRuleContext<ComparisionOpContext>(0);
		}
		public LogicalOpContext logicalOp() {
			return GetRuleContext<LogicalOpContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 106;
		EnterRecursionRule(_localctx, 106, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 559;
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				{
				State = 531; Match(T_LEFT_PAREN);
				State = 532; expression(0);
				State = 533; Match(T_RIGHT_PAREN);
				}
				break;
			case 2:
				{
				State = 535; assignmentExpression();
				}
				break;
			case 3:
				{
				State = 536; prefixOperator();
				State = 537; leftValue();
				}
				break;
			case 4:
				{
				State = 539; leftValue();
				State = 540; postfixOperator();
				}
				break;
			case 5:
				{
				State = 542; closureExpression();
				}
				break;
			case 6:
				{
				State = 543; Match(IDENT);
				State = 545;
				switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
				case 1:
					{
					State = 544; valueAccess();
					}
					break;
				}
				}
				break;
			case 7:
				{
				State = 547; @object();
				State = 549;
				switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
				case 1:
					{
					State = 548; objectAccess();
					}
					break;
				}
				}
				break;
			case 8:
				{
				State = 551; newExpression();
				}
				break;
			case 9:
				{
				State = 552; unaryExpression();
				}
				break;
			case 10:
				{
				State = 553; arrayDeclaration();
				State = 555;
				switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
				case 1:
					{
					State = 554; valueAccess();
					}
					break;
				}
				}
				break;
			case 11:
				{
				State = 557; atom();
				}
				break;
			case 12:
				{
				State = 558; constantAtom();
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 587;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 585;
					switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 561;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 562; multOp();
						State = 563; expression(9);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 565;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 566; additionOp();
						State = 567; expression(8);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 569;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 570; bitwiseAndXOrOp();
						State = 571; expression(7);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 573;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 574; bitwiseOrOp();
						State = 575; expression(6);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 577;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 578; comparisionOp();
						State = 579; expression(5);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 581;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 582; logicalOp();
						State = 583; expression(4);
						}
						break;
					}
					} 
				}
				State = 589;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultOpContext : ParserRuleContext {
		public MultOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterMultOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitMultOp(this);
		}
	}

	[RuleVersion(0)]
	public MultOpContext multOp() {
		MultOpContext _localctx = new MultOpContext(Context, State);
		EnterRule(_localctx, 108, RULE_multOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 590;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T_MULT) | (1L << T_DIV) | (1L << T_MOD))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditionOpContext : ParserRuleContext {
		public AdditionOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additionOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterAdditionOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitAdditionOp(this);
		}
	}

	[RuleVersion(0)]
	public AdditionOpContext additionOp() {
		AdditionOpContext _localctx = new AdditionOpContext(Context, State);
		EnterRule(_localctx, 110, RULE_additionOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 592;
			_la = TokenStream.La(1);
			if ( !(_la==T_PLUS || _la==T_MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitwiseAndXOrOpContext : ParserRuleContext {
		public BitwiseAndXOrOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwiseAndXOrOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterBitwiseAndXOrOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitBitwiseAndXOrOp(this);
		}
	}

	[RuleVersion(0)]
	public BitwiseAndXOrOpContext bitwiseAndXOrOp() {
		BitwiseAndXOrOpContext _localctx = new BitwiseAndXOrOpContext(Context, State);
		EnterRule(_localctx, 112, RULE_bitwiseAndXOrOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 594;
			_la = TokenStream.La(1);
			if ( !(_la==T_BITWISE_AND || _la==T_BITWISE_XOR) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitwiseOrOpContext : ParserRuleContext {
		public BitwiseOrOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwiseOrOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterBitwiseOrOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitBitwiseOrOp(this);
		}
	}

	[RuleVersion(0)]
	public BitwiseOrOpContext bitwiseOrOp() {
		BitwiseOrOpContext _localctx = new BitwiseOrOpContext(Context, State);
		EnterRule(_localctx, 114, RULE_bitwiseOrOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 596; Match(T_BITWISE_OR);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisionOpContext : ParserRuleContext {
		public ComparisionOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisionOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterComparisionOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitComparisionOp(this);
		}
	}

	[RuleVersion(0)]
	public ComparisionOpContext comparisionOp() {
		ComparisionOpContext _localctx = new ComparisionOpContext(Context, State);
		EnterRule(_localctx, 116, RULE_comparisionOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 598;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T_BITWISE_OR) | (1L << T_EQUALITY) | (1L << T_UNEQUALITY) | (1L << T_MORE_THAN_OR_EQUALS) | (1L << T_LESS_THAN_OR_EQUALS) | (1L << T_MORE_THAN) | (1L << T_LESS_THAN))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOpContext : ParserRuleContext {
		public LogicalOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterLogicalOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitLogicalOp(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOpContext logicalOp() {
		LogicalOpContext _localctx = new LogicalOpContext(Context, State);
		EnterRule(_localctx, 118, RULE_logicalOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 600;
			_la = TokenStream.La(1);
			if ( !(_la==T_LOGICAL_AND || _la==T_LOGICAL_OR) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		public LeftValueContext leftValue() {
			return GetRuleContext<LeftValueContext>(0);
		}
		public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 120, RULE_assignmentExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 602; leftValue();
			State = 603; assignmentOperator();
			State = 604; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewExpressionContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public FuncCallArgumentsContext funcCallArguments() {
			return GetRuleContext<FuncCallArgumentsContext>(0);
		}
		public NewExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterNewExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitNewExpression(this);
		}
	}

	[RuleVersion(0)]
	public NewExpressionContext newExpression() {
		NewExpressionContext _localctx = new NewExpressionContext(Context, State);
		EnterRule(_localctx, 122, RULE_newExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 606; Match(T_NEW);
			State = 607; typeName();
			State = 608; funcCallArguments();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClosureExpressionContext : ParserRuleContext {
		public FunctionArgumentsContext functionArguments() {
			return GetRuleContext<FunctionArgumentsContext>(0);
		}
		public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public ClosureExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closureExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterClosureExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitClosureExpression(this);
		}
	}

	[RuleVersion(0)]
	public ClosureExpressionContext closureExpression() {
		ClosureExpressionContext _localctx = new ClosureExpressionContext(Context, State);
		EnterRule(_localctx, 124, RULE_closureExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 610; functionArguments();
			State = 612;
			_la = TokenStream.La(1);
			if (_la==T_DOUBLE_COLON) {
				{
				State = 611; returnType();
				}
			}

			State = 614; Match(T_CLOSURE_CALL);
			State = 615; blockStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 126, RULE_unaryExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 617;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T_NOT) | (1L << T_PLUS) | (1L << T_MINUS))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			State = 618; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryOperatorContext : ParserRuleContext {
		public BinaryOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterBinaryOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitBinaryOperator(this);
		}
	}

	[RuleVersion(0)]
	public BinaryOperatorContext binaryOperator() {
		BinaryOperatorContext _localctx = new BinaryOperatorContext(Context, State);
		EnterRule(_localctx, 128, RULE_binaryOperator);
		int _la;
		try {
			State = 626;
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 620;
				_la = TokenStream.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T_MULT) | (1L << T_DIV) | (1L << T_MOD))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 621;
				_la = TokenStream.La(1);
				if ( !(_la==T_PLUS || _la==T_MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 622;
				_la = TokenStream.La(1);
				if ( !(_la==T_BITWISE_AND || _la==T_BITWISE_XOR) ) {
				ErrorHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 623; Match(T_BITWISE_OR);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 624;
				_la = TokenStream.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T_BITWISE_OR) | (1L << T_EQUALITY) | (1L << T_UNEQUALITY) | (1L << T_MORE_THAN_OR_EQUALS) | (1L << T_LESS_THAN_OR_EQUALS) | (1L << T_MORE_THAN) | (1L << T_LESS_THAN))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 625;
				_la = TokenStream.La(1);
				if ( !(_la==T_LOGICAL_AND || _la==T_LOGICAL_OR) ) {
				ErrorHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefixOperatorContext : ParserRuleContext {
		public PrefixOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterPrefixOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitPrefixOperator(this);
		}
	}

	[RuleVersion(0)]
	public PrefixOperatorContext prefixOperator() {
		PrefixOperatorContext _localctx = new PrefixOperatorContext(Context, State);
		EnterRule(_localctx, 130, RULE_prefixOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 628;
			_la = TokenStream.La(1);
			if ( !(_la==T_INCREMENT || _la==T_DECREMENT) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixOperatorContext : ParserRuleContext {
		public PostfixOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterPostfixOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitPostfixOperator(this);
		}
	}

	[RuleVersion(0)]
	public PostfixOperatorContext postfixOperator() {
		PostfixOperatorContext _localctx = new PostfixOperatorContext(Context, State);
		EnterRule(_localctx, 132, RULE_postfixOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 630;
			_la = TokenStream.La(1);
			if ( !(_la==T_INCREMENT || _la==T_DECREMENT) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterAssignmentOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitAssignmentOperator(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 134, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 632;
			_la = TokenStream.La(1);
			if ( !(((((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & ((1L << (T_EQUALS - 63)) | (1L << (T_PLUS_EQUALS - 63)) | (1L << (T_MINUS_EQUALS - 63)) | (1L << (T_TIMES_EQUALS - 63)) | (1L << (T_DIV_EQUALS - 63)) | (1L << (T_MOD_EQUALS - 63)) | (1L << (T_XOR_EQUALS - 63)) | (1L << (T_AND_EQUALS - 63)) | (1L << (T_TILDE_EQUALS - 63)) | (1L << (T_OR_EQUALS - 63)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayDeclarationContext : ParserRuleContext {
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ArrayDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterArrayDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitArrayDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ArrayDeclarationContext arrayDeclaration() {
		ArrayDeclarationContext _localctx = new ArrayDeclarationContext(Context, State);
		EnterRule(_localctx, 136, RULE_arrayDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 634; Match(T_LEFT_BRACKET);
			State = 636;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << StringLiteral) | (1L << T_NEW) | (1L << T_LEFT_PAREN) | (1L << T_LEFT_BRACKET) | (1L << T_LEFT_CURLY) | (1L << INT) | (1L << HEX) | (1L << BINARY) | (1L << FLOAT) | (1L << T_FALSE) | (1L << T_TRUE) | (1L << T_NULL) | (1L << T_NOT) | (1L << T_PLUS) | (1L << T_MINUS) | (1L << T_INCREMENT) | (1L << T_DECREMENT))) != 0) || _la==IDENT) {
				{
				State = 635; expressionList();
				}
			}

			State = 638; Match(T_RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncCallArgumentsContext : ParserRuleContext {
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public FuncCallArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcCallArguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFuncCallArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFuncCallArguments(this);
		}
	}

	[RuleVersion(0)]
	public FuncCallArgumentsContext funcCallArguments() {
		FuncCallArgumentsContext _localctx = new FuncCallArgumentsContext(Context, State);
		EnterRule(_localctx, 138, RULE_funcCallArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 640; Match(T_LEFT_PAREN);
			State = 642;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << StringLiteral) | (1L << T_NEW) | (1L << T_LEFT_PAREN) | (1L << T_LEFT_BRACKET) | (1L << T_LEFT_CURLY) | (1L << INT) | (1L << HEX) | (1L << BINARY) | (1L << FLOAT) | (1L << T_FALSE) | (1L << T_TRUE) | (1L << T_NULL) | (1L << T_NOT) | (1L << T_PLUS) | (1L << T_MINUS) | (1L << T_INCREMENT) | (1L << T_DECREMENT))) != 0) || _la==IDENT) {
				{
				State = 641; expressionList();
				}
			}

			State = 644; Match(T_RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 140, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 646; expression(0);
			State = 651;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T_COMMA) {
				{
				{
				State = 647; Match(T_COMMA);
				State = 648; expression(0);
				}
				}
				State = 653;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeftValueContext : ParserRuleContext {
		public MemberNameContext memberName() {
			return GetRuleContext<MemberNameContext>(0);
		}
		public FuncCallArgumentsContext funcCallArguments() {
			return GetRuleContext<FuncCallArgumentsContext>(0);
		}
		public LeftValueAccessContext leftValueAccess() {
			return GetRuleContext<LeftValueAccessContext>(0);
		}
		public LeftValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leftValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterLeftValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitLeftValue(this);
		}
	}

	[RuleVersion(0)]
	public LeftValueContext leftValue() {
		LeftValueContext _localctx = new LeftValueContext(Context, State);
		EnterRule(_localctx, 142, RULE_leftValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 654; memberName();
			State = 659;
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				{
				State = 655; funcCallArguments();
				State = 656; leftValueAccess();
				}
				break;
			case 2:
				{
				State = 658; leftValueAccess();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeftValueAccessContext : ParserRuleContext {
		public LeftValueContext leftValue() {
			return GetRuleContext<LeftValueContext>(0);
		}
		public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		public LeftValueAccessContext leftValueAccess() {
			return GetRuleContext<LeftValueAccessContext>(0);
		}
		public LeftValueAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leftValueAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterLeftValueAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitLeftValueAccess(this);
		}
	}

	[RuleVersion(0)]
	public LeftValueAccessContext leftValueAccess() {
		LeftValueAccessContext _localctx = new LeftValueAccessContext(Context, State);
		EnterRule(_localctx, 144, RULE_leftValueAccess);
		try {
			State = 670;
			switch (TokenStream.La(1)) {
			case T_PERIOD:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 661; Match(T_PERIOD);
				State = 663;
				switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
				case 1:
					{
					State = 662; leftValue();
					}
					break;
				}
				}
				}
				break;
			case T_LEFT_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 665; arrayAccess();
				State = 668;
				switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
				case 1:
					{
					State = 666; leftValue();
					}
					break;
				case 2:
					{
					State = 667; leftValueAccess();
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public FuncCallArgumentsContext funcCallArguments() {
			return GetRuleContext<FuncCallArgumentsContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 146, RULE_functionCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 672; funcCallArguments();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldAccessContext : ParserRuleContext {
		public MemberNameContext memberName() {
			return GetRuleContext<MemberNameContext>(0);
		}
		public FieldAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFieldAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFieldAccess(this);
		}
	}

	[RuleVersion(0)]
	public FieldAccessContext fieldAccess() {
		FieldAccessContext _localctx = new FieldAccessContext(Context, State);
		EnterRule(_localctx, 148, RULE_fieldAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 674; Match(T_PERIOD);
			State = 675; memberName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAccessContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrayAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterArrayAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitArrayAccess(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccessContext arrayAccess() {
		ArrayAccessContext _localctx = new ArrayAccessContext(Context, State);
		EnterRule(_localctx, 150, RULE_arrayAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 677; Match(T_LEFT_BRACKET);
			State = 678; expression(0);
			State = 679; Match(T_RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectAccessContext : ParserRuleContext {
		public FieldAccessContext fieldAccess() {
			return GetRuleContext<FieldAccessContext>(0);
		}
		public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		public ValueAccessContext valueAccess() {
			return GetRuleContext<ValueAccessContext>(0);
		}
		public ObjectAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterObjectAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitObjectAccess(this);
		}
	}

	[RuleVersion(0)]
	public ObjectAccessContext objectAccess() {
		ObjectAccessContext _localctx = new ObjectAccessContext(Context, State);
		EnterRule(_localctx, 152, RULE_objectAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 683;
			switch (TokenStream.La(1)) {
			case T_PERIOD:
				{
				State = 681; fieldAccess();
				}
				break;
			case T_LEFT_BRACKET:
				{
				State = 682; arrayAccess();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 686;
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				{
				State = 685; valueAccess();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueAccessContext : ParserRuleContext {
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FieldAccessContext fieldAccess() {
			return GetRuleContext<FieldAccessContext>(0);
		}
		public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		public ValueAccessContext valueAccess() {
			return GetRuleContext<ValueAccessContext>(0);
		}
		public ValueAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterValueAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitValueAccess(this);
		}
	}

	[RuleVersion(0)]
	public ValueAccessContext valueAccess() {
		ValueAccessContext _localctx = new ValueAccessContext(Context, State);
		EnterRule(_localctx, 154, RULE_valueAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 691;
			switch (TokenStream.La(1)) {
			case T_LEFT_PAREN:
				{
				State = 688; functionCall();
				}
				break;
			case T_PERIOD:
				{
				State = 689; fieldAccess();
				}
				break;
			case T_LEFT_BRACKET:
				{
				State = 690; arrayAccess();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 694;
			switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
			case 1:
				{
				State = 693; valueAccess();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberNameContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(ZScriptParser.IDENT, 0); }
		public MemberNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterMemberName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitMemberName(this);
		}
	}

	[RuleVersion(0)]
	public MemberNameContext memberName() {
		MemberNameContext _localctx = new MemberNameContext(Context, State);
		EnterRule(_localctx, 156, RULE_memberName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 696; Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectContext : ParserRuleContext {
		public ObjectEntryListContext objectEntryList() {
			return GetRuleContext<ObjectEntryListContext>(0);
		}
		public ObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterObject(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitObject(this);
		}
	}

	[RuleVersion(0)]
	public ObjectContext @object() {
		ObjectContext _localctx = new ObjectContext(Context, State);
		EnterRule(_localctx, 158, RULE_object);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 698; Match(T_LEFT_CURLY);
			State = 700;
			_la = TokenStream.La(1);
			if (_la==IDENT) {
				{
				State = 699; objectEntryList();
				}
			}

			State = 702; Match(T_RIGHT_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectEntryListContext : ParserRuleContext {
		public ObjectEntryDefinitionContext[] objectEntryDefinition() {
			return GetRuleContexts<ObjectEntryDefinitionContext>();
		}
		public ObjectEntryDefinitionContext objectEntryDefinition(int i) {
			return GetRuleContext<ObjectEntryDefinitionContext>(i);
		}
		public ObjectEntryListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectEntryList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterObjectEntryList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitObjectEntryList(this);
		}
	}

	[RuleVersion(0)]
	public ObjectEntryListContext objectEntryList() {
		ObjectEntryListContext _localctx = new ObjectEntryListContext(Context, State);
		EnterRule(_localctx, 160, RULE_objectEntryList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 704; objectEntryDefinition();
			State = 709;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T_COMMA) {
				{
				{
				State = 705; Match(T_COMMA);
				State = 706; objectEntryDefinition();
				}
				}
				State = 711;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectEntryDefinitionContext : ParserRuleContext {
		public EntryNameContext entryName() {
			return GetRuleContext<EntryNameContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ObjectEntryDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectEntryDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterObjectEntryDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitObjectEntryDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ObjectEntryDefinitionContext objectEntryDefinition() {
		ObjectEntryDefinitionContext _localctx = new ObjectEntryDefinitionContext(Context, State);
		EnterRule(_localctx, 162, RULE_objectEntryDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 712; entryName();
			State = 713; Match(T_DOUBLE_COLON);
			State = 714; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntryNameContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(ZScriptParser.IDENT, 0); }
		public EntryNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entryName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterEntryName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitEntryName(this);
		}
	}

	[RuleVersion(0)]
	public EntryNameContext entryName() {
		EntryNameContext _localctx = new EntryNameContext(Context, State);
		EnterRule(_localctx, 164, RULE_entryName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 716; Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantAtomContext : ParserRuleContext {
		public NumericAtomContext numericAtom() {
			return GetRuleContext<NumericAtomContext>(0);
		}
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public ConstantAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantAtom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterConstantAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitConstantAtom(this);
		}
	}

	[RuleVersion(0)]
	public ConstantAtomContext constantAtom() {
		ConstantAtomContext _localctx = new ConstantAtomContext(Context, State);
		EnterRule(_localctx, 166, RULE_constantAtom);
		int _la;
		try {
			State = 722;
			switch (TokenStream.La(1)) {
			case T_PLUS:
			case T_MINUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 718;
				_la = TokenStream.La(1);
				if ( !(_la==T_PLUS || _la==T_MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				Consume();
				State = 719; numericAtom();
				}
				break;
			case INT:
			case HEX:
			case BINARY:
			case FLOAT:
			case T_FALSE:
			case T_TRUE:
			case T_NULL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 720; atom();
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 721; stringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		public ITerminalNode StringLiteral() { return GetToken(ZScriptParser.StringLiteral, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 168, RULE_stringLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 724; Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public NumericAtomContext numericAtom() {
			return GetRuleContext<NumericAtomContext>(0);
		}
		public ITerminalNode BINARY() { return GetToken(ZScriptParser.BINARY, 0); }
		public ITerminalNode T_FALSE() { return GetToken(ZScriptParser.T_FALSE, 0); }
		public ITerminalNode T_TRUE() { return GetToken(ZScriptParser.T_TRUE, 0); }
		public ITerminalNode T_NULL() { return GetToken(ZScriptParser.T_NULL, 0); }
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 170, RULE_atom);
		int _la;
		try {
			State = 728;
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 726; numericAtom();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 727;
				_la = TokenStream.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BINARY) | (1L << T_FALSE) | (1L << T_TRUE) | (1L << T_NULL))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericAtomContext : ParserRuleContext {
		public HexadecimalNumberContext hexadecimalNumber() {
			return GetRuleContext<HexadecimalNumberContext>(0);
		}
		public BinaryNumberContext binaryNumber() {
			return GetRuleContext<BinaryNumberContext>(0);
		}
		public ITerminalNode FLOAT() { return GetToken(ZScriptParser.FLOAT, 0); }
		public ITerminalNode INT() { return GetToken(ZScriptParser.INT, 0); }
		public ITerminalNode BINARY() { return GetToken(ZScriptParser.BINARY, 0); }
		public NumericAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericAtom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterNumericAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitNumericAtom(this);
		}
	}

	[RuleVersion(0)]
	public NumericAtomContext numericAtom() {
		NumericAtomContext _localctx = new NumericAtomContext(Context, State);
		EnterRule(_localctx, 172, RULE_numericAtom);
		int _la;
		try {
			State = 733;
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 730; hexadecimalNumber();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 731; binaryNumber();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 732;
				_la = TokenStream.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << BINARY) | (1L << FLOAT))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HexadecimalNumberContext : ParserRuleContext {
		public ITerminalNode HEX() { return GetToken(ZScriptParser.HEX, 0); }
		public HexadecimalNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hexadecimalNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterHexadecimalNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitHexadecimalNumber(this);
		}
	}

	[RuleVersion(0)]
	public HexadecimalNumberContext hexadecimalNumber() {
		HexadecimalNumberContext _localctx = new HexadecimalNumberContext(Context, State);
		EnterRule(_localctx, 174, RULE_hexadecimalNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 735; Match(HEX);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryNumberContext : ParserRuleContext {
		public ITerminalNode BINARY() { return GetToken(ZScriptParser.BINARY, 0); }
		public BinaryNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterBinaryNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitBinaryNumber(this);
		}
	}

	[RuleVersion(0)]
	public BinaryNumberContext binaryNumber() {
		BinaryNumberContext _localctx = new BinaryNumberContext(Context, State);
		EnterRule(_localctx, 176, RULE_binaryNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 737; Match(BINARY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 53: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 8);
		case 1: return Precpred(Context, 7);
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 4);
		case 5: return Precpred(Context, 3);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3P\x2E6\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\a\x3\xBB\n\x3\f\x3"+
		"\xE\x3\xBE\v\x3\x3\x4\x3\x4\x3\x4\x5\x4\xC3\n\x4\x3\x4\x3\x4\x3\x5\x3"+
		"\x5\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\a\a\a\xCF\n\a\f\a\xE\a\xD2\v\a\x3\a"+
		"\x3\a\x3\b\x3\b\x3\b\x3\t\x5\t\xDA\n\t\x3\t\x3\t\x3\t\x3\n\x3\n\a\n\xE1"+
		"\n\n\f\n\xE\n\xE4\v\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\a\v\xEC\n\v\f\v\xE"+
		"\v\xEF\v\v\x3\v\x3\v\x3\f\x5\f\xF4\n\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3"+
		"\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\a\xF\x103\n\xF\f\xF\xE\xF\x106"+
		"\v\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\a\x10\x10D\n\x10\f\x10\xE\x10\x110"+
		"\v\x10\x5\x10\x112\n\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x5"+
		"\x11\x11A\n\x11\x3\x12\x3\x12\x3\x12\a\x12\x11F\n\x12\f\x12\xE\x12\x122"+
		"\v\x12\x3\x13\x5\x13\x125\n\x13\x3\x13\x3\x13\x3\x13\x5\x13\x12A\n\x13"+
		"\x3\x14\x3\x14\x3\x15\x3\x15\x5\x15\x130\n\x15\x3\x15\x5\x15\x133\n\x15"+
		"\x3\x15\x5\x15\x136\n\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x5\x16\x13D"+
		"\n\x16\x3\x16\x5\x16\x140\n\x16\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\x3"+
		"\x18\x3\x19\x3\x19\x3\x19\a\x19\x14B\n\x19\f\x19\xE\x19\x14E\v\x19\x5"+
		"\x19\x150\n\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x158"+
		"\n\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x15D\n\x1B\x3\x1C\x3\x1C\x3\x1D\x3"+
		"\x1D\x3\x1D\x3\x1D\a\x1D\x165\n\x1D\f\x1D\xE\x1D\x168\v\x1D\x3\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\a\x1E\x16E\n\x1E\f\x1E\xE\x1E\x171\v\x1E\x3\x1E\x3"+
		"\x1E\x3\x1F\x3\x1F\x5\x1F\x177\n\x1F\x3 \x3 \x5 \x17B\n \x3 \x3 \x3 \x3"+
		" \x3 \x3 \x3 \x3 \x3 \x3 \x5 \x187\n \x3!\x3!\a!\x18B\n!\f!\xE!\x18E\v"+
		"!\x3!\x3!\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x5\"\x198\n\"\x3#\x3#\x3#\x3$"+
		"\x3$\x3$\x3$\x3$\x3$\x3%\x3%\x3%\a%\x1A6\n%\f%\xE%\x1A9\v%\x3%\x3%\x3"+
		"&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x5&\x1B5\n&\x3\'\x3\'\x3\'\x3\'\x3\'\x3"+
		"\'\x3(\x3(\x3(\x3(\x3(\x3(\x3)\x3)\x3)\x5)\x1C6\n)\x3)\x3)\x5)\x1CA\n"+
		")\x3)\x3)\x5)\x1CE\n)\x3)\x3)\x3)\x3*\x3*\x5*\x1D5\n*\x3+\x3+\x5+\x1D9"+
		"\n+\x3+\x3+\x3,\x3,\x5,\x1DF\n,\x3,\x3,\x3-\x3-\x3-\x3.\x3.\x3.\x3/\x3"+
		"/\x3/\x5/\x1EC\n/\x3\x30\x3\x30\x3\x30\x3\x30\x3\x31\x3\x31\x3\x31\x5"+
		"\x31\x1F5\n\x31\x3\x32\x3\x32\x3\x33\x3\x33\x3\x33\x5\x33\x1FC\n\x33\x3"+
		"\x34\x3\x34\x3\x34\x5\x34\x201\n\x34\x3\x35\x3\x35\x5\x35\x205\n\x35\x3"+
		"\x35\x3\x35\x5\x35\x209\n\x35\x3\x35\x3\x35\x3\x36\x3\x36\x3\x36\a\x36"+
		"\x210\n\x36\f\x36\xE\x36\x213\v\x36\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37"+
		"\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37"+
		"\x5\x37\x224\n\x37\x3\x37\x3\x37\x5\x37\x228\n\x37\x3\x37\x3\x37\x3\x37"+
		"\x3\x37\x5\x37\x22E\n\x37\x3\x37\x3\x37\x5\x37\x232\n\x37\x3\x37\x3\x37"+
		"\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37"+
		"\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37"+
		"\x3\x37\x3\x37\a\x37\x24C\n\x37\f\x37\xE\x37\x24F\v\x37\x3\x38\x3\x38"+
		"\x3\x39\x3\x39\x3:\x3:\x3;\x3;\x3<\x3<\x3=\x3=\x3>\x3>\x3>\x3>\x3?\x3"+
		"?\x3?\x3?\x3@\x3@\x5@\x267\n@\x3@\x3@\x3@\x3\x41\x3\x41\x3\x41\x3\x42"+
		"\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x5\x42\x275\n\x42\x3\x43\x3\x43\x3"+
		"\x44\x3\x44\x3\x45\x3\x45\x3\x46\x3\x46\x5\x46\x27F\n\x46\x3\x46\x3\x46"+
		"\x3G\x3G\x5G\x285\nG\x3G\x3G\x3H\x3H\x3H\aH\x28C\nH\fH\xEH\x28F\vH\x3"+
		"I\x3I\x3I\x3I\x3I\x5I\x296\nI\x3J\x3J\x5J\x29A\nJ\x3J\x3J\x3J\x5J\x29F"+
		"\nJ\x5J\x2A1\nJ\x3K\x3K\x3L\x3L\x3L\x3M\x3M\x3M\x3M\x3N\x3N\x5N\x2AE\n"+
		"N\x3N\x5N\x2B1\nN\x3O\x3O\x3O\x5O\x2B6\nO\x3O\x5O\x2B9\nO\x3P\x3P\x3Q"+
		"\x3Q\x5Q\x2BF\nQ\x3Q\x3Q\x3R\x3R\x3R\aR\x2C6\nR\fR\xER\x2C9\vR\x3S\x3"+
		"S\x3S\x3S\x3T\x3T\x3U\x3U\x3U\x3U\x5U\x2D5\nU\x3V\x3V\x3W\x3W\x5W\x2DB"+
		"\nW\x3X\x3X\x3X\x5X\x2E0\nX\x3Y\x3Y\x3Z\x3Z\x3Z\x2\x3l[\x2\x4\x6\b\n\f"+
		"\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42"+
		"\x44\x46HJLNPRTVXZ\\^`\x62\x64\x66hjlnprtvxz|~\x80\x82\x84\x86\x88\x8A"+
		"\x8C\x8E\x90\x92\x94\x96\x98\x9A\x9C\x9E\xA0\xA2\xA4\xA6\xA8\xAA\xAC\xAE"+
		"\xB0\xB2\x2\f\x3\x2.\x30\x3\x2\x32\x33\x3\x2\x36\x37\x3\x2\x38>\x3\x2"+
		"?@\x3\x2\x31\x33\x3\x2\x34\x35\x3\x2\x41J\x4\x2\"\"$&\x4\x2  \"#\x2FA"+
		"\x2\xB4\x3\x2\x2\x2\x4\xBC\x3\x2\x2\x2\x6\xBF\x3\x2\x2\x2\b\xC6\x3\x2"+
		"\x2\x2\n\xC9\x3\x2\x2\x2\f\xCB\x3\x2\x2\x2\xE\xD5\x3\x2\x2\x2\x10\xD9"+
		"\x3\x2\x2\x2\x12\xDE\x3\x2\x2\x2\x14\xE7\x3\x2\x2\x2\x16\xF3\x3\x2\x2"+
		"\x2\x18\xF8\x3\x2\x2\x2\x1A\xFC\x3\x2\x2\x2\x1C\xFE\x3\x2\x2\x2\x1E\x111"+
		"\x3\x2\x2\x2 \x119\x3\x2\x2\x2\"\x11B\x3\x2\x2\x2$\x124\x3\x2\x2\x2&\x12B"+
		"\x3\x2\x2\x2(\x12D\x3\x2\x2\x2*\x139\x3\x2\x2\x2,\x141\x3\x2\x2\x2.\x143"+
		"\x3\x2\x2\x2\x30\x14F\x3\x2\x2\x2\x32\x151\x3\x2\x2\x2\x34\x154\x3\x2"+
		"\x2\x2\x36\x15E\x3\x2\x2\x2\x38\x160\x3\x2\x2\x2:\x169\x3\x2\x2\x2<\x174"+
		"\x3\x2\x2\x2>\x186\x3\x2\x2\x2@\x188\x3\x2\x2\x2\x42\x191\x3\x2\x2\x2"+
		"\x44\x199\x3\x2\x2\x2\x46\x19C\x3\x2\x2\x2H\x1A2\x3\x2\x2\x2J\x1AC\x3"+
		"\x2\x2\x2L\x1B6\x3\x2\x2\x2N\x1BC\x3\x2\x2\x2P\x1C2\x3\x2\x2\x2R\x1D4"+
		"\x3\x2\x2\x2T\x1D6\x3\x2\x2\x2V\x1DE\x3\x2\x2\x2X\x1E2\x3\x2\x2\x2Z\x1E5"+
		"\x3\x2\x2\x2\\\x1E8\x3\x2\x2\x2^\x1ED\x3\x2\x2\x2`\x1F1\x3\x2\x2\x2\x62"+
		"\x1F6\x3\x2\x2\x2\x64\x1FB\x3\x2\x2\x2\x66\x1FD\x3\x2\x2\x2h\x202\x3\x2"+
		"\x2\x2j\x20C\x3\x2\x2\x2l\x231\x3\x2\x2\x2n\x250\x3\x2\x2\x2p\x252\x3"+
		"\x2\x2\x2r\x254\x3\x2\x2\x2t\x256\x3\x2\x2\x2v\x258\x3\x2\x2\x2x\x25A"+
		"\x3\x2\x2\x2z\x25C\x3\x2\x2\x2|\x260\x3\x2\x2\x2~\x264\x3\x2\x2\x2\x80"+
		"\x26B\x3\x2\x2\x2\x82\x274\x3\x2\x2\x2\x84\x276\x3\x2\x2\x2\x86\x278\x3"+
		"\x2\x2\x2\x88\x27A\x3\x2\x2\x2\x8A\x27C\x3\x2\x2\x2\x8C\x282\x3\x2\x2"+
		"\x2\x8E\x288\x3\x2\x2\x2\x90\x290\x3\x2\x2\x2\x92\x2A0\x3\x2\x2\x2\x94"+
		"\x2A2\x3\x2\x2\x2\x96\x2A4\x3\x2\x2\x2\x98\x2A7\x3\x2\x2\x2\x9A\x2AD\x3"+
		"\x2\x2\x2\x9C\x2B5\x3\x2\x2\x2\x9E\x2BA\x3\x2\x2\x2\xA0\x2BC\x3\x2\x2"+
		"\x2\xA2\x2C2\x3\x2\x2\x2\xA4\x2CA\x3\x2\x2\x2\xA6\x2CE\x3\x2\x2\x2\xA8"+
		"\x2D4\x3\x2\x2\x2\xAA\x2D6\x3\x2\x2\x2\xAC\x2DA\x3\x2\x2\x2\xAE\x2DF\x3"+
		"\x2\x2\x2\xB0\x2E1\x3\x2\x2\x2\xB2\x2E3\x3\x2\x2\x2\xB4\xB5\x5\x4\x3\x2"+
		"\xB5\x3\x3\x2\x2\x2\xB6\xBB\x5\x12\n\x2\xB7\xBB\x5\x14\v\x2\xB8\xBB\x5"+
		"\x6\x4\x2\xB9\xBB\x5\x18\r\x2\xBA\xB6\x3\x2\x2\x2\xBA\xB7\x3\x2\x2\x2"+
		"\xBA\xB8\x3\x2\x2\x2\xBA\xB9\x3\x2\x2\x2\xBB\xBE\x3\x2\x2\x2\xBC\xBA\x3"+
		"\x2\x2\x2\xBC\xBD\x3\x2\x2\x2\xBD\x5\x3\x2\x2\x2\xBE\xBC\x3\x2\x2\x2\xBF"+
		"\xC0\a\f\x2\x2\xC0\xC2\x5\n\x6\x2\xC1\xC3\x5\b\x5\x2\xC2\xC1\x3\x2\x2"+
		"\x2\xC2\xC3\x3\x2\x2\x2\xC3\xC4\x3\x2\x2\x2\xC4\xC5\x5\f\a\x2\xC5\a\x3"+
		"\x2\x2\x2\xC6\xC7\a*\x2\x2\xC7\xC8\x5\n\x6\x2\xC8\t\x3\x2\x2\x2\xC9\xCA"+
		"\aK\x2\x2\xCA\v\x3\x2\x2\x2\xCB\xD0\a\x1C\x2\x2\xCC\xCF\x5\xE\b\x2\xCD"+
		"\xCF\x5\x10\t\x2\xCE\xCC\x3\x2\x2\x2\xCE\xCD\x3\x2\x2\x2\xCF\xD2\x3\x2"+
		"\x2\x2\xD0\xCE\x3\x2\x2\x2\xD0\xD1\x3\x2\x2\x2\xD1\xD3\x3\x2\x2\x2\xD2"+
		"\xD0\x3\x2\x2\x2\xD3\xD4\a\x1D\x2\x2\xD4\r\x3\x2\x2\x2\xD5\xD6\x5X-\x2"+
		"\xD6\xD7\a+\x2\x2\xD7\xF\x3\x2\x2\x2\xD8\xDA\a\v\x2\x2\xD9\xD8\x3\x2\x2"+
		"\x2\xD9\xDA\x3\x2\x2\x2\xDA\xDB\x3\x2\x2\x2\xDB\xDC\a\n\x2\x2\xDC\xDD"+
		"\x5(\x15\x2\xDD\x11\x3\x2\x2\x2\xDE\xE2\a\x1A\x2\x2\xDF\xE1\x5\x16\f\x2"+
		"\xE0\xDF\x3\x2\x2\x2\xE1\xE4\x3\x2\x2\x2\xE2\xE0\x3\x2\x2\x2\xE2\xE3\x3"+
		"\x2\x2\x2\xE3\xE5\x3\x2\x2\x2\xE4\xE2\x3\x2\x2\x2\xE5\xE6\a\x1B\x2\x2"+
		"\xE6\x13\x3\x2\x2\x2\xE7\xED\a\x1C\x2\x2\xE8\xEC\x5\x12\n\x2\xE9\xEC\x5"+
		"*\x16\x2\xEA\xEC\x5(\x15\x2\xEB\xE8\x3\x2\x2\x2\xEB\xE9\x3\x2\x2\x2\xEB"+
		"\xEA\x3\x2\x2\x2\xEC\xEF\x3\x2\x2\x2\xED\xEB\x3\x2\x2\x2\xED\xEE\x3\x2"+
		"\x2\x2\xEE\xF0\x3\x2\x2\x2\xEF\xED\x3\x2\x2\x2\xF0\xF1\a\x1D\x2\x2\xF1"+
		"\x15\x3\x2\x2\x2\xF2\xF4\a\a\x2\x2\xF3\xF2\x3\x2\x2\x2\xF3\xF4\x3\x2\x2"+
		"\x2\xF4\xF5\x3\x2\x2\x2\xF5\xF6\x5\\/\x2\xF6\xF7\a+\x2\x2\xF7\x17\x3\x2"+
		"\x2\x2\xF8\xF9\a\r\x2\x2\xF9\xFA\x5\x1A\xE\x2\xFA\xFB\x5\x1C\xF\x2\xFB"+
		"\x19\x3\x2\x2\x2\xFC\xFD\aK\x2\x2\xFD\x1B\x3\x2\x2\x2\xFE\x104\a\x1A\x2"+
		"\x2\xFF\x103\x5\xE\b\x2\x100\x103\x5\x1E\x10\x2\x101\x103\x5 \x11\x2\x102"+
		"\xFF\x3\x2\x2\x2\x102\x100\x3\x2\x2\x2\x102\x101\x3\x2\x2\x2\x103\x106"+
		"\x3\x2\x2\x2\x104\x102\x3\x2\x2\x2\x104\x105\x3\x2\x2\x2\x105\x107\x3"+
		"\x2\x2\x2\x106\x104\x3\x2\x2\x2\x107\x108\a\x1B\x2\x2\x108\x1D\x3\x2\x2"+
		"\x2\x109\x10E\x5\"\x12\x2\x10A\x10B\a-\x2\x2\x10B\x10D\x5\"\x12\x2\x10C"+
		"\x10A\x3\x2\x2\x2\x10D\x110\x3\x2\x2\x2\x10E\x10C\x3\x2\x2\x2\x10E\x10F"+
		"\x3\x2\x2\x2\x10F\x112\x3\x2\x2\x2\x110\x10E\x3\x2\x2\x2\x111\x109\x3"+
		"\x2\x2\x2\x111\x112\x3\x2\x2\x2\x112\x113\x3\x2\x2\x2\x113\x114\x5@!\x2"+
		"\x114\x1F\x3\x2\x2\x2\x115\x116\a\x41\x2\x2\x116\x11A\x5&\x14\x2\x117"+
		"\x118\a\x33\x2\x2\x118\x11A\x5&\x14\x2\x119\x115\x3\x2\x2\x2\x119\x117"+
		"\x3\x2\x2\x2\x11A!\x3\x2\x2\x2\x11B\x120\x5$\x13\x2\x11C\x11D\a-\x2\x2"+
		"\x11D\x11F\x5$\x13\x2\x11E\x11C\x3\x2\x2\x2\x11F\x122\x3\x2\x2\x2\x120"+
		"\x11E\x3\x2\x2\x2\x120\x121\x3\x2\x2\x2\x121#\x3\x2\x2\x2\x122\x120\x3"+
		"\x2\x2\x2\x123\x125\a\x32\x2\x2\x124\x123\x3\x2\x2\x2\x124\x125\x3\x2"+
		"\x2\x2\x125\x126\x3\x2\x2\x2\x126\x129\x5&\x14\x2\x127\x128\a\x33\x2\x2"+
		"\x128\x12A\x5&\x14\x2\x129\x127\x3\x2\x2\x2\x129\x12A\x3\x2\x2\x2\x12A"+
		"%\x3\x2\x2\x2\x12B\x12C\a \x2\x2\x12C\'\x3\x2\x2\x2\x12D\x12F\x5,\x17"+
		"\x2\x12E\x130\x5.\x18\x2\x12F\x12E\x3\x2\x2\x2\x12F\x130\x3\x2\x2\x2\x130"+
		"\x132\x3\x2\x2\x2\x131\x133\x5\x32\x1A\x2\x132\x131\x3\x2\x2\x2\x132\x133"+
		"\x3\x2\x2\x2\x133\x135\x3\x2\x2\x2\x134\x136\x5\x38\x1D\x2\x135\x134\x3"+
		"\x2\x2\x2\x135\x136\x3\x2\x2\x2\x136\x137\x3\x2\x2\x2\x137\x138\x5@!\x2"+
		"\x138)\x3\x2\x2\x2\x139\x13A\a\t\x2\x2\x13A\x13C\x5,\x17\x2\x13B\x13D"+
		"\x5.\x18\x2\x13C\x13B\x3\x2\x2\x2\x13C\x13D\x3\x2\x2\x2\x13D\x13F\x3\x2"+
		"\x2\x2\x13E\x140\x5\x32\x1A\x2\x13F\x13E\x3\x2\x2\x2\x13F\x140\x3\x2\x2"+
		"\x2\x140+\x3\x2\x2\x2\x141\x142\aK\x2\x2\x142-\x3\x2\x2\x2\x143\x144\a"+
		"\x18\x2\x2\x144\x145\x5\x30\x19\x2\x145\x146\a\x19\x2\x2\x146/\x3\x2\x2"+
		"\x2\x147\x14C\x5\x34\x1B\x2\x148\x149\a-\x2\x2\x149\x14B\x5\x34\x1B\x2"+
		"\x14A\x148\x3\x2\x2\x2\x14B\x14E\x3\x2\x2\x2\x14C\x14A\x3\x2\x2\x2\x14C"+
		"\x14D\x3\x2\x2\x2\x14D\x150\x3\x2\x2\x2\x14E\x14C\x3\x2\x2\x2\x14F\x147"+
		"\x3\x2\x2\x2\x14F\x150\x3\x2\x2\x2\x150\x31\x3\x2\x2\x2\x151\x152\a*\x2"+
		"\x2\x152\x153\x5\x64\x33\x2\x153\x33\x3\x2\x2\x2\x154\x157\x5\x36\x1C"+
		"\x2\x155\x156\a*\x2\x2\x156\x158\x5\x64\x33\x2\x157\x155\x3\x2\x2\x2\x157"+
		"\x158\x3\x2\x2\x2\x158\x15C\x3\x2\x2\x2\x159\x15D\a)\x2\x2\x15A\x15B\a"+
		"\x41\x2\x2\x15B\x15D\x5\xA8U\x2\x15C\x159\x3\x2\x2\x2\x15C\x15A\x3\x2"+
		"\x2\x2\x15C\x15D\x3\x2\x2\x2\x15D\x35\x3\x2\x2\x2\x15E\x15F\aK\x2\x2\x15F"+
		"\x37\x3\x2\x2\x2\x160\x161\a\x41\x2\x2\x161\x166\x5<\x1F\x2\x162\x163"+
		"\a-\x2\x2\x163\x165\x5<\x1F\x2\x164\x162\x3\x2\x2\x2\x165\x168\x3\x2\x2"+
		"\x2\x166\x164\x3\x2\x2\x2\x166\x167\x3\x2\x2\x2\x167\x39\x3\x2\x2\x2\x168"+
		"\x166\x3\x2\x2\x2\x169\x16A\a\x18\x2\x2\x16A\x16F\x5\xA8U\x2\x16B\x16C"+
		"\a-\x2\x2\x16C\x16E\x5\xA8U\x2\x16D\x16B\x3\x2\x2\x2\x16E\x171\x3\x2\x2"+
		"\x2\x16F\x16D\x3\x2\x2\x2\x16F\x170\x3\x2\x2\x2\x170\x172\x3\x2\x2\x2"+
		"\x171\x16F\x3\x2\x2\x2\x172\x173\a\x19\x2\x2\x173;\x3\x2\x2\x2\x174\x176"+
		"\x5\xA8U\x2\x175\x177\x5:\x1E\x2\x176\x175\x3\x2\x2\x2\x176\x177\x3\x2"+
		"\x2\x2\x177=\x3\x2\x2\x2\x178\x17B\x5l\x37\x2\x179\x17B\x5z>\x2\x17A\x178"+
		"\x3\x2\x2\x2\x17A\x179\x3\x2\x2\x2\x17B\x17C\x3\x2\x2\x2\x17C\x17D\a+"+
		"\x2\x2\x17D\x187\x3\x2\x2\x2\x17E\x187\x5@!\x2\x17F\x187\a+\x2\x2\x180"+
		"\x187\x5\x42\"\x2\x181\x187\x5N(\x2\x182\x187\x5P)\x2\x183\x187\x5\x46"+
		"$\x2\x184\x187\x5T+\x2\x185\x187\x5V,\x2\x186\x17A\x3\x2\x2\x2\x186\x17E"+
		"\x3\x2\x2\x2\x186\x17F\x3\x2\x2\x2\x186\x180\x3\x2\x2\x2\x186\x181\x3"+
		"\x2\x2\x2\x186\x182\x3\x2\x2\x2\x186\x183\x3\x2\x2\x2\x186\x184\x3\x2"+
		"\x2\x2\x186\x185\x3\x2\x2\x2\x187?\x3\x2\x2\x2\x188\x18C\a\x1C\x2\x2\x189"+
		"\x18B\x5> \x2\x18A\x189\x3\x2\x2\x2\x18B\x18E\x3\x2\x2\x2\x18C\x18A\x3"+
		"\x2\x2\x2\x18C\x18D\x3\x2\x2\x2\x18D\x18F\x3\x2\x2\x2\x18E\x18C\x3\x2"+
		"\x2\x2\x18F\x190\a\x1D\x2\x2\x190\x41\x3\x2\x2\x2\x191\x192\a\xE\x2\x2"+
		"\x192\x193\a\x18\x2\x2\x193\x194\x5l\x37\x2\x194\x195\a\x19\x2\x2\x195"+
		"\x197\x5> \x2\x196\x198\x5\x44#\x2\x197\x196\x3\x2\x2\x2\x197\x198\x3"+
		"\x2\x2\x2\x198\x43\x3\x2\x2\x2\x199\x19A\a\xF\x2\x2\x19A\x19B\x5> \x2"+
		"\x19B\x45\x3\x2\x2\x2\x19C\x19D\a\x14\x2\x2\x19D\x19E\a\x18\x2\x2\x19E"+
		"\x19F\x5l\x37\x2\x19F\x1A0\a\x19\x2\x2\x1A0\x1A1\x5H%\x2\x1A1G\x3\x2\x2"+
		"\x2\x1A2\x1A7\a\x1C\x2\x2\x1A3\x1A6\x5J&\x2\x1A4\x1A6\x5L\'\x2\x1A5\x1A3"+
		"\x3\x2\x2\x2\x1A5\x1A4\x3\x2\x2\x2\x1A6\x1A9\x3\x2\x2\x2\x1A7\x1A5\x3"+
		"\x2\x2\x2\x1A7\x1A8\x3\x2\x2\x2\x1A8\x1AA\x3\x2\x2\x2\x1A9\x1A7\x3\x2"+
		"\x2\x2\x1AA\x1AB\a\x1D\x2\x2\x1ABI\x3\x2\x2\x2\x1AC\x1AD\a\x15\x2\x2\x1AD"+
		"\x1AE\x5l\x37\x2\x1AE\x1B4\a*\x2\x2\x1AF\x1B5\x5J&\x2\x1B0\x1B1\x5> \x2"+
		"\x1B1\x1B2\a\x12\x2\x2\x1B2\x1B3\a+\x2\x2\x1B3\x1B5\x3\x2\x2\x2\x1B4\x1AF"+
		"\x3\x2\x2\x2\x1B4\x1B0\x3\x2\x2\x2\x1B5K\x3\x2\x2\x2\x1B6\x1B7\a\x16\x2"+
		"\x2\x1B7\x1B8\a*\x2\x2\x1B8\x1B9\x5> \x2\x1B9\x1BA\a\x12\x2\x2\x1BA\x1BB"+
		"\a+\x2\x2\x1BBM\x3\x2\x2\x2\x1BC\x1BD\a\x10\x2\x2\x1BD\x1BE\a\x18\x2\x2"+
		"\x1BE\x1BF\x5l\x37\x2\x1BF\x1C0\a\x19\x2\x2\x1C0\x1C1\x5> \x2\x1C1O\x3"+
		"\x2\x2\x2\x1C2\x1C3\a\x11\x2\x2\x1C3\x1C5\a\x18\x2\x2\x1C4\x1C6\x5R*\x2"+
		"\x1C5\x1C4\x3\x2\x2\x2\x1C5\x1C6\x3\x2\x2\x2\x1C6\x1C7\x3\x2\x2\x2\x1C7"+
		"\x1C9\a+\x2\x2\x1C8\x1CA\x5l\x37\x2\x1C9\x1C8\x3\x2\x2\x2\x1C9\x1CA\x3"+
		"\x2\x2\x2\x1CA\x1CB\x3\x2\x2\x2\x1CB\x1CD\a+\x2\x2\x1CC\x1CE\x5l\x37\x2"+
		"\x1CD\x1CC\x3\x2\x2\x2\x1CD\x1CE\x3\x2\x2\x2\x1CE\x1CF\x3\x2\x2\x2\x1CF"+
		"\x1D0\a\x19\x2\x2\x1D0\x1D1\x5> \x2\x1D1Q\x3\x2\x2\x2\x1D2\x1D5\x5X-\x2"+
		"\x1D3\x1D5\x5l\x37\x2\x1D4\x1D2\x3\x2\x2\x2\x1D4\x1D3\x3\x2\x2\x2\x1D5"+
		"S\x3\x2\x2\x2\x1D6\x1D8\a\x17\x2\x2\x1D7\x1D9\x5l\x37\x2\x1D8\x1D7\x3"+
		"\x2\x2\x2\x1D8\x1D9\x3\x2\x2\x2\x1D9\x1DA\x3\x2\x2\x2\x1DA\x1DB\a+\x2"+
		"\x2\x1DBU\x3\x2\x2\x2\x1DC\x1DF\x5X-\x2\x1DD\x1DF\x5Z.\x2\x1DE\x1DC\x3"+
		"\x2\x2\x2\x1DE\x1DD\x3\x2\x2\x2\x1DF\x1E0\x3\x2\x2\x2\x1E0\x1E1\a+\x2"+
		"\x2\x1E1W\x3\x2\x2\x2\x1E2\x1E3\a\x5\x2\x2\x1E3\x1E4\x5\\/\x2\x1E4Y\x3"+
		"\x2\x2\x2\x1E5\x1E6\a\x6\x2\x2\x1E6\x1E7\x5^\x30\x2\x1E7[\x3\x2\x2\x2"+
		"\x1E8\x1EB\x5`\x31\x2\x1E9\x1EA\a\x41\x2\x2\x1EA\x1EC\x5l\x37\x2\x1EB"+
		"\x1E9\x3\x2\x2\x2\x1EB\x1EC\x3\x2\x2\x2\x1EC]\x3\x2\x2\x2\x1ED\x1EE\x5"+
		"`\x31\x2\x1EE\x1EF\a\x41\x2\x2\x1EF\x1F0\x5l\x37\x2\x1F0_\x3\x2\x2\x2"+
		"\x1F1\x1F4\x5\x62\x32\x2\x1F2\x1F3\a*\x2\x2\x1F3\x1F5\x5\x64\x33\x2\x1F4"+
		"\x1F2\x3\x2\x2\x2\x1F4\x1F5\x3\x2\x2\x2\x1F5\x61\x3\x2\x2\x2\x1F6\x1F7"+
		"\aK\x2\x2\x1F7\x63\x3\x2\x2\x2\x1F8\x1FC\a\f\x2\x2\x1F9\x1FC\x5\x66\x34"+
		"\x2\x1FA\x1FC\x5h\x35\x2\x1FB\x1F8\x3\x2\x2\x2\x1FB\x1F9\x3\x2\x2\x2\x1FB"+
		"\x1FA\x3\x2\x2\x2\x1FC\x65\x3\x2\x2\x2\x1FD\x200\aK\x2\x2\x1FE\x1FF\a"+
		",\x2\x2\x1FF\x201\x5\x66\x34\x2\x200\x1FE\x3\x2\x2\x2\x200\x201\x3\x2"+
		"\x2\x2\x201g\x3\x2\x2\x2\x202\x204\a\x18\x2\x2\x203\x205\x5j\x36\x2\x204"+
		"\x203\x3\x2\x2\x2\x204\x205\x3\x2\x2\x2\x205\x206\x3\x2\x2\x2\x206\x208"+
		"\a\x1E\x2\x2\x207\x209\x5\x64\x33\x2\x208\x207\x3\x2\x2\x2\x208\x209\x3"+
		"\x2\x2\x2\x209\x20A\x3\x2\x2\x2\x20A\x20B\a\x19\x2\x2\x20Bi\x3\x2\x2\x2"+
		"\x20C\x211\x5\x64\x33\x2\x20D\x20E\a-\x2\x2\x20E\x210\x5\x64\x33\x2\x20F"+
		"\x20D\x3\x2\x2\x2\x210\x213\x3\x2\x2\x2\x211\x20F\x3\x2\x2\x2\x211\x212"+
		"\x3\x2\x2\x2\x212k\x3\x2\x2\x2\x213\x211\x3\x2\x2\x2\x214\x215\b\x37\x1"+
		"\x2\x215\x216\a\x18\x2\x2\x216\x217\x5l\x37\x2\x217\x218\a\x19\x2\x2\x218"+
		"\x232\x3\x2\x2\x2\x219\x232\x5z>\x2\x21A\x21B\x5\x84\x43\x2\x21B\x21C"+
		"\x5\x90I\x2\x21C\x232\x3\x2\x2\x2\x21D\x21E\x5\x90I\x2\x21E\x21F\x5\x86"+
		"\x44\x2\x21F\x232\x3\x2\x2\x2\x220\x232\x5~@\x2\x221\x223\aK\x2\x2\x222"+
		"\x224\x5\x9CO\x2\x223\x222\x3\x2\x2\x2\x223\x224\x3\x2\x2\x2\x224\x232"+
		"\x3\x2\x2\x2\x225\x227\x5\xA0Q\x2\x226\x228\x5\x9AN\x2\x227\x226\x3\x2"+
		"\x2\x2\x227\x228\x3\x2\x2\x2\x228\x232\x3\x2\x2\x2\x229\x232\x5|?\x2\x22A"+
		"\x232\x5\x80\x41\x2\x22B\x22D\x5\x8A\x46\x2\x22C\x22E\x5\x9CO\x2\x22D"+
		"\x22C\x3\x2\x2\x2\x22D\x22E\x3\x2\x2\x2\x22E\x232\x3\x2\x2\x2\x22F\x232"+
		"\x5\xACW\x2\x230\x232\x5\xA8U\x2\x231\x214\x3\x2\x2\x2\x231\x219\x3\x2"+
		"\x2\x2\x231\x21A\x3\x2\x2\x2\x231\x21D\x3\x2\x2\x2\x231\x220\x3\x2\x2"+
		"\x2\x231\x221\x3\x2\x2\x2\x231\x225\x3\x2\x2\x2\x231\x229\x3\x2\x2\x2"+
		"\x231\x22A\x3\x2\x2\x2\x231\x22B\x3\x2\x2\x2\x231\x22F\x3\x2\x2\x2\x231"+
		"\x230\x3\x2\x2\x2\x232\x24D\x3\x2\x2\x2\x233\x234\f\n\x2\x2\x234\x235"+
		"\x5n\x38\x2\x235\x236\x5l\x37\v\x236\x24C\x3\x2\x2\x2\x237\x238\f\t\x2"+
		"\x2\x238\x239\x5p\x39\x2\x239\x23A\x5l\x37\n\x23A\x24C\x3\x2\x2\x2\x23B"+
		"\x23C\f\b\x2\x2\x23C\x23D\x5r:\x2\x23D\x23E\x5l\x37\t\x23E\x24C\x3\x2"+
		"\x2\x2\x23F\x240\f\a\x2\x2\x240\x241\x5t;\x2\x241\x242\x5l\x37\b\x242"+
		"\x24C\x3\x2\x2\x2\x243\x244\f\x6\x2\x2\x244\x245\x5v<\x2\x245\x246\x5"+
		"l\x37\a\x246\x24C\x3\x2\x2\x2\x247\x248\f\x5\x2\x2\x248\x249\x5x=\x2\x249"+
		"\x24A\x5l\x37\x6\x24A\x24C\x3\x2\x2\x2\x24B\x233\x3\x2\x2\x2\x24B\x237"+
		"\x3\x2\x2\x2\x24B\x23B\x3\x2\x2\x2\x24B\x23F\x3\x2\x2\x2\x24B\x243\x3"+
		"\x2\x2\x2\x24B\x247\x3\x2\x2\x2\x24C\x24F\x3\x2\x2\x2\x24D\x24B\x3\x2"+
		"\x2\x2\x24D\x24E\x3\x2\x2\x2\x24Em\x3\x2\x2\x2\x24F\x24D\x3\x2\x2\x2\x250"+
		"\x251\t\x2\x2\x2\x251o\x3\x2\x2\x2\x252\x253\t\x3\x2\x2\x253q\x3\x2\x2"+
		"\x2\x254\x255\t\x4\x2\x2\x255s\x3\x2\x2\x2\x256\x257\a\x38\x2\x2\x257"+
		"u\x3\x2\x2\x2\x258\x259\t\x5\x2\x2\x259w\x3\x2\x2\x2\x25A\x25B\t\x6\x2"+
		"\x2\x25By\x3\x2\x2\x2\x25C\x25D\x5\x90I\x2\x25D\x25E\x5\x88\x45\x2\x25E"+
		"\x25F\x5l\x37\x2\x25F{\x3\x2\x2\x2\x260\x261\a\b\x2\x2\x261\x262\x5\x66"+
		"\x34\x2\x262\x263\x5\x8CG\x2\x263}\x3\x2\x2\x2\x264\x266\x5.\x18\x2\x265"+
		"\x267\x5\x32\x1A\x2\x266\x265\x3\x2\x2\x2\x266\x267\x3\x2\x2\x2\x267\x268"+
		"\x3\x2\x2\x2\x268\x269\a\x1F\x2\x2\x269\x26A\x5@!\x2\x26A\x7F\x3\x2\x2"+
		"\x2\x26B\x26C\t\a\x2\x2\x26C\x26D\x5l\x37\x2\x26D\x81\x3\x2\x2\x2\x26E"+
		"\x275\t\x2\x2\x2\x26F\x275\t\x3\x2\x2\x270\x275\t\x4\x2\x2\x271\x275\a"+
		"\x38\x2\x2\x272\x275\t\x5\x2\x2\x273\x275\t\x6\x2\x2\x274\x26E\x3\x2\x2"+
		"\x2\x274\x26F\x3\x2\x2\x2\x274\x270\x3\x2\x2\x2\x274\x271\x3\x2\x2\x2"+
		"\x274\x272\x3\x2\x2\x2\x274\x273\x3\x2\x2\x2\x275\x83\x3\x2\x2\x2\x276"+
		"\x277\t\b\x2\x2\x277\x85\x3\x2\x2\x2\x278\x279\t\b\x2\x2\x279\x87\x3\x2"+
		"\x2\x2\x27A\x27B\t\t\x2\x2\x27B\x89\x3\x2\x2\x2\x27C\x27E\a\x1A\x2\x2"+
		"\x27D\x27F\x5\x8EH\x2\x27E\x27D\x3\x2\x2\x2\x27E\x27F\x3\x2\x2\x2\x27F"+
		"\x280\x3\x2\x2\x2\x280\x281\a\x1B\x2\x2\x281\x8B\x3\x2\x2\x2\x282\x284"+
		"\a\x18\x2\x2\x283\x285\x5\x8EH\x2\x284\x283\x3\x2\x2\x2\x284\x285\x3\x2"+
		"\x2\x2\x285\x286\x3\x2\x2\x2\x286\x287\a\x19\x2\x2\x287\x8D\x3\x2\x2\x2"+
		"\x288\x28D\x5l\x37\x2\x289\x28A\a-\x2\x2\x28A\x28C\x5l\x37\x2\x28B\x289"+
		"\x3\x2\x2\x2\x28C\x28F\x3\x2\x2\x2\x28D\x28B\x3\x2\x2\x2\x28D\x28E\x3"+
		"\x2\x2\x2\x28E\x8F\x3\x2\x2\x2\x28F\x28D\x3\x2\x2\x2\x290\x295\x5\x9E"+
		"P\x2\x291\x292\x5\x8CG\x2\x292\x293\x5\x92J\x2\x293\x296\x3\x2\x2\x2\x294"+
		"\x296\x5\x92J\x2\x295\x291\x3\x2\x2\x2\x295\x294\x3\x2\x2\x2\x295\x296"+
		"\x3\x2\x2\x2\x296\x91\x3\x2\x2\x2\x297\x299\a,\x2\x2\x298\x29A\x5\x90"+
		"I\x2\x299\x298\x3\x2\x2\x2\x299\x29A\x3\x2\x2\x2\x29A\x2A1\x3\x2\x2\x2"+
		"\x29B\x29E\x5\x98M\x2\x29C\x29F\x5\x90I\x2\x29D\x29F\x5\x92J\x2\x29E\x29C"+
		"\x3\x2\x2\x2\x29E\x29D\x3\x2\x2\x2\x29E\x29F\x3\x2\x2\x2\x29F\x2A1\x3"+
		"\x2\x2\x2\x2A0\x297\x3\x2\x2\x2\x2A0\x29B\x3\x2\x2\x2\x2A1\x93\x3\x2\x2"+
		"\x2\x2A2\x2A3\x5\x8CG\x2\x2A3\x95\x3\x2\x2\x2\x2A4\x2A5\a,\x2\x2\x2A5"+
		"\x2A6\x5\x9EP\x2\x2A6\x97\x3\x2\x2\x2\x2A7\x2A8\a\x1A\x2\x2\x2A8\x2A9"+
		"\x5l\x37\x2\x2A9\x2AA\a\x1B\x2\x2\x2AA\x99\x3\x2\x2\x2\x2AB\x2AE\x5\x96"+
		"L\x2\x2AC\x2AE\x5\x98M\x2\x2AD\x2AB\x3\x2\x2\x2\x2AD\x2AC\x3\x2\x2\x2"+
		"\x2AE\x2B0\x3\x2\x2\x2\x2AF\x2B1\x5\x9CO\x2\x2B0\x2AF\x3\x2\x2\x2\x2B0"+
		"\x2B1\x3\x2\x2\x2\x2B1\x9B\x3\x2\x2\x2\x2B2\x2B6\x5\x94K\x2\x2B3\x2B6"+
		"\x5\x96L\x2\x2B4\x2B6\x5\x98M\x2\x2B5\x2B2\x3\x2\x2\x2\x2B5\x2B3\x3\x2"+
		"\x2\x2\x2B5\x2B4\x3\x2\x2\x2\x2B6\x2B8\x3\x2\x2\x2\x2B7\x2B9\x5\x9CO\x2"+
		"\x2B8\x2B7\x3\x2\x2\x2\x2B8\x2B9\x3\x2\x2\x2\x2B9\x9D\x3\x2\x2\x2\x2BA"+
		"\x2BB\aK\x2\x2\x2BB\x9F\x3\x2\x2\x2\x2BC\x2BE\a\x1C\x2\x2\x2BD\x2BF\x5"+
		"\xA2R\x2\x2BE\x2BD\x3\x2\x2\x2\x2BE\x2BF\x3\x2\x2\x2\x2BF\x2C0\x3\x2\x2"+
		"\x2\x2C0\x2C1\a\x1D\x2\x2\x2C1\xA1\x3\x2\x2\x2\x2C2\x2C7\x5\xA4S\x2\x2C3"+
		"\x2C4\a-\x2\x2\x2C4\x2C6\x5\xA4S\x2\x2C5\x2C3\x3\x2\x2\x2\x2C6\x2C9\x3"+
		"\x2\x2\x2\x2C7\x2C5\x3\x2\x2\x2\x2C7\x2C8\x3\x2\x2\x2\x2C8\xA3\x3\x2\x2"+
		"\x2\x2C9\x2C7\x3\x2\x2\x2\x2CA\x2CB\x5\xA6T\x2\x2CB\x2CC\a*\x2\x2\x2CC"+
		"\x2CD\x5l\x37\x2\x2CD\xA5\x3\x2\x2\x2\x2CE\x2CF\aK\x2\x2\x2CF\xA7\x3\x2"+
		"\x2\x2\x2D0\x2D1\t\x3\x2\x2\x2D1\x2D5\x5\xAEX\x2\x2D2\x2D5\x5\xACW\x2"+
		"\x2D3\x2D5\x5\xAAV\x2\x2D4\x2D0\x3\x2\x2\x2\x2D4\x2D2\x3\x2\x2\x2\x2D4"+
		"\x2D3\x3\x2\x2\x2\x2D5\xA9\x3\x2\x2\x2\x2D6\x2D7\a\x3\x2\x2\x2D7\xAB\x3"+
		"\x2\x2\x2\x2D8\x2DB\x5\xAEX\x2\x2D9\x2DB\t\n\x2\x2\x2DA\x2D8\x3\x2\x2"+
		"\x2\x2DA\x2D9\x3\x2\x2\x2\x2DB\xAD\x3\x2\x2\x2\x2DC\x2E0\x5\xB0Y\x2\x2DD"+
		"\x2E0\x5\xB2Z\x2\x2DE\x2E0\t\v\x2\x2\x2DF\x2DC\x3\x2\x2\x2\x2DF\x2DD\x3"+
		"\x2\x2\x2\x2DF\x2DE\x3\x2\x2\x2\x2E0\xAF\x3\x2\x2\x2\x2E1\x2E2\a!\x2\x2"+
		"\x2E2\xB1\x3\x2\x2\x2\x2E3\x2E4\a\"\x2\x2\x2E4\xB3\x3\x2\x2\x2L\xBA\xBC"+
		"\xC2\xCE\xD0\xD9\xE2\xEB\xED\xF3\x102\x104\x10E\x111\x119\x120\x124\x129"+
		"\x12F\x132\x135\x13C\x13F\x14C\x14F\x157\x15C\x166\x16F\x176\x17A\x186"+
		"\x18C\x197\x1A5\x1A7\x1B4\x1C5\x1C9\x1CD\x1D4\x1D8\x1DE\x1EB\x1F4\x1FB"+
		"\x200\x204\x208\x211\x223\x227\x22D\x231\x24B\x24D\x266\x274\x27E\x284"+
		"\x28D\x295\x299\x29E\x2A0\x2AD\x2B0\x2B5\x2B8\x2BE\x2C7\x2D4\x2DA\x2DF";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
