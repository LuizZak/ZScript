//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Luiz Fernando/Documents/Visual Studio 2013/Engines/ZScript/ZScript\ZScript.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class ZScriptParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, StringLiteral=4, StringEscape=5, T_EXPORT=6, T_FUNCTION=7, 
		T_OVERRIDE=8, T_OBJECT=9, T_SEQUENCE=10, T_VAR=11, T_LET=12, T_CONST=13, 
		T_NEW=14, T_IF=15, T_ELSE=16, T_WHILE=17, T_FOR=18, T_BREAK=19, T_CONTINUE=20, 
		T_SWITCH=21, T_CASE=22, T_DEFAULT=23, T_RETURN=24, T_LEFT_PAREN=25, T_RIGHT_PAREN=26, 
		T_LEFT_BRACKET=27, T_RIGHT_BRACKET=28, T_LEFT_CURLY=29, T_RIGHT_CURLY=30, 
		T_CLOSURE_RETURN=31, T_CLOSURE_CALL=32, T_INT=33, T_FLOAT=34, T_VOID=35, 
		T_ANY=36, T_STRING=37, T_BOOL=38, INT=39, HEX=40, BINARY=41, FLOAT=42, 
		T_FALSE=43, T_TRUE=44, T_NULL=45, T_QUOTES=46, T_DOUBLE_QUOTES=47, T_TRIPPLE_DOT=48, 
		T_DOUBLE_COLON=49, T_SEMICOLON=50, T_PERIOD=51, T_COMMA=52, T_MULT=53, 
		T_DIV=54, T_MOD=55, T_NOT=56, T_PLUS=57, T_MINUS=58, T_INCREMENT=59, T_DECREMENT=60, 
		T_BITWISE_AND=61, T_BITWISE_XOR=62, T_BITWISE_OR=63, T_EQUALITY=64, T_UNEQUALITY=65, 
		T_MORE_THAN_OR_EQUALS=66, T_LESS_THAN_OR_EQUALS=67, T_MORE_THAN=68, T_LESS_THAN=69, 
		T_LOGICAL_AND=70, T_LOGICAL_OR=71, T_EQUALS=72, T_PLUS_EQUALS=73, T_MINUS_EQUALS=74, 
		T_TIMES_EQUALS=75, T_DIV_EQUALS=76, T_MOD_EQUALS=77, T_XOR_EQUALS=78, 
		T_AND_EQUALS=79, T_TILDE_EQUALS=80, T_OR_EQUALS=81, IDENT=82, Whitespace=83, 
		Newline=84, BlockComment=85, LineComment=86, ImportDirective=87;
	public const int
		RULE_program = 0, RULE_scriptBody = 1, RULE_objectDefinition = 2, RULE_objectInherit = 3, 
		RULE_objectName = 4, RULE_objectBody = 5, RULE_objectField = 6, RULE_objectFunction = 7, 
		RULE_variableBlock = 8, RULE_globalVariable = 9, RULE_sequenceBlock = 10, 
		RULE_sequenceName = 11, RULE_sequenceBody = 12, RULE_sequenceFrame = 13, 
		RULE_sequenceFrameChange = 14, RULE_frameRange = 15, RULE_frameRangeElement = 16, 
		RULE_frameNumber = 17, RULE_functionDefinition = 18, RULE_exportDefinition = 19, 
		RULE_functionName = 20, RULE_functionBody = 21, RULE_functionArguments = 22, 
		RULE_argumentList = 23, RULE_returnType = 24, RULE_functionArg = 25, RULE_argumentName = 26, 
		RULE_typeAlias = 27, RULE_typeAliasBody = 28, RULE_typeAliasVariable = 29, 
		RULE_typeAliasFunction = 30, RULE_typeAliasName = 31, RULE_typeAliasInherit = 32, 
		RULE_statement = 33, RULE_blockStatement = 34, RULE_ifStatement = 35, 
		RULE_elseStatement = 36, RULE_switchStatement = 37, RULE_switchBlock = 38, 
		RULE_caseBlock = 39, RULE_defaultBlock = 40, RULE_whileStatement = 41, 
		RULE_forStatement = 42, RULE_forInit = 43, RULE_forCondition = 44, RULE_forIncrement = 45, 
		RULE_returnStatement = 46, RULE_breakStatement = 47, RULE_continueStatement = 48, 
		RULE_valueDecl = 49, RULE_varDecl = 50, RULE_letDecl = 51, RULE_variableDeclare = 52, 
		RULE_constantDeclare = 53, RULE_valueHolderDecl = 54, RULE_valueHolderName = 55, 
		RULE_type = 56, RULE_objectType = 57, RULE_typeName = 58, RULE_complexTypeName = 59, 
		RULE_primitiveType = 60, RULE_callableType = 61, RULE_listType = 62, RULE_callableTypeList = 63, 
		RULE_callableArgType = 64, RULE_expression = 65, RULE_multOp = 66, RULE_additionOp = 67, 
		RULE_bitwiseAndOp = 68, RULE_bitwiseXOrOp = 69, RULE_bitwiseOrOp = 70, 
		RULE_comparisionOp = 71, RULE_logicalAnd = 72, RULE_logicalOr = 73, RULE_assignmentExpression = 74, 
		RULE_newExpression = 75, RULE_closureExpression = 76, RULE_prefixOperator = 77, 
		RULE_postfixOperator = 78, RULE_unaryOperator = 79, RULE_assignmentOperator = 80, 
		RULE_funcCallArguments = 81, RULE_expressionList = 82, RULE_leftValue = 83, 
		RULE_leftValueAccess = 84, RULE_functionCall = 85, RULE_fieldAccess = 86, 
		RULE_arrayAccess = 87, RULE_objectAccess = 88, RULE_valueAccess = 89, 
		RULE_memberName = 90, RULE_arrayLiteral = 91, RULE_objectLiteral = 92, 
		RULE_stringLiteral = 93, RULE_objectEntryList = 94, RULE_objectEntryDefinition = 95, 
		RULE_entryName = 96, RULE_compileConstant = 97, RULE_constantAtom = 98, 
		RULE_numericAtom = 99, RULE_hexadecimalNumber = 100, RULE_binaryNumber = 101;
	public static readonly string[] ruleNames = {
		"program", "scriptBody", "objectDefinition", "objectInherit", "objectName", 
		"objectBody", "objectField", "objectFunction", "variableBlock", "globalVariable", 
		"sequenceBlock", "sequenceName", "sequenceBody", "sequenceFrame", "sequenceFrameChange", 
		"frameRange", "frameRangeElement", "frameNumber", "functionDefinition", 
		"exportDefinition", "functionName", "functionBody", "functionArguments", 
		"argumentList", "returnType", "functionArg", "argumentName", "typeAlias", 
		"typeAliasBody", "typeAliasVariable", "typeAliasFunction", "typeAliasName", 
		"typeAliasInherit", "statement", "blockStatement", "ifStatement", "elseStatement", 
		"switchStatement", "switchBlock", "caseBlock", "defaultBlock", "whileStatement", 
		"forStatement", "forInit", "forCondition", "forIncrement", "returnStatement", 
		"breakStatement", "continueStatement", "valueDecl", "varDecl", "letDecl", 
		"variableDeclare", "constantDeclare", "valueHolderDecl", "valueHolderName", 
		"type", "objectType", "typeName", "complexTypeName", "primitiveType", 
		"callableType", "listType", "callableTypeList", "callableArgType", "expression", 
		"multOp", "additionOp", "bitwiseAndOp", "bitwiseXOrOp", "bitwiseOrOp", 
		"comparisionOp", "logicalAnd", "logicalOr", "assignmentExpression", "newExpression", 
		"closureExpression", "prefixOperator", "postfixOperator", "unaryOperator", 
		"assignmentOperator", "funcCallArguments", "expressionList", "leftValue", 
		"leftValueAccess", "functionCall", "fieldAccess", "arrayAccess", "objectAccess", 
		"valueAccess", "memberName", "arrayLiteral", "objectLiteral", "stringLiteral", 
		"objectEntryList", "objectEntryDefinition", "entryName", "compileConstant", 
		"constantAtom", "numericAtom", "hexadecimalNumber", "binaryNumber"
	};

	private static readonly string[] _LiteralNames = {
		null, "'typeAlias'", "'<-'", "'?'", null, null, "'@'", "'func'", "'override'", 
		"'object'", "'sequence'", "'var'", "'let'", "'const'", "'new'", "'if'", 
		"'else'", "'while'", "'for'", "'break'", "'continue'", "'switch'", "'case'", 
		"'default'", "'return'", "'('", "')'", "'['", "']'", "'{'", "'}'", "'->'", 
		"'=>'", "'int'", "'float'", "'void'", "'any'", "'string'", "'bool'", null, 
		null, null, null, "'false'", "'true'", "'null'", "'''", "'\"'", "'...'", 
		"':'", "';'", "'.'", "','", "'*'", "'/'", "'%'", "'!'", "'+'", "'-'", 
		"'++'", "'--'", "'&'", "'^'", "'|'", "'=='", "'!='", "'>='", "'<='", "'>'", 
		"'<'", "'&&'", "'||'", "'='", "'+='", "'-='", "'*='", "'/='", "'%='", 
		"'^='", "'&='", "'~='", "'|='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "StringLiteral", "StringEscape", "T_EXPORT", "T_FUNCTION", 
		"T_OVERRIDE", "T_OBJECT", "T_SEQUENCE", "T_VAR", "T_LET", "T_CONST", "T_NEW", 
		"T_IF", "T_ELSE", "T_WHILE", "T_FOR", "T_BREAK", "T_CONTINUE", "T_SWITCH", 
		"T_CASE", "T_DEFAULT", "T_RETURN", "T_LEFT_PAREN", "T_RIGHT_PAREN", "T_LEFT_BRACKET", 
		"T_RIGHT_BRACKET", "T_LEFT_CURLY", "T_RIGHT_CURLY", "T_CLOSURE_RETURN", 
		"T_CLOSURE_CALL", "T_INT", "T_FLOAT", "T_VOID", "T_ANY", "T_STRING", "T_BOOL", 
		"INT", "HEX", "BINARY", "FLOAT", "T_FALSE", "T_TRUE", "T_NULL", "T_QUOTES", 
		"T_DOUBLE_QUOTES", "T_TRIPPLE_DOT", "T_DOUBLE_COLON", "T_SEMICOLON", "T_PERIOD", 
		"T_COMMA", "T_MULT", "T_DIV", "T_MOD", "T_NOT", "T_PLUS", "T_MINUS", "T_INCREMENT", 
		"T_DECREMENT", "T_BITWISE_AND", "T_BITWISE_XOR", "T_BITWISE_OR", "T_EQUALITY", 
		"T_UNEQUALITY", "T_MORE_THAN_OR_EQUALS", "T_LESS_THAN_OR_EQUALS", "T_MORE_THAN", 
		"T_LESS_THAN", "T_LOGICAL_AND", "T_LOGICAL_OR", "T_EQUALS", "T_PLUS_EQUALS", 
		"T_MINUS_EQUALS", "T_TIMES_EQUALS", "T_DIV_EQUALS", "T_MOD_EQUALS", "T_XOR_EQUALS", 
		"T_AND_EQUALS", "T_TILDE_EQUALS", "T_OR_EQUALS", "IDENT", "Whitespace", 
		"Newline", "BlockComment", "LineComment", "ImportDirective"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ZScript.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public ZScriptParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ScriptBodyContext scriptBody() {
			return GetRuleContext<ScriptBodyContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204; scriptBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptBodyContext : ParserRuleContext {
		public VariableBlockContext[] variableBlock() {
			return GetRuleContexts<VariableBlockContext>();
		}
		public VariableBlockContext variableBlock(int i) {
			return GetRuleContext<VariableBlockContext>(i);
		}
		public FunctionDefinitionContext[] functionDefinition() {
			return GetRuleContexts<FunctionDefinitionContext>();
		}
		public FunctionDefinitionContext functionDefinition(int i) {
			return GetRuleContext<FunctionDefinitionContext>(i);
		}
		public ExportDefinitionContext[] exportDefinition() {
			return GetRuleContexts<ExportDefinitionContext>();
		}
		public ExportDefinitionContext exportDefinition(int i) {
			return GetRuleContext<ExportDefinitionContext>(i);
		}
		public ObjectDefinitionContext[] objectDefinition() {
			return GetRuleContexts<ObjectDefinitionContext>();
		}
		public ObjectDefinitionContext objectDefinition(int i) {
			return GetRuleContext<ObjectDefinitionContext>(i);
		}
		public SequenceBlockContext[] sequenceBlock() {
			return GetRuleContexts<SequenceBlockContext>();
		}
		public SequenceBlockContext sequenceBlock(int i) {
			return GetRuleContext<SequenceBlockContext>(i);
		}
		public TypeAliasContext[] typeAlias() {
			return GetRuleContexts<TypeAliasContext>();
		}
		public TypeAliasContext typeAlias(int i) {
			return GetRuleContext<TypeAliasContext>(i);
		}
		public ScriptBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scriptBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterScriptBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitScriptBody(this);
		}
	}

	[RuleVersion(0)]
	public ScriptBodyContext scriptBody() {
		ScriptBodyContext _localctx = new ScriptBodyContext(Context, State);
		EnterRule(_localctx, 2, RULE_scriptBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T_EXPORT) | (1L << T_FUNCTION) | (1L << T_OBJECT) | (1L << T_SEQUENCE) | (1L << T_LEFT_BRACKET))) != 0)) {
				{
				State = 212;
				switch (TokenStream.La(1)) {
				case T_LEFT_BRACKET:
					{
					State = 206; variableBlock();
					}
					break;
				case T_FUNCTION:
					{
					State = 207; functionDefinition();
					}
					break;
				case T_EXPORT:
					{
					State = 208; exportDefinition();
					}
					break;
				case T_OBJECT:
					{
					State = 209; objectDefinition();
					}
					break;
				case T_SEQUENCE:
					{
					State = 210; sequenceBlock();
					}
					break;
				case T__0:
					{
					State = 211; typeAlias();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 216;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectDefinitionContext : ParserRuleContext {
		public ObjectNameContext objectName() {
			return GetRuleContext<ObjectNameContext>(0);
		}
		public ObjectBodyContext objectBody() {
			return GetRuleContext<ObjectBodyContext>(0);
		}
		public ObjectInheritContext objectInherit() {
			return GetRuleContext<ObjectInheritContext>(0);
		}
		public ObjectDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterObjectDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitObjectDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ObjectDefinitionContext objectDefinition() {
		ObjectDefinitionContext _localctx = new ObjectDefinitionContext(Context, State);
		EnterRule(_localctx, 4, RULE_objectDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217; Match(T_OBJECT);
			State = 218; objectName();
			State = 220;
			_la = TokenStream.La(1);
			if (_la==T_DOUBLE_COLON) {
				{
				State = 219; objectInherit();
				}
			}

			State = 222; objectBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectInheritContext : ParserRuleContext {
		public ObjectNameContext objectName() {
			return GetRuleContext<ObjectNameContext>(0);
		}
		public ObjectInheritContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectInherit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterObjectInherit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitObjectInherit(this);
		}
	}

	[RuleVersion(0)]
	public ObjectInheritContext objectInherit() {
		ObjectInheritContext _localctx = new ObjectInheritContext(Context, State);
		EnterRule(_localctx, 6, RULE_objectInherit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224; Match(T_DOUBLE_COLON);
			State = 225; objectName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectNameContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(ZScriptParser.IDENT, 0); }
		public ObjectNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterObjectName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitObjectName(this);
		}
	}

	[RuleVersion(0)]
	public ObjectNameContext objectName() {
		ObjectNameContext _localctx = new ObjectNameContext(Context, State);
		EnterRule(_localctx, 8, RULE_objectName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227; Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectBodyContext : ParserRuleContext {
		public ObjectFieldContext[] objectField() {
			return GetRuleContexts<ObjectFieldContext>();
		}
		public ObjectFieldContext objectField(int i) {
			return GetRuleContext<ObjectFieldContext>(i);
		}
		public ObjectFunctionContext[] objectFunction() {
			return GetRuleContexts<ObjectFunctionContext>();
		}
		public ObjectFunctionContext objectFunction(int i) {
			return GetRuleContext<ObjectFunctionContext>(i);
		}
		public ObjectBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterObjectBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitObjectBody(this);
		}
	}

	[RuleVersion(0)]
	public ObjectBodyContext objectBody() {
		ObjectBodyContext _localctx = new ObjectBodyContext(Context, State);
		EnterRule(_localctx, 10, RULE_objectBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229; Match(T_LEFT_CURLY);
			State = 234;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T_FUNCTION) | (1L << T_OVERRIDE) | (1L << T_VAR))) != 0)) {
				{
				State = 232;
				switch (TokenStream.La(1)) {
				case T_VAR:
					{
					State = 230; objectField();
					}
					break;
				case T_FUNCTION:
				case T_OVERRIDE:
					{
					State = 231; objectFunction();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 236;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 237; Match(T_RIGHT_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectFieldContext : ParserRuleContext {
		public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		public ObjectFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectField; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterObjectField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitObjectField(this);
		}
	}

	[RuleVersion(0)]
	public ObjectFieldContext objectField() {
		ObjectFieldContext _localctx = new ObjectFieldContext(Context, State);
		EnterRule(_localctx, 12, RULE_objectField);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239; varDecl();
			State = 240; Match(T_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectFunctionContext : ParserRuleContext {
		public FunctionDefinitionContext functionDefinition() {
			return GetRuleContext<FunctionDefinitionContext>(0);
		}
		public ObjectFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterObjectFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitObjectFunction(this);
		}
	}

	[RuleVersion(0)]
	public ObjectFunctionContext objectFunction() {
		ObjectFunctionContext _localctx = new ObjectFunctionContext(Context, State);
		EnterRule(_localctx, 14, RULE_objectFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			_la = TokenStream.La(1);
			if (_la==T_OVERRIDE) {
				{
				State = 242; Match(T_OVERRIDE);
				}
			}

			State = 245; functionDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableBlockContext : ParserRuleContext {
		public GlobalVariableContext[] globalVariable() {
			return GetRuleContexts<GlobalVariableContext>();
		}
		public GlobalVariableContext globalVariable(int i) {
			return GetRuleContext<GlobalVariableContext>(i);
		}
		public VariableBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterVariableBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitVariableBlock(this);
		}
	}

	[RuleVersion(0)]
	public VariableBlockContext variableBlock() {
		VariableBlockContext _localctx = new VariableBlockContext(Context, State);
		EnterRule(_localctx, 16, RULE_variableBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247; Match(T_LEFT_BRACKET);
			State = 251;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T_CONST || _la==IDENT) {
				{
				{
				State = 248; globalVariable();
				}
				}
				State = 253;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 254; Match(T_RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVariableContext : ParserRuleContext {
		public VariableDeclareContext variableDeclare() {
			return GetRuleContext<VariableDeclareContext>(0);
		}
		public ITerminalNode T_CONST() { return GetToken(ZScriptParser.T_CONST, 0); }
		public GlobalVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterGlobalVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitGlobalVariable(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVariableContext globalVariable() {
		GlobalVariableContext _localctx = new GlobalVariableContext(Context, State);
		EnterRule(_localctx, 18, RULE_globalVariable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			_la = TokenStream.La(1);
			if (_la==T_CONST) {
				{
				State = 256; Match(T_CONST);
				}
			}

			State = 259; variableDeclare();
			State = 260; Match(T_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SequenceBlockContext : ParserRuleContext {
		public SequenceNameContext sequenceName() {
			return GetRuleContext<SequenceNameContext>(0);
		}
		public SequenceBodyContext sequenceBody() {
			return GetRuleContext<SequenceBodyContext>(0);
		}
		public SequenceBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequenceBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterSequenceBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitSequenceBlock(this);
		}
	}

	[RuleVersion(0)]
	public SequenceBlockContext sequenceBlock() {
		SequenceBlockContext _localctx = new SequenceBlockContext(Context, State);
		EnterRule(_localctx, 20, RULE_sequenceBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262; Match(T_SEQUENCE);
			State = 263; sequenceName();
			State = 264; sequenceBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SequenceNameContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(ZScriptParser.IDENT, 0); }
		public SequenceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequenceName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterSequenceName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitSequenceName(this);
		}
	}

	[RuleVersion(0)]
	public SequenceNameContext sequenceName() {
		SequenceNameContext _localctx = new SequenceNameContext(Context, State);
		EnterRule(_localctx, 22, RULE_sequenceName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266; Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SequenceBodyContext : ParserRuleContext {
		public ObjectFieldContext[] objectField() {
			return GetRuleContexts<ObjectFieldContext>();
		}
		public ObjectFieldContext objectField(int i) {
			return GetRuleContext<ObjectFieldContext>(i);
		}
		public SequenceFrameContext[] sequenceFrame() {
			return GetRuleContexts<SequenceFrameContext>();
		}
		public SequenceFrameContext sequenceFrame(int i) {
			return GetRuleContext<SequenceFrameContext>(i);
		}
		public SequenceFrameChangeContext[] sequenceFrameChange() {
			return GetRuleContexts<SequenceFrameChangeContext>();
		}
		public SequenceFrameChangeContext sequenceFrameChange(int i) {
			return GetRuleContext<SequenceFrameChangeContext>(i);
		}
		public SequenceBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequenceBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterSequenceBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitSequenceBody(this);
		}
	}

	[RuleVersion(0)]
	public SequenceBodyContext sequenceBody() {
		SequenceBodyContext _localctx = new SequenceBodyContext(Context, State);
		EnterRule(_localctx, 24, RULE_sequenceBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268; Match(T_LEFT_BRACKET);
			State = 274;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (((((_la - 11)) & ~0x3f) == 0 && ((1L << (_la - 11)) & ((1L << (T_VAR - 11)) | (1L << (T_LEFT_CURLY - 11)) | (1L << (INT - 11)) | (1L << (T_PLUS - 11)) | (1L << (T_MINUS - 11)) | (1L << (T_EQUALS - 11)))) != 0)) {
				{
				State = 272;
				switch (TokenStream.La(1)) {
				case T_VAR:
					{
					State = 269; objectField();
					}
					break;
				case T_LEFT_CURLY:
				case INT:
				case T_PLUS:
					{
					State = 270; sequenceFrame();
					}
					break;
				case T_MINUS:
				case T_EQUALS:
					{
					State = 271; sequenceFrameChange();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 276;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 277; Match(T_RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SequenceFrameContext : ParserRuleContext {
		public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		public FrameRangeContext frameRange() {
			return GetRuleContext<FrameRangeContext>(0);
		}
		public SequenceFrameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequenceFrame; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterSequenceFrame(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitSequenceFrame(this);
		}
	}

	[RuleVersion(0)]
	public SequenceFrameContext sequenceFrame() {
		SequenceFrameContext _localctx = new SequenceFrameContext(Context, State);
		EnterRule(_localctx, 26, RULE_sequenceFrame);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280;
			_la = TokenStream.La(1);
			if (_la==INT || _la==T_PLUS) {
				{
				State = 279; frameRange();
				}
			}

			State = 282; blockStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SequenceFrameChangeContext : ParserRuleContext {
		public FrameNumberContext frameNumber() {
			return GetRuleContext<FrameNumberContext>(0);
		}
		public SequenceFrameChangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequenceFrameChange; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterSequenceFrameChange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitSequenceFrameChange(this);
		}
	}

	[RuleVersion(0)]
	public SequenceFrameChangeContext sequenceFrameChange() {
		SequenceFrameChangeContext _localctx = new SequenceFrameChangeContext(Context, State);
		EnterRule(_localctx, 28, RULE_sequenceFrameChange);
		try {
			State = 288;
			switch (TokenStream.La(1)) {
			case T_EQUALS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 284; Match(T_EQUALS);
				State = 285; frameNumber();
				}
				break;
			case T_MINUS:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 286; Match(T_MINUS);
				State = 287; frameNumber();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameRangeContext : ParserRuleContext {
		public FrameRangeElementContext[] frameRangeElement() {
			return GetRuleContexts<FrameRangeElementContext>();
		}
		public FrameRangeElementContext frameRangeElement(int i) {
			return GetRuleContext<FrameRangeElementContext>(i);
		}
		public FrameRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameRange; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFrameRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFrameRange(this);
		}
	}

	[RuleVersion(0)]
	public FrameRangeContext frameRange() {
		FrameRangeContext _localctx = new FrameRangeContext(Context, State);
		EnterRule(_localctx, 30, RULE_frameRange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290; frameRangeElement();
			State = 295;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T_COMMA) {
				{
				{
				State = 291; Match(T_COMMA);
				State = 292; frameRangeElement();
				}
				}
				State = 297;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameRangeElementContext : ParserRuleContext {
		public FrameNumberContext[] frameNumber() {
			return GetRuleContexts<FrameNumberContext>();
		}
		public FrameNumberContext frameNumber(int i) {
			return GetRuleContext<FrameNumberContext>(i);
		}
		public FrameRangeElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameRangeElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFrameRangeElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFrameRangeElement(this);
		}
	}

	[RuleVersion(0)]
	public FrameRangeElementContext frameRangeElement() {
		FrameRangeElementContext _localctx = new FrameRangeElementContext(Context, State);
		EnterRule(_localctx, 32, RULE_frameRangeElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299;
			_la = TokenStream.La(1);
			if (_la==T_PLUS) {
				{
				State = 298; Match(T_PLUS);
				}
			}

			State = 301; frameNumber();
			State = 304;
			_la = TokenStream.La(1);
			if (_la==T_MINUS) {
				{
				State = 302; Match(T_MINUS);
				State = 303; frameNumber();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameNumberContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(ZScriptParser.INT, 0); }
		public FrameNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFrameNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFrameNumber(this);
		}
	}

	[RuleVersion(0)]
	public FrameNumberContext frameNumber() {
		FrameNumberContext _localctx = new FrameNumberContext(Context, State);
		EnterRule(_localctx, 34, RULE_frameNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306; Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public FunctionArgumentsContext functionArguments() {
			return GetRuleContext<FunctionArgumentsContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFunctionDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFunctionDefinition(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 36, RULE_functionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308; Match(T_FUNCTION);
			State = 309; functionName();
			State = 311;
			_la = TokenStream.La(1);
			if (_la==T_LEFT_PAREN) {
				{
				State = 310; functionArguments();
				}
			}

			State = 314;
			_la = TokenStream.La(1);
			if (_la==T_DOUBLE_COLON) {
				{
				State = 313; returnType();
				}
			}

			State = 316; functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportDefinitionContext : ParserRuleContext {
		public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		public FunctionArgumentsContext functionArguments() {
			return GetRuleContext<FunctionArgumentsContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public ExportDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterExportDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitExportDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ExportDefinitionContext exportDefinition() {
		ExportDefinitionContext _localctx = new ExportDefinitionContext(Context, State);
		EnterRule(_localctx, 38, RULE_exportDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318; Match(T_EXPORT);
			State = 319; functionName();
			State = 321;
			_la = TokenStream.La(1);
			if (_la==T_LEFT_PAREN) {
				{
				State = 320; functionArguments();
				}
			}

			State = 324;
			_la = TokenStream.La(1);
			if (_la==T_DOUBLE_COLON) {
				{
				State = 323; returnType();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionNameContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(ZScriptParser.IDENT, 0); }
		public FunctionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFunctionName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFunctionName(this);
		}
	}

	[RuleVersion(0)]
	public FunctionNameContext functionName() {
		FunctionNameContext _localctx = new FunctionNameContext(Context, State);
		EnterRule(_localctx, 40, RULE_functionName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 326; Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFunctionBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFunctionBody(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 42, RULE_functionBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328; blockStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionArgumentsContext : ParserRuleContext {
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public FunctionArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFunctionArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFunctionArguments(this);
		}
	}

	[RuleVersion(0)]
	public FunctionArgumentsContext functionArguments() {
		FunctionArgumentsContext _localctx = new FunctionArgumentsContext(Context, State);
		EnterRule(_localctx, 44, RULE_functionArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330; Match(T_LEFT_PAREN);
			State = 332;
			_la = TokenStream.La(1);
			if (_la==IDENT) {
				{
				State = 331; argumentList();
				}
			}

			State = 334; Match(T_RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public FunctionArgContext[] functionArg() {
			return GetRuleContexts<FunctionArgContext>();
		}
		public FunctionArgContext functionArg(int i) {
			return GetRuleContext<FunctionArgContext>(i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 46, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 336; functionArg();
			State = 341;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T_COMMA) {
				{
				{
				State = 337; Match(T_COMMA);
				State = 338; functionArg();
				}
				}
				State = 343;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnTypeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterReturnType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitReturnType(this);
		}
	}

	[RuleVersion(0)]
	public ReturnTypeContext returnType() {
		ReturnTypeContext _localctx = new ReturnTypeContext(Context, State);
		EnterRule(_localctx, 48, RULE_returnType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 344; Match(T_DOUBLE_COLON);
			State = 345; type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionArgContext : ParserRuleContext {
		public IToken variadic;
		public ArgumentNameContext argumentName() {
			return GetRuleContext<ArgumentNameContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public CompileConstantContext compileConstant() {
			return GetRuleContext<CompileConstantContext>(0);
		}
		public FunctionArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFunctionArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFunctionArg(this);
		}
	}

	[RuleVersion(0)]
	public FunctionArgContext functionArg() {
		FunctionArgContext _localctx = new FunctionArgContext(Context, State);
		EnterRule(_localctx, 50, RULE_functionArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 347; argumentName();
			State = 350;
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				State = 348; Match(T_DOUBLE_COLON);
				State = 349; type();
				}
				break;
			}
			State = 355;
			switch (TokenStream.La(1)) {
			case T_TRIPPLE_DOT:
				{
				State = 352; _localctx.variadic = Match(T_TRIPPLE_DOT);
				}
				break;
			case T_EQUALS:
				{
				{
				State = 353; Match(T_EQUALS);
				State = 354; compileConstant();
				}
				}
				break;
			case T_RIGHT_PAREN:
			case T_CLOSURE_CALL:
			case T_DOUBLE_COLON:
			case T_COMMA:
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentNameContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(ZScriptParser.IDENT, 0); }
		public ArgumentNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterArgumentName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitArgumentName(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentNameContext argumentName() {
		ArgumentNameContext _localctx = new ArgumentNameContext(Context, State);
		EnterRule(_localctx, 52, RULE_argumentName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 357; Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeAliasContext : ParserRuleContext {
		public TypeAliasNameContext typeAliasName() {
			return GetRuleContext<TypeAliasNameContext>(0);
		}
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public TypeAliasBodyContext typeAliasBody() {
			return GetRuleContext<TypeAliasBodyContext>(0);
		}
		public TypeAliasInheritContext typeAliasInherit() {
			return GetRuleContext<TypeAliasInheritContext>(0);
		}
		public TypeAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeAlias; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterTypeAlias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitTypeAlias(this);
		}
	}

	[RuleVersion(0)]
	public TypeAliasContext typeAlias() {
		TypeAliasContext _localctx = new TypeAliasContext(Context, State);
		EnterRule(_localctx, 54, RULE_typeAlias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 359; Match(T__0);
			State = 360; typeAliasName();
			State = 362;
			_la = TokenStream.La(1);
			if (_la==T__1) {
				{
				State = 361; typeAliasInherit();
				}
			}

			State = 364; Match(T_DOUBLE_COLON);
			State = 365; stringLiteral();
			State = 368;
			switch (TokenStream.La(1)) {
			case T_SEMICOLON:
				{
				State = 366; Match(T_SEMICOLON);
				}
				break;
			case T_LEFT_CURLY:
				{
				State = 367; typeAliasBody();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeAliasBodyContext : ParserRuleContext {
		public TypeAliasVariableContext[] typeAliasVariable() {
			return GetRuleContexts<TypeAliasVariableContext>();
		}
		public TypeAliasVariableContext typeAliasVariable(int i) {
			return GetRuleContext<TypeAliasVariableContext>(i);
		}
		public TypeAliasFunctionContext[] typeAliasFunction() {
			return GetRuleContexts<TypeAliasFunctionContext>();
		}
		public TypeAliasFunctionContext typeAliasFunction(int i) {
			return GetRuleContext<TypeAliasFunctionContext>(i);
		}
		public TypeAliasBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeAliasBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterTypeAliasBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitTypeAliasBody(this);
		}
	}

	[RuleVersion(0)]
	public TypeAliasBodyContext typeAliasBody() {
		TypeAliasBodyContext _localctx = new TypeAliasBodyContext(Context, State);
		EnterRule(_localctx, 56, RULE_typeAliasBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370; Match(T_LEFT_CURLY);
			State = 377;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T_FUNCTION) | (1L << T_VAR) | (1L << T_LET))) != 0)) {
				{
				State = 375;
				switch (TokenStream.La(1)) {
				case T_VAR:
				case T_LET:
					{
					State = 371; typeAliasVariable();
					}
					break;
				case T_FUNCTION:
					{
					State = 372; typeAliasFunction();
					State = 373; Match(T_SEMICOLON);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 379;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 380; Match(T_RIGHT_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeAliasVariableContext : ParserRuleContext {
		public ValueDeclContext valueDecl() {
			return GetRuleContext<ValueDeclContext>(0);
		}
		public TypeAliasVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeAliasVariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterTypeAliasVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitTypeAliasVariable(this);
		}
	}

	[RuleVersion(0)]
	public TypeAliasVariableContext typeAliasVariable() {
		TypeAliasVariableContext _localctx = new TypeAliasVariableContext(Context, State);
		EnterRule(_localctx, 58, RULE_typeAliasVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 382; valueDecl();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeAliasFunctionContext : ParserRuleContext {
		public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public FunctionArgumentsContext functionArguments() {
			return GetRuleContext<FunctionArgumentsContext>(0);
		}
		public TypeAliasFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeAliasFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterTypeAliasFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitTypeAliasFunction(this);
		}
	}

	[RuleVersion(0)]
	public TypeAliasFunctionContext typeAliasFunction() {
		TypeAliasFunctionContext _localctx = new TypeAliasFunctionContext(Context, State);
		EnterRule(_localctx, 60, RULE_typeAliasFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 384; Match(T_FUNCTION);
			State = 385; functionName();
			State = 387;
			_la = TokenStream.La(1);
			if (_la==T_LEFT_PAREN) {
				{
				State = 386; functionArguments();
				}
			}

			State = 389; returnType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeAliasNameContext : ParserRuleContext {
		public ComplexTypeNameContext complexTypeName() {
			return GetRuleContext<ComplexTypeNameContext>(0);
		}
		public TypeAliasNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeAliasName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterTypeAliasName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitTypeAliasName(this);
		}
	}

	[RuleVersion(0)]
	public TypeAliasNameContext typeAliasName() {
		TypeAliasNameContext _localctx = new TypeAliasNameContext(Context, State);
		EnterRule(_localctx, 62, RULE_typeAliasName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391; complexTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeAliasInheritContext : ParserRuleContext {
		public TypeAliasNameContext typeAliasName() {
			return GetRuleContext<TypeAliasNameContext>(0);
		}
		public TypeAliasInheritContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeAliasInherit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterTypeAliasInherit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitTypeAliasInherit(this);
		}
	}

	[RuleVersion(0)]
	public TypeAliasInheritContext typeAliasInherit() {
		TypeAliasInheritContext _localctx = new TypeAliasInheritContext(Context, State);
		EnterRule(_localctx, 64, RULE_typeAliasInherit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 393; Match(T__1);
			State = 394; typeAliasName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		public ValueDeclContext valueDecl() {
			return GetRuleContext<ValueDeclContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 66, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412;
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				{
				{
				State = 398;
				switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
				case 1:
					{
					State = 396; expression(0);
					}
					break;
				case 2:
					{
					State = 397; assignmentExpression();
					}
					break;
				}
				State = 400; Match(T_SEMICOLON);
				}
				}
				break;
			case 2:
				{
				State = 402; blockStatement();
				}
				break;
			case 3:
				{
				State = 403; Match(T_SEMICOLON);
				}
				break;
			case 4:
				{
				State = 404; ifStatement();
				}
				break;
			case 5:
				{
				State = 405; whileStatement();
				}
				break;
			case 6:
				{
				State = 406; forStatement();
				}
				break;
			case 7:
				{
				State = 407; switchStatement();
				}
				break;
			case 8:
				{
				State = 408; returnStatement();
				}
				break;
			case 9:
				{
				State = 409; breakStatement();
				}
				break;
			case 10:
				{
				State = 410; continueStatement();
				}
				break;
			case 11:
				{
				State = 411; valueDecl();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(Context, State);
		EnterRule(_localctx, 68, RULE_blockStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414; Match(T_LEFT_CURLY);
			State = 418;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << StringLiteral) | (1L << T_VAR) | (1L << T_LET) | (1L << T_NEW) | (1L << T_IF) | (1L << T_WHILE) | (1L << T_FOR) | (1L << T_BREAK) | (1L << T_CONTINUE) | (1L << T_SWITCH) | (1L << T_RETURN) | (1L << T_LEFT_PAREN) | (1L << T_LEFT_BRACKET) | (1L << T_LEFT_CURLY) | (1L << INT) | (1L << HEX) | (1L << BINARY) | (1L << FLOAT) | (1L << T_FALSE) | (1L << T_TRUE) | (1L << T_NULL) | (1L << T_SEMICOLON) | (1L << T_NOT) | (1L << T_MINUS) | (1L << T_INCREMENT) | (1L << T_DECREMENT))) != 0) || _la==IDENT) {
				{
				{
				State = 415; statement();
				}
				}
				State = 420;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 421; Match(T_RIGHT_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 70, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 423; Match(T_IF);
			State = 424; Match(T_LEFT_PAREN);
			State = 425; expression(0);
			State = 426; Match(T_RIGHT_PAREN);
			State = 427; statement();
			State = 429;
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				{
				State = 428; elseStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 72, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 431; Match(T_ELSE);
			State = 432; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SwitchBlockContext switchBlock() {
			return GetRuleContext<SwitchBlockContext>(0);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 74, RULE_switchStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 434; Match(T_SWITCH);
			State = 435; Match(T_LEFT_PAREN);
			State = 436; expression(0);
			State = 437; Match(T_RIGHT_PAREN);
			State = 438; switchBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBlockContext : ParserRuleContext {
		public CaseBlockContext[] caseBlock() {
			return GetRuleContexts<CaseBlockContext>();
		}
		public CaseBlockContext caseBlock(int i) {
			return GetRuleContext<CaseBlockContext>(i);
		}
		public DefaultBlockContext defaultBlock() {
			return GetRuleContext<DefaultBlockContext>(0);
		}
		public SwitchBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterSwitchBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitSwitchBlock(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBlockContext switchBlock() {
		SwitchBlockContext _localctx = new SwitchBlockContext(Context, State);
		EnterRule(_localctx, 76, RULE_switchBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 440; Match(T_LEFT_CURLY);
			State = 444;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T_CASE) {
				{
				{
				State = 441; caseBlock();
				}
				}
				State = 446;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 448;
			_la = TokenStream.La(1);
			if (_la==T_DEFAULT) {
				{
				State = 447; defaultBlock();
				}
			}

			State = 450; Match(T_RIGHT_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseBlockContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public CaseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterCaseBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitCaseBlock(this);
		}
	}

	[RuleVersion(0)]
	public CaseBlockContext caseBlock() {
		CaseBlockContext _localctx = new CaseBlockContext(Context, State);
		EnterRule(_localctx, 78, RULE_caseBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 452; Match(T_CASE);
			State = 453; expression(0);
			State = 454; Match(T_DOUBLE_COLON);
			State = 458;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << StringLiteral) | (1L << T_VAR) | (1L << T_LET) | (1L << T_NEW) | (1L << T_IF) | (1L << T_WHILE) | (1L << T_FOR) | (1L << T_BREAK) | (1L << T_CONTINUE) | (1L << T_SWITCH) | (1L << T_RETURN) | (1L << T_LEFT_PAREN) | (1L << T_LEFT_BRACKET) | (1L << T_LEFT_CURLY) | (1L << INT) | (1L << HEX) | (1L << BINARY) | (1L << FLOAT) | (1L << T_FALSE) | (1L << T_TRUE) | (1L << T_NULL) | (1L << T_SEMICOLON) | (1L << T_NOT) | (1L << T_MINUS) | (1L << T_INCREMENT) | (1L << T_DECREMENT))) != 0) || _la==IDENT) {
				{
				{
				State = 455; statement();
				}
				}
				State = 460;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultBlockContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public DefaultBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterDefaultBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitDefaultBlock(this);
		}
	}

	[RuleVersion(0)]
	public DefaultBlockContext defaultBlock() {
		DefaultBlockContext _localctx = new DefaultBlockContext(Context, State);
		EnterRule(_localctx, 80, RULE_defaultBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 461; Match(T_DEFAULT);
			State = 462; Match(T_DOUBLE_COLON);
			State = 464;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 463; statement();
				}
				}
				State = 466;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << StringLiteral) | (1L << T_VAR) | (1L << T_LET) | (1L << T_NEW) | (1L << T_IF) | (1L << T_WHILE) | (1L << T_FOR) | (1L << T_BREAK) | (1L << T_CONTINUE) | (1L << T_SWITCH) | (1L << T_RETURN) | (1L << T_LEFT_PAREN) | (1L << T_LEFT_BRACKET) | (1L << T_LEFT_CURLY) | (1L << INT) | (1L << HEX) | (1L << BINARY) | (1L << FLOAT) | (1L << T_FALSE) | (1L << T_TRUE) | (1L << T_NULL) | (1L << T_SEMICOLON) | (1L << T_NOT) | (1L << T_MINUS) | (1L << T_INCREMENT) | (1L << T_DECREMENT))) != 0) || _la==IDENT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 82, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 468; Match(T_WHILE);
			State = 469; Match(T_LEFT_PAREN);
			State = 470; expression(0);
			State = 471; Match(T_RIGHT_PAREN);
			State = 472; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ForInitContext forInit() {
			return GetRuleContext<ForInitContext>(0);
		}
		public ForConditionContext forCondition() {
			return GetRuleContext<ForConditionContext>(0);
		}
		public ForIncrementContext forIncrement() {
			return GetRuleContext<ForIncrementContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 84, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 474; Match(T_FOR);
			State = 475; Match(T_LEFT_PAREN);
			State = 477;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << StringLiteral) | (1L << T_VAR) | (1L << T_NEW) | (1L << T_LEFT_PAREN) | (1L << T_LEFT_BRACKET) | (1L << T_LEFT_CURLY) | (1L << INT) | (1L << HEX) | (1L << BINARY) | (1L << FLOAT) | (1L << T_FALSE) | (1L << T_TRUE) | (1L << T_NULL) | (1L << T_NOT) | (1L << T_MINUS) | (1L << T_INCREMENT) | (1L << T_DECREMENT))) != 0) || _la==IDENT) {
				{
				State = 476; forInit();
				}
			}

			State = 479; Match(T_SEMICOLON);
			State = 481;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << StringLiteral) | (1L << T_NEW) | (1L << T_LEFT_PAREN) | (1L << T_LEFT_BRACKET) | (1L << T_LEFT_CURLY) | (1L << INT) | (1L << HEX) | (1L << BINARY) | (1L << FLOAT) | (1L << T_FALSE) | (1L << T_TRUE) | (1L << T_NULL) | (1L << T_NOT) | (1L << T_MINUS) | (1L << T_INCREMENT) | (1L << T_DECREMENT))) != 0) || _la==IDENT) {
				{
				State = 480; forCondition();
				}
			}

			State = 483; Match(T_SEMICOLON);
			State = 485;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << StringLiteral) | (1L << T_NEW) | (1L << T_LEFT_PAREN) | (1L << T_LEFT_BRACKET) | (1L << T_LEFT_CURLY) | (1L << INT) | (1L << HEX) | (1L << BINARY) | (1L << FLOAT) | (1L << T_FALSE) | (1L << T_TRUE) | (1L << T_NULL) | (1L << T_NOT) | (1L << T_MINUS) | (1L << T_INCREMENT) | (1L << T_DECREMENT))) != 0) || _la==IDENT) {
				{
				State = 484; forIncrement();
				}
			}

			State = 487; Match(T_RIGHT_PAREN);
			State = 488; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitContext : ParserRuleContext {
		public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ForInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterForInit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitForInit(this);
		}
	}

	[RuleVersion(0)]
	public ForInitContext forInit() {
		ForInitContext _localctx = new ForInitContext(Context, State);
		EnterRule(_localctx, 86, RULE_forInit);
		try {
			State = 493;
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 490; varDecl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 491; expression(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 492; assignmentExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForConditionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forCondition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterForCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitForCondition(this);
		}
	}

	[RuleVersion(0)]
	public ForConditionContext forCondition() {
		ForConditionContext _localctx = new ForConditionContext(Context, State);
		EnterRule(_localctx, 88, RULE_forCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 495; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForIncrementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForIncrementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forIncrement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterForIncrement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitForIncrement(this);
		}
	}

	[RuleVersion(0)]
	public ForIncrementContext forIncrement() {
		ForIncrementContext _localctx = new ForIncrementContext(Context, State);
		EnterRule(_localctx, 90, RULE_forIncrement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 497; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ExpressionContext value;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 92, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 499; Match(T_RETURN);
			State = 501;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << StringLiteral) | (1L << T_NEW) | (1L << T_LEFT_PAREN) | (1L << T_LEFT_BRACKET) | (1L << T_LEFT_CURLY) | (1L << INT) | (1L << HEX) | (1L << BINARY) | (1L << FLOAT) | (1L << T_FALSE) | (1L << T_TRUE) | (1L << T_NULL) | (1L << T_NOT) | (1L << T_MINUS) | (1L << T_INCREMENT) | (1L << T_DECREMENT))) != 0) || _la==IDENT) {
				{
				State = 500; _localctx.value = expression(0);
				}
			}

			State = 503; Match(T_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 94, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 505; Match(T_BREAK);
			State = 506; Match(T_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 96, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 508; Match(T_CONTINUE);
			State = 509; Match(T_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueDeclContext : ParserRuleContext {
		public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		public LetDeclContext letDecl() {
			return GetRuleContext<LetDeclContext>(0);
		}
		public ValueDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterValueDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitValueDecl(this);
		}
	}

	[RuleVersion(0)]
	public ValueDeclContext valueDecl() {
		ValueDeclContext _localctx = new ValueDeclContext(Context, State);
		EnterRule(_localctx, 98, RULE_valueDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 513;
			switch (TokenStream.La(1)) {
			case T_VAR:
				{
				State = 511; varDecl();
				}
				break;
			case T_LET:
				{
				State = 512; letDecl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 515; Match(T_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		public VariableDeclareContext variableDeclare() {
			return GetRuleContext<VariableDeclareContext>(0);
		}
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterVarDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitVarDecl(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 100, RULE_varDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 517; Match(T_VAR);
			State = 518; variableDeclare();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetDeclContext : ParserRuleContext {
		public ConstantDeclareContext constantDeclare() {
			return GetRuleContext<ConstantDeclareContext>(0);
		}
		public LetDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterLetDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitLetDecl(this);
		}
	}

	[RuleVersion(0)]
	public LetDeclContext letDecl() {
		LetDeclContext _localctx = new LetDeclContext(Context, State);
		EnterRule(_localctx, 102, RULE_letDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 520; Match(T_LET);
			State = 521; constantDeclare();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclareContext : ParserRuleContext {
		public ValueHolderDeclContext valueHolderDecl() {
			return GetRuleContext<ValueHolderDeclContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclare; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterVariableDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitVariableDeclare(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclareContext variableDeclare() {
		VariableDeclareContext _localctx = new VariableDeclareContext(Context, State);
		EnterRule(_localctx, 104, RULE_variableDeclare);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 523; valueHolderDecl();
			State = 526;
			_la = TokenStream.La(1);
			if (_la==T_EQUALS) {
				{
				State = 524; Match(T_EQUALS);
				State = 525; expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantDeclareContext : ParserRuleContext {
		public ValueHolderDeclContext valueHolderDecl() {
			return GetRuleContext<ValueHolderDeclContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConstantDeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantDeclare; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterConstantDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitConstantDeclare(this);
		}
	}

	[RuleVersion(0)]
	public ConstantDeclareContext constantDeclare() {
		ConstantDeclareContext _localctx = new ConstantDeclareContext(Context, State);
		EnterRule(_localctx, 106, RULE_constantDeclare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 528; valueHolderDecl();
			State = 529; Match(T_EQUALS);
			State = 530; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueHolderDeclContext : ParserRuleContext {
		public ValueHolderNameContext valueHolderName() {
			return GetRuleContext<ValueHolderNameContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ValueHolderDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueHolderDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterValueHolderDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitValueHolderDecl(this);
		}
	}

	[RuleVersion(0)]
	public ValueHolderDeclContext valueHolderDecl() {
		ValueHolderDeclContext _localctx = new ValueHolderDeclContext(Context, State);
		EnterRule(_localctx, 108, RULE_valueHolderDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 532; valueHolderName();
			State = 535;
			_la = TokenStream.La(1);
			if (_la==T_DOUBLE_COLON) {
				{
				State = 533; Match(T_DOUBLE_COLON);
				State = 534; type();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueHolderNameContext : ParserRuleContext {
		public MemberNameContext memberName() {
			return GetRuleContext<MemberNameContext>(0);
		}
		public ValueHolderNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueHolderName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterValueHolderName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitValueHolderName(this);
		}
	}

	[RuleVersion(0)]
	public ValueHolderNameContext valueHolderName() {
		ValueHolderNameContext _localctx = new ValueHolderNameContext(Context, State);
		EnterRule(_localctx, 110, RULE_valueHolderName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 537; memberName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ObjectTypeContext objectType() {
			return GetRuleContext<ObjectTypeContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public CallableTypeContext callableType() {
			return GetRuleContext<CallableTypeContext>(0);
		}
		public ListTypeContext listType() {
			return GetRuleContext<ListTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 112, RULE_type);
		try {
			State = 543;
			switch (TokenStream.La(1)) {
			case T_OBJECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 539; objectType();
				}
				break;
			case T_INT:
			case T_FLOAT:
			case T_VOID:
			case T_ANY:
			case T_STRING:
			case T_BOOL:
			case IDENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 540; typeName();
				}
				break;
			case T_LEFT_PAREN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 541; callableType();
				}
				break;
			case T_LEFT_BRACKET:
				EnterOuterAlt(_localctx, 4);
				{
				State = 542; listType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectTypeContext : ParserRuleContext {
		public ObjectTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterObjectType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitObjectType(this);
		}
	}

	[RuleVersion(0)]
	public ObjectTypeContext objectType() {
		ObjectTypeContext _localctx = new ObjectTypeContext(Context, State);
		EnterRule(_localctx, 114, RULE_objectType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 545; Match(T_OBJECT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public ComplexTypeNameContext complexTypeName() {
			return GetRuleContext<ComplexTypeNameContext>(0);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 116, RULE_typeName);
		try {
			State = 549;
			switch (TokenStream.La(1)) {
			case T_INT:
			case T_FLOAT:
			case T_VOID:
			case T_ANY:
			case T_STRING:
			case T_BOOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 547; primitiveType();
				}
				break;
			case IDENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 548; complexTypeName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexTypeNameContext : ParserRuleContext {
		public ITerminalNode[] IDENT() { return GetTokens(ZScriptParser.IDENT); }
		public ITerminalNode IDENT(int i) {
			return GetToken(ZScriptParser.IDENT, i);
		}
		public ComplexTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterComplexTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitComplexTypeName(this);
		}
	}

	[RuleVersion(0)]
	public ComplexTypeNameContext complexTypeName() {
		ComplexTypeNameContext _localctx = new ComplexTypeNameContext(Context, State);
		EnterRule(_localctx, 118, RULE_complexTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 551; Match(IDENT);
			State = 556;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T_PERIOD) {
				{
				{
				State = 552; Match(T_PERIOD);
				State = 553; Match(IDENT);
				}
				}
				State = 558;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public ITerminalNode T_INT() { return GetToken(ZScriptParser.T_INT, 0); }
		public ITerminalNode T_FLOAT() { return GetToken(ZScriptParser.T_FLOAT, 0); }
		public ITerminalNode T_VOID() { return GetToken(ZScriptParser.T_VOID, 0); }
		public ITerminalNode T_ANY() { return GetToken(ZScriptParser.T_ANY, 0); }
		public ITerminalNode T_STRING() { return GetToken(ZScriptParser.T_STRING, 0); }
		public ITerminalNode T_BOOL() { return GetToken(ZScriptParser.T_BOOL, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 120, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 559;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T_INT) | (1L << T_FLOAT) | (1L << T_VOID) | (1L << T_ANY) | (1L << T_STRING) | (1L << T_BOOL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallableTypeContext : ParserRuleContext {
		public CallableTypeListContext callableTypeList() {
			return GetRuleContext<CallableTypeListContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public CallableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callableType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterCallableType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitCallableType(this);
		}
	}

	[RuleVersion(0)]
	public CallableTypeContext callableType() {
		CallableTypeContext _localctx = new CallableTypeContext(Context, State);
		EnterRule(_localctx, 122, RULE_callableType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 561; Match(T_LEFT_PAREN);
			State = 563;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T_OBJECT) | (1L << T_LEFT_PAREN) | (1L << T_LEFT_BRACKET) | (1L << T_INT) | (1L << T_FLOAT) | (1L << T_VOID) | (1L << T_ANY) | (1L << T_STRING) | (1L << T_BOOL))) != 0) || _la==IDENT) {
				{
				State = 562; callableTypeList();
				}
			}

			State = 565; Match(T_CLOSURE_RETURN);
			State = 567;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T_OBJECT) | (1L << T_LEFT_PAREN) | (1L << T_LEFT_BRACKET) | (1L << T_INT) | (1L << T_FLOAT) | (1L << T_VOID) | (1L << T_ANY) | (1L << T_STRING) | (1L << T_BOOL))) != 0) || _la==IDENT) {
				{
				State = 566; type();
				}
			}

			State = 569; Match(T_RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListTypeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ListTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterListType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitListType(this);
		}
	}

	[RuleVersion(0)]
	public ListTypeContext listType() {
		ListTypeContext _localctx = new ListTypeContext(Context, State);
		EnterRule(_localctx, 124, RULE_listType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 571; Match(T_LEFT_BRACKET);
			State = 572; type();
			State = 573; Match(T_RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallableTypeListContext : ParserRuleContext {
		public CallableArgTypeContext[] callableArgType() {
			return GetRuleContexts<CallableArgTypeContext>();
		}
		public CallableArgTypeContext callableArgType(int i) {
			return GetRuleContext<CallableArgTypeContext>(i);
		}
		public CallableTypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callableTypeList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterCallableTypeList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitCallableTypeList(this);
		}
	}

	[RuleVersion(0)]
	public CallableTypeListContext callableTypeList() {
		CallableTypeListContext _localctx = new CallableTypeListContext(Context, State);
		EnterRule(_localctx, 126, RULE_callableTypeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 575; callableArgType();
			State = 580;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T_COMMA) {
				{
				{
				State = 576; Match(T_COMMA);
				State = 577; callableArgType();
				}
				}
				State = 582;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallableArgTypeContext : ParserRuleContext {
		public IToken variadic;
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public CallableArgTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callableArgType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterCallableArgType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitCallableArgType(this);
		}
	}

	[RuleVersion(0)]
	public CallableArgTypeContext callableArgType() {
		CallableArgTypeContext _localctx = new CallableArgTypeContext(Context, State);
		EnterRule(_localctx, 128, RULE_callableArgType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 583; type();
			State = 585;
			_la = TokenStream.La(1);
			if (_la==T_TRIPPLE_DOT) {
				{
				State = 584; _localctx.variadic = Match(T_TRIPPLE_DOT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public UnaryOperatorContext unaryOperator() {
			return GetRuleContext<UnaryOperatorContext>(0);
		}
		public ValueAccessContext valueAccess() {
			return GetRuleContext<ValueAccessContext>(0);
		}
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public PrefixOperatorContext prefixOperator() {
			return GetRuleContext<PrefixOperatorContext>(0);
		}
		public LeftValueContext leftValue() {
			return GetRuleContext<LeftValueContext>(0);
		}
		public PostfixOperatorContext postfixOperator() {
			return GetRuleContext<PostfixOperatorContext>(0);
		}
		public ClosureExpressionContext closureExpression() {
			return GetRuleContext<ClosureExpressionContext>(0);
		}
		public MemberNameContext memberName() {
			return GetRuleContext<MemberNameContext>(0);
		}
		public ObjectLiteralContext objectLiteral() {
			return GetRuleContext<ObjectLiteralContext>(0);
		}
		public ObjectAccessContext objectAccess() {
			return GetRuleContext<ObjectAccessContext>(0);
		}
		public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		public NewExpressionContext newExpression() {
			return GetRuleContext<NewExpressionContext>(0);
		}
		public ConstantAtomContext constantAtom() {
			return GetRuleContext<ConstantAtomContext>(0);
		}
		public MultOpContext multOp() {
			return GetRuleContext<MultOpContext>(0);
		}
		public AdditionOpContext additionOp() {
			return GetRuleContext<AdditionOpContext>(0);
		}
		public BitwiseAndOpContext bitwiseAndOp() {
			return GetRuleContext<BitwiseAndOpContext>(0);
		}
		public BitwiseXOrOpContext bitwiseXOrOp() {
			return GetRuleContext<BitwiseXOrOpContext>(0);
		}
		public BitwiseOrOpContext bitwiseOrOp() {
			return GetRuleContext<BitwiseOrOpContext>(0);
		}
		public ComparisionOpContext comparisionOp() {
			return GetRuleContext<ComparisionOpContext>(0);
		}
		public LogicalAndContext logicalAnd() {
			return GetRuleContext<LogicalAndContext>(0);
		}
		public LogicalOrContext logicalOr() {
			return GetRuleContext<LogicalOrContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 130;
		EnterRecursionRule(_localctx, 130, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 636;
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				{
				State = 588; Match(T_LEFT_PAREN);
				State = 589; type();
				State = 590; Match(T_RIGHT_PAREN);
				State = 591; expression(12);
				}
				break;
			case 2:
				{
				State = 593; unaryOperator();
				State = 594; expression(11);
				}
				break;
			case 3:
				{
				State = 596; Match(T_LEFT_PAREN);
				State = 597; expression(0);
				State = 598; Match(T_RIGHT_PAREN);
				State = 600;
				switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
				case 1:
					{
					State = 599; valueAccess();
					}
					break;
				}
				}
				break;
			case 4:
				{
				State = 602; Match(T_LEFT_PAREN);
				State = 603; assignmentExpression();
				State = 604; Match(T_RIGHT_PAREN);
				}
				break;
			case 5:
				{
				State = 606; prefixOperator();
				State = 607; leftValue();
				}
				break;
			case 6:
				{
				State = 609; leftValue();
				State = 610; postfixOperator();
				}
				break;
			case 7:
				{
				State = 612; closureExpression();
				State = 614;
				switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
				case 1:
					{
					State = 613; valueAccess();
					}
					break;
				}
				}
				break;
			case 8:
				{
				State = 616; memberName();
				State = 618;
				switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
				case 1:
					{
					State = 617; valueAccess();
					}
					break;
				}
				}
				break;
			case 9:
				{
				State = 620; objectLiteral();
				State = 622;
				switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
				case 1:
					{
					State = 621; objectAccess();
					}
					break;
				}
				}
				break;
			case 10:
				{
				State = 624; arrayLiteral();
				State = 626;
				switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
				case 1:
					{
					State = 625; valueAccess();
					}
					break;
				}
				}
				break;
			case 11:
				{
				State = 628; newExpression();
				State = 630;
				switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
				case 1:
					{
					State = 629; valueAccess();
					}
					break;
				}
				}
				break;
			case 12:
				{
				State = 632; constantAtom();
				State = 634;
				switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
				case 1:
					{
					State = 633; objectAccess();
					}
					break;
				}
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 678;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 676;
					switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 638;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 639; multOp();
						State = 640; expression(11);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 642;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 643; additionOp();
						State = 644; expression(10);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 646;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 647; bitwiseAndOp();
						State = 648; expression(9);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 650;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 651; bitwiseXOrOp();
						State = 652; expression(8);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 654;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 655; bitwiseOrOp();
						State = 656; expression(7);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 658;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 659; comparisionOp();
						State = 660; expression(6);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 662;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 663; logicalAnd();
						State = 664; expression(5);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 666;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 667; logicalOr();
						State = 668; expression(4);
						}
						break;
					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 670;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 671; Match(T__2);
						State = 672; expression(0);
						State = 673; Match(T_DOUBLE_COLON);
						State = 674; expression(1);
						}
						break;
					}
					} 
				}
				State = 680;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultOpContext : ParserRuleContext {
		public MultOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterMultOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitMultOp(this);
		}
	}

	[RuleVersion(0)]
	public MultOpContext multOp() {
		MultOpContext _localctx = new MultOpContext(Context, State);
		EnterRule(_localctx, 132, RULE_multOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 681;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T_MULT) | (1L << T_DIV) | (1L << T_MOD))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditionOpContext : ParserRuleContext {
		public AdditionOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additionOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterAdditionOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitAdditionOp(this);
		}
	}

	[RuleVersion(0)]
	public AdditionOpContext additionOp() {
		AdditionOpContext _localctx = new AdditionOpContext(Context, State);
		EnterRule(_localctx, 134, RULE_additionOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 683;
			_la = TokenStream.La(1);
			if ( !(_la==T_PLUS || _la==T_MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitwiseAndOpContext : ParserRuleContext {
		public BitwiseAndOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwiseAndOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterBitwiseAndOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitBitwiseAndOp(this);
		}
	}

	[RuleVersion(0)]
	public BitwiseAndOpContext bitwiseAndOp() {
		BitwiseAndOpContext _localctx = new BitwiseAndOpContext(Context, State);
		EnterRule(_localctx, 136, RULE_bitwiseAndOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 685;
			_la = TokenStream.La(1);
			if ( !(_la==T_BITWISE_AND || _la==T_BITWISE_XOR) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitwiseXOrOpContext : ParserRuleContext {
		public BitwiseXOrOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwiseXOrOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterBitwiseXOrOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitBitwiseXOrOp(this);
		}
	}

	[RuleVersion(0)]
	public BitwiseXOrOpContext bitwiseXOrOp() {
		BitwiseXOrOpContext _localctx = new BitwiseXOrOpContext(Context, State);
		EnterRule(_localctx, 138, RULE_bitwiseXOrOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 687; Match(T_BITWISE_XOR);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitwiseOrOpContext : ParserRuleContext {
		public BitwiseOrOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwiseOrOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterBitwiseOrOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitBitwiseOrOp(this);
		}
	}

	[RuleVersion(0)]
	public BitwiseOrOpContext bitwiseOrOp() {
		BitwiseOrOpContext _localctx = new BitwiseOrOpContext(Context, State);
		EnterRule(_localctx, 140, RULE_bitwiseOrOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 689; Match(T_BITWISE_OR);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisionOpContext : ParserRuleContext {
		public ComparisionOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisionOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterComparisionOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitComparisionOp(this);
		}
	}

	[RuleVersion(0)]
	public ComparisionOpContext comparisionOp() {
		ComparisionOpContext _localctx = new ComparisionOpContext(Context, State);
		EnterRule(_localctx, 142, RULE_comparisionOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 691;
			_la = TokenStream.La(1);
			if ( !(((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T_EQUALITY - 64)) | (1L << (T_UNEQUALITY - 64)) | (1L << (T_MORE_THAN_OR_EQUALS - 64)) | (1L << (T_LESS_THAN_OR_EQUALS - 64)) | (1L << (T_MORE_THAN - 64)) | (1L << (T_LESS_THAN - 64)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalAndContext : ParserRuleContext {
		public LogicalAndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalAnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterLogicalAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitLogicalAnd(this);
		}
	}

	[RuleVersion(0)]
	public LogicalAndContext logicalAnd() {
		LogicalAndContext _localctx = new LogicalAndContext(Context, State);
		EnterRule(_localctx, 144, RULE_logicalAnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 693; Match(T_LOGICAL_AND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOrContext : ParserRuleContext {
		public LogicalOrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterLogicalOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitLogicalOr(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOrContext logicalOr() {
		LogicalOrContext _localctx = new LogicalOrContext(Context, State);
		EnterRule(_localctx, 146, RULE_logicalOr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 695; Match(T_LOGICAL_OR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		public LeftValueContext leftValue() {
			return GetRuleContext<LeftValueContext>(0);
		}
		public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 148, RULE_assignmentExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 697; leftValue();
			State = 698; assignmentOperator();
			State = 701;
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				{
				State = 699; expression(0);
				}
				break;
			case 2:
				{
				State = 700; assignmentExpression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewExpressionContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public FuncCallArgumentsContext funcCallArguments() {
			return GetRuleContext<FuncCallArgumentsContext>(0);
		}
		public NewExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterNewExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitNewExpression(this);
		}
	}

	[RuleVersion(0)]
	public NewExpressionContext newExpression() {
		NewExpressionContext _localctx = new NewExpressionContext(Context, State);
		EnterRule(_localctx, 150, RULE_newExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 703; Match(T_NEW);
			State = 704; typeName();
			State = 705; funcCallArguments();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClosureExpressionContext : ParserRuleContext {
		public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public FunctionArgContext functionArg() {
			return GetRuleContext<FunctionArgContext>(0);
		}
		public FunctionArgumentsContext functionArguments() {
			return GetRuleContext<FunctionArgumentsContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public ClosureExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closureExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterClosureExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitClosureExpression(this);
		}
	}

	[RuleVersion(0)]
	public ClosureExpressionContext closureExpression() {
		ClosureExpressionContext _localctx = new ClosureExpressionContext(Context, State);
		EnterRule(_localctx, 152, RULE_closureExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 709;
			switch (TokenStream.La(1)) {
			case IDENT:
				{
				State = 707; functionArg();
				}
				break;
			case T_LEFT_PAREN:
				{
				State = 708; functionArguments();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 712;
			_la = TokenStream.La(1);
			if (_la==T_DOUBLE_COLON) {
				{
				State = 711; returnType();
				}
			}

			State = 714; Match(T_CLOSURE_CALL);
			State = 715; functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefixOperatorContext : ParserRuleContext {
		public PrefixOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterPrefixOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitPrefixOperator(this);
		}
	}

	[RuleVersion(0)]
	public PrefixOperatorContext prefixOperator() {
		PrefixOperatorContext _localctx = new PrefixOperatorContext(Context, State);
		EnterRule(_localctx, 154, RULE_prefixOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 717;
			_la = TokenStream.La(1);
			if ( !(_la==T_INCREMENT || _la==T_DECREMENT) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixOperatorContext : ParserRuleContext {
		public PostfixOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterPostfixOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitPostfixOperator(this);
		}
	}

	[RuleVersion(0)]
	public PostfixOperatorContext postfixOperator() {
		PostfixOperatorContext _localctx = new PostfixOperatorContext(Context, State);
		EnterRule(_localctx, 156, RULE_postfixOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 719;
			_la = TokenStream.La(1);
			if ( !(_la==T_INCREMENT || _la==T_DECREMENT) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOperatorContext : ParserRuleContext {
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterUnaryOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitUnaryOperator(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOperatorContext unaryOperator() {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(Context, State);
		EnterRule(_localctx, 158, RULE_unaryOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 721;
			_la = TokenStream.La(1);
			if ( !(_la==T_NOT || _la==T_MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterAssignmentOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitAssignmentOperator(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 160, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 723;
			_la = TokenStream.La(1);
			if ( !(((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (T_EQUALS - 72)) | (1L << (T_PLUS_EQUALS - 72)) | (1L << (T_MINUS_EQUALS - 72)) | (1L << (T_TIMES_EQUALS - 72)) | (1L << (T_DIV_EQUALS - 72)) | (1L << (T_MOD_EQUALS - 72)) | (1L << (T_XOR_EQUALS - 72)) | (1L << (T_AND_EQUALS - 72)) | (1L << (T_TILDE_EQUALS - 72)) | (1L << (T_OR_EQUALS - 72)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncCallArgumentsContext : ParserRuleContext {
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public FuncCallArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcCallArguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFuncCallArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFuncCallArguments(this);
		}
	}

	[RuleVersion(0)]
	public FuncCallArgumentsContext funcCallArguments() {
		FuncCallArgumentsContext _localctx = new FuncCallArgumentsContext(Context, State);
		EnterRule(_localctx, 162, RULE_funcCallArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 725; Match(T_LEFT_PAREN);
			State = 727;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << StringLiteral) | (1L << T_NEW) | (1L << T_LEFT_PAREN) | (1L << T_LEFT_BRACKET) | (1L << T_LEFT_CURLY) | (1L << INT) | (1L << HEX) | (1L << BINARY) | (1L << FLOAT) | (1L << T_FALSE) | (1L << T_TRUE) | (1L << T_NULL) | (1L << T_NOT) | (1L << T_MINUS) | (1L << T_INCREMENT) | (1L << T_DECREMENT))) != 0) || _la==IDENT) {
				{
				State = 726; expressionList();
				}
			}

			State = 729; Match(T_RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 164, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 731; expression(0);
			State = 736;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T_COMMA) {
				{
				{
				State = 732; Match(T_COMMA);
				State = 733; expression(0);
				}
				}
				State = 738;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeftValueContext : ParserRuleContext {
		public MemberNameContext memberName() {
			return GetRuleContext<MemberNameContext>(0);
		}
		public LeftValueAccessContext leftValueAccess() {
			return GetRuleContext<LeftValueAccessContext>(0);
		}
		public LeftValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leftValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterLeftValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitLeftValue(this);
		}
	}

	[RuleVersion(0)]
	public LeftValueContext leftValue() {
		LeftValueContext _localctx = new LeftValueContext(Context, State);
		EnterRule(_localctx, 166, RULE_leftValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 739; memberName();
			State = 741;
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				{
				State = 740; leftValueAccess();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeftValueAccessContext : ParserRuleContext {
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public LeftValueAccessContext leftValueAccess() {
			return GetRuleContext<LeftValueAccessContext>(0);
		}
		public FieldAccessContext fieldAccess() {
			return GetRuleContext<FieldAccessContext>(0);
		}
		public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		public LeftValueAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leftValueAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterLeftValueAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitLeftValueAccess(this);
		}
	}

	[RuleVersion(0)]
	public LeftValueAccessContext leftValueAccess() {
		LeftValueAccessContext _localctx = new LeftValueAccessContext(Context, State);
		EnterRule(_localctx, 168, RULE_leftValueAccess);
		try {
			State = 754;
			switch (TokenStream.La(1)) {
			case T_LEFT_PAREN:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 743; functionCall();
				State = 744; leftValueAccess();
				}
				}
				break;
			case T_PERIOD:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 746; fieldAccess();
				State = 748;
				switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
				case 1:
					{
					State = 747; leftValueAccess();
					}
					break;
				}
				}
				}
				break;
			case T_LEFT_BRACKET:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 750; arrayAccess();
				State = 752;
				switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
				case 1:
					{
					State = 751; leftValueAccess();
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public FuncCallArgumentsContext funcCallArguments() {
			return GetRuleContext<FuncCallArgumentsContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 170, RULE_functionCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 756; funcCallArguments();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldAccessContext : ParserRuleContext {
		public MemberNameContext memberName() {
			return GetRuleContext<MemberNameContext>(0);
		}
		public FieldAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFieldAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFieldAccess(this);
		}
	}

	[RuleVersion(0)]
	public FieldAccessContext fieldAccess() {
		FieldAccessContext _localctx = new FieldAccessContext(Context, State);
		EnterRule(_localctx, 172, RULE_fieldAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 758; Match(T_PERIOD);
			State = 759; memberName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAccessContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrayAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterArrayAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitArrayAccess(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccessContext arrayAccess() {
		ArrayAccessContext _localctx = new ArrayAccessContext(Context, State);
		EnterRule(_localctx, 174, RULE_arrayAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 761; Match(T_LEFT_BRACKET);
			State = 762; expression(0);
			State = 763; Match(T_RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectAccessContext : ParserRuleContext {
		public FieldAccessContext fieldAccess() {
			return GetRuleContext<FieldAccessContext>(0);
		}
		public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		public ValueAccessContext valueAccess() {
			return GetRuleContext<ValueAccessContext>(0);
		}
		public ObjectAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterObjectAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitObjectAccess(this);
		}
	}

	[RuleVersion(0)]
	public ObjectAccessContext objectAccess() {
		ObjectAccessContext _localctx = new ObjectAccessContext(Context, State);
		EnterRule(_localctx, 176, RULE_objectAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 767;
			switch (TokenStream.La(1)) {
			case T_PERIOD:
				{
				State = 765; fieldAccess();
				}
				break;
			case T_LEFT_BRACKET:
				{
				State = 766; arrayAccess();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 770;
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				{
				State = 769; valueAccess();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueAccessContext : ParserRuleContext {
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FieldAccessContext fieldAccess() {
			return GetRuleContext<FieldAccessContext>(0);
		}
		public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		public ValueAccessContext valueAccess() {
			return GetRuleContext<ValueAccessContext>(0);
		}
		public ValueAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterValueAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitValueAccess(this);
		}
	}

	[RuleVersion(0)]
	public ValueAccessContext valueAccess() {
		ValueAccessContext _localctx = new ValueAccessContext(Context, State);
		EnterRule(_localctx, 178, RULE_valueAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 775;
			switch (TokenStream.La(1)) {
			case T_LEFT_PAREN:
				{
				State = 772; functionCall();
				}
				break;
			case T_PERIOD:
				{
				State = 773; fieldAccess();
				}
				break;
			case T_LEFT_BRACKET:
				{
				State = 774; arrayAccess();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 778;
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				{
				State = 777; valueAccess();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberNameContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(ZScriptParser.IDENT, 0); }
		public MemberNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterMemberName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitMemberName(this);
		}
	}

	[RuleVersion(0)]
	public MemberNameContext memberName() {
		MemberNameContext _localctx = new MemberNameContext(Context, State);
		EnterRule(_localctx, 180, RULE_memberName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 780; Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayLiteralContext : ParserRuleContext {
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ArrayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterArrayLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitArrayLiteral(this);
		}
	}

	[RuleVersion(0)]
	public ArrayLiteralContext arrayLiteral() {
		ArrayLiteralContext _localctx = new ArrayLiteralContext(Context, State);
		EnterRule(_localctx, 182, RULE_arrayLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 782; Match(T_LEFT_BRACKET);
			State = 784;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << StringLiteral) | (1L << T_NEW) | (1L << T_LEFT_PAREN) | (1L << T_LEFT_BRACKET) | (1L << T_LEFT_CURLY) | (1L << INT) | (1L << HEX) | (1L << BINARY) | (1L << FLOAT) | (1L << T_FALSE) | (1L << T_TRUE) | (1L << T_NULL) | (1L << T_NOT) | (1L << T_MINUS) | (1L << T_INCREMENT) | (1L << T_DECREMENT))) != 0) || _la==IDENT) {
				{
				State = 783; expressionList();
				}
			}

			State = 786; Match(T_RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectLiteralContext : ParserRuleContext {
		public ObjectEntryListContext objectEntryList() {
			return GetRuleContext<ObjectEntryListContext>(0);
		}
		public ObjectLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterObjectLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitObjectLiteral(this);
		}
	}

	[RuleVersion(0)]
	public ObjectLiteralContext objectLiteral() {
		ObjectLiteralContext _localctx = new ObjectLiteralContext(Context, State);
		EnterRule(_localctx, 184, RULE_objectLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 788; Match(T_LEFT_CURLY);
			State = 790;
			_la = TokenStream.La(1);
			if (_la==StringLiteral || _la==IDENT) {
				{
				State = 789; objectEntryList();
				}
			}

			State = 792; Match(T_RIGHT_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		public ITerminalNode StringLiteral() { return GetToken(ZScriptParser.StringLiteral, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 186, RULE_stringLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 794; Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectEntryListContext : ParserRuleContext {
		public ObjectEntryDefinitionContext[] objectEntryDefinition() {
			return GetRuleContexts<ObjectEntryDefinitionContext>();
		}
		public ObjectEntryDefinitionContext objectEntryDefinition(int i) {
			return GetRuleContext<ObjectEntryDefinitionContext>(i);
		}
		public ObjectEntryListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectEntryList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterObjectEntryList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitObjectEntryList(this);
		}
	}

	[RuleVersion(0)]
	public ObjectEntryListContext objectEntryList() {
		ObjectEntryListContext _localctx = new ObjectEntryListContext(Context, State);
		EnterRule(_localctx, 188, RULE_objectEntryList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 796; objectEntryDefinition();
			State = 801;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T_COMMA) {
				{
				{
				State = 797; Match(T_COMMA);
				State = 798; objectEntryDefinition();
				}
				}
				State = 803;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectEntryDefinitionContext : ParserRuleContext {
		public EntryNameContext entryName() {
			return GetRuleContext<EntryNameContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ObjectEntryDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectEntryDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterObjectEntryDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitObjectEntryDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ObjectEntryDefinitionContext objectEntryDefinition() {
		ObjectEntryDefinitionContext _localctx = new ObjectEntryDefinitionContext(Context, State);
		EnterRule(_localctx, 190, RULE_objectEntryDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 804; entryName();
			State = 805; Match(T_DOUBLE_COLON);
			State = 806; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntryNameContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(ZScriptParser.IDENT, 0); }
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public EntryNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entryName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterEntryName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitEntryName(this);
		}
	}

	[RuleVersion(0)]
	public EntryNameContext entryName() {
		EntryNameContext _localctx = new EntryNameContext(Context, State);
		EnterRule(_localctx, 192, RULE_entryName);
		try {
			State = 810;
			switch (TokenStream.La(1)) {
			case IDENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 808; Match(IDENT);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 809; stringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompileConstantContext : ParserRuleContext {
		public NumericAtomContext numericAtom() {
			return GetRuleContext<NumericAtomContext>(0);
		}
		public ITerminalNode T_FALSE() { return GetToken(ZScriptParser.T_FALSE, 0); }
		public ITerminalNode T_TRUE() { return GetToken(ZScriptParser.T_TRUE, 0); }
		public ITerminalNode T_NULL() { return GetToken(ZScriptParser.T_NULL, 0); }
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public CompileConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileConstant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterCompileConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitCompileConstant(this);
		}
	}

	[RuleVersion(0)]
	public CompileConstantContext compileConstant() {
		CompileConstantContext _localctx = new CompileConstantContext(Context, State);
		EnterRule(_localctx, 194, RULE_compileConstant);
		int _la;
		try {
			State = 820;
			switch (TokenStream.La(1)) {
			case INT:
			case HEX:
			case BINARY:
			case FLOAT:
			case T_MINUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 813;
				_la = TokenStream.La(1);
				if (_la==T_MINUS) {
					{
					State = 812; Match(T_MINUS);
					}
				}

				State = 815; numericAtom();
				}
				break;
			case T_FALSE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 816; Match(T_FALSE);
				}
				break;
			case T_TRUE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 817; Match(T_TRUE);
				}
				break;
			case T_NULL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 818; Match(T_NULL);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 5);
				{
				State = 819; stringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantAtomContext : ParserRuleContext {
		public NumericAtomContext numericAtom() {
			return GetRuleContext<NumericAtomContext>(0);
		}
		public ITerminalNode T_FALSE() { return GetToken(ZScriptParser.T_FALSE, 0); }
		public ITerminalNode T_TRUE() { return GetToken(ZScriptParser.T_TRUE, 0); }
		public ITerminalNode T_NULL() { return GetToken(ZScriptParser.T_NULL, 0); }
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public ConstantAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantAtom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterConstantAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitConstantAtom(this);
		}
	}

	[RuleVersion(0)]
	public ConstantAtomContext constantAtom() {
		ConstantAtomContext _localctx = new ConstantAtomContext(Context, State);
		EnterRule(_localctx, 196, RULE_constantAtom);
		try {
			State = 827;
			switch (TokenStream.La(1)) {
			case INT:
			case HEX:
			case BINARY:
			case FLOAT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 822; numericAtom();
				}
				break;
			case T_FALSE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 823; Match(T_FALSE);
				}
				break;
			case T_TRUE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 824; Match(T_TRUE);
				}
				break;
			case T_NULL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 825; Match(T_NULL);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 5);
				{
				State = 826; stringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericAtomContext : ParserRuleContext {
		public HexadecimalNumberContext hexadecimalNumber() {
			return GetRuleContext<HexadecimalNumberContext>(0);
		}
		public BinaryNumberContext binaryNumber() {
			return GetRuleContext<BinaryNumberContext>(0);
		}
		public ITerminalNode FLOAT() { return GetToken(ZScriptParser.FLOAT, 0); }
		public ITerminalNode INT() { return GetToken(ZScriptParser.INT, 0); }
		public NumericAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericAtom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterNumericAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitNumericAtom(this);
		}
	}

	[RuleVersion(0)]
	public NumericAtomContext numericAtom() {
		NumericAtomContext _localctx = new NumericAtomContext(Context, State);
		EnterRule(_localctx, 198, RULE_numericAtom);
		int _la;
		try {
			State = 832;
			switch (TokenStream.La(1)) {
			case HEX:
				EnterOuterAlt(_localctx, 1);
				{
				State = 829; hexadecimalNumber();
				}
				break;
			case BINARY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 830; binaryNumber();
				}
				break;
			case INT:
			case FLOAT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 831;
				_la = TokenStream.La(1);
				if ( !(_la==INT || _la==FLOAT) ) {
				ErrorHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HexadecimalNumberContext : ParserRuleContext {
		public ITerminalNode HEX() { return GetToken(ZScriptParser.HEX, 0); }
		public HexadecimalNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hexadecimalNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterHexadecimalNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitHexadecimalNumber(this);
		}
	}

	[RuleVersion(0)]
	public HexadecimalNumberContext hexadecimalNumber() {
		HexadecimalNumberContext _localctx = new HexadecimalNumberContext(Context, State);
		EnterRule(_localctx, 200, RULE_hexadecimalNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 834; Match(HEX);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryNumberContext : ParserRuleContext {
		public ITerminalNode BINARY() { return GetToken(ZScriptParser.BINARY, 0); }
		public BinaryNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterBinaryNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitBinaryNumber(this);
		}
	}

	[RuleVersion(0)]
	public BinaryNumberContext binaryNumber() {
		BinaryNumberContext _localctx = new BinaryNumberContext(Context, State);
		EnterRule(_localctx, 202, RULE_binaryNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 836; Match(BINARY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 65: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 10);
		case 1: return Precpred(Context, 9);
		case 2: return Precpred(Context, 8);
		case 3: return Precpred(Context, 7);
		case 4: return Precpred(Context, 6);
		case 5: return Precpred(Context, 5);
		case 6: return Precpred(Context, 4);
		case 7: return Precpred(Context, 3);
		case 8: return Precpred(Context, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3Y\x349\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\a\x3\xD7\n\x3\f\x3"+
		"\xE\x3\xDA\v\x3\x3\x4\x3\x4\x3\x4\x5\x4\xDF\n\x4\x3\x4\x3\x4\x3\x5\x3"+
		"\x5\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\a\a\a\xEB\n\a\f\a\xE\a\xEE\v\a\x3\a"+
		"\x3\a\x3\b\x3\b\x3\b\x3\t\x5\t\xF6\n\t\x3\t\x3\t\x3\n\x3\n\a\n\xFC\n\n"+
		"\f\n\xE\n\xFF\v\n\x3\n\x3\n\x3\v\x5\v\x104\n\v\x3\v\x3\v\x3\v\x3\f\x3"+
		"\f\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\a\xE\x113\n\xE\f\xE\xE"+
		"\xE\x116\v\xE\x3\xE\x3\xE\x3\xF\x5\xF\x11B\n\xF\x3\xF\x3\xF\x3\x10\x3"+
		"\x10\x3\x10\x3\x10\x5\x10\x123\n\x10\x3\x11\x3\x11\x3\x11\a\x11\x128\n"+
		"\x11\f\x11\xE\x11\x12B\v\x11\x3\x12\x5\x12\x12E\n\x12\x3\x12\x3\x12\x3"+
		"\x12\x5\x12\x133\n\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x5\x14\x13A"+
		"\n\x14\x3\x14\x5\x14\x13D\n\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x5"+
		"\x15\x144\n\x15\x3\x15\x5\x15\x147\n\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3"+
		"\x18\x3\x18\x5\x18\x14F\n\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\a\x19"+
		"\x156\n\x19\f\x19\xE\x19\x159\v\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B"+
		"\x3\x1B\x5\x1B\x161\n\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x166\n\x1B\x3\x1C"+
		"\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x16D\n\x1D\x3\x1D\x3\x1D\x3\x1D\x3"+
		"\x1D\x5\x1D\x173\n\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\a\x1E\x17A\n"+
		"\x1E\f\x1E\xE\x1E\x17D\v\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3 \x3 \x3 \x5"+
		" \x186\n \x3 \x3 \x3!\x3!\x3\"\x3\"\x3\"\x3#\x3#\x5#\x191\n#\x3#\x3#\x3"+
		"#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x5#\x19F\n#\x3$\x3$\a$\x1A3\n$\f"+
		"$\xE$\x1A6\v$\x3$\x3$\x3%\x3%\x3%\x3%\x3%\x3%\x5%\x1B0\n%\x3&\x3&\x3&"+
		"\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3(\x3(\a(\x1BD\n(\f(\xE(\x1C0\v(\x3(\x5"+
		"(\x1C3\n(\x3(\x3(\x3)\x3)\x3)\x3)\a)\x1CB\n)\f)\xE)\x1CE\v)\x3*\x3*\x3"+
		"*\x6*\x1D3\n*\r*\xE*\x1D4\x3+\x3+\x3+\x3+\x3+\x3+\x3,\x3,\x3,\x5,\x1E0"+
		"\n,\x3,\x3,\x5,\x1E4\n,\x3,\x3,\x5,\x1E8\n,\x3,\x3,\x3,\x3-\x3-\x3-\x5"+
		"-\x1F0\n-\x3.\x3.\x3/\x3/\x3\x30\x3\x30\x5\x30\x1F8\n\x30\x3\x30\x3\x30"+
		"\x3\x31\x3\x31\x3\x31\x3\x32\x3\x32\x3\x32\x3\x33\x3\x33\x5\x33\x204\n"+
		"\x33\x3\x33\x3\x33\x3\x34\x3\x34\x3\x34\x3\x35\x3\x35\x3\x35\x3\x36\x3"+
		"\x36\x3\x36\x5\x36\x211\n\x36\x3\x37\x3\x37\x3\x37\x3\x37\x3\x38\x3\x38"+
		"\x3\x38\x5\x38\x21A\n\x38\x3\x39\x3\x39\x3:\x3:\x3:\x3:\x5:\x222\n:\x3"+
		";\x3;\x3<\x3<\x5<\x228\n<\x3=\x3=\x3=\a=\x22D\n=\f=\xE=\x230\v=\x3>\x3"+
		">\x3?\x3?\x5?\x236\n?\x3?\x3?\x5?\x23A\n?\x3?\x3?\x3@\x3@\x3@\x3@\x3\x41"+
		"\x3\x41\x3\x41\a\x41\x245\n\x41\f\x41\xE\x41\x248\v\x41\x3\x42\x3\x42"+
		"\x5\x42\x24C\n\x42\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3"+
		"\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x5\x43\x25B\n\x43\x3\x43\x3\x43"+
		"\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43"+
		"\x5\x43\x269\n\x43\x3\x43\x3\x43\x5\x43\x26D\n\x43\x3\x43\x3\x43\x5\x43"+
		"\x271\n\x43\x3\x43\x3\x43\x5\x43\x275\n\x43\x3\x43\x3\x43\x5\x43\x279"+
		"\n\x43\x3\x43\x3\x43\x5\x43\x27D\n\x43\x5\x43\x27F\n\x43\x3\x43\x3\x43"+
		"\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43"+
		"\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43"+
		"\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43"+
		"\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\a\x43\x2A7\n\x43\f\x43\xE\x43"+
		"\x2AA\v\x43\x3\x44\x3\x44\x3\x45\x3\x45\x3\x46\x3\x46\x3G\x3G\x3H\x3H"+
		"\x3I\x3I\x3J\x3J\x3K\x3K\x3L\x3L\x3L\x3L\x5L\x2C0\nL\x3M\x3M\x3M\x3M\x3"+
		"N\x3N\x5N\x2C8\nN\x3N\x5N\x2CB\nN\x3N\x3N\x3N\x3O\x3O\x3P\x3P\x3Q\x3Q"+
		"\x3R\x3R\x3S\x3S\x5S\x2DA\nS\x3S\x3S\x3T\x3T\x3T\aT\x2E1\nT\fT\xET\x2E4"+
		"\vT\x3U\x3U\x5U\x2E8\nU\x3V\x3V\x3V\x3V\x3V\x5V\x2EF\nV\x3V\x3V\x5V\x2F3"+
		"\nV\x5V\x2F5\nV\x3W\x3W\x3X\x3X\x3X\x3Y\x3Y\x3Y\x3Y\x3Z\x3Z\x5Z\x302\n"+
		"Z\x3Z\x5Z\x305\nZ\x3[\x3[\x3[\x5[\x30A\n[\x3[\x5[\x30D\n[\x3\\\x3\\\x3"+
		"]\x3]\x5]\x313\n]\x3]\x3]\x3^\x3^\x5^\x319\n^\x3^\x3^\x3_\x3_\x3`\x3`"+
		"\x3`\a`\x322\n`\f`\xE`\x325\v`\x3\x61\x3\x61\x3\x61\x3\x61\x3\x62\x3\x62"+
		"\x5\x62\x32D\n\x62\x3\x63\x5\x63\x330\n\x63\x3\x63\x3\x63\x3\x63\x3\x63"+
		"\x3\x63\x5\x63\x337\n\x63\x3\x64\x3\x64\x3\x64\x3\x64\x3\x64\x5\x64\x33E"+
		"\n\x64\x3\x65\x3\x65\x3\x65\x5\x65\x343\n\x65\x3\x66\x3\x66\x3g\x3g\x3"+
		"g\x2\x3\x84h\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&(*"+
		",.\x30\x32\x34\x36\x38:<>@\x42\x44\x46HJLNPRTVXZ\\^`\x62\x64\x66hjlnp"+
		"rtvxz|~\x80\x82\x84\x86\x88\x8A\x8C\x8E\x90\x92\x94\x96\x98\x9A\x9C\x9E"+
		"\xA0\xA2\xA4\xA6\xA8\xAA\xAC\xAE\xB0\xB2\xB4\xB6\xB8\xBA\xBC\xBE\xC0\xC2"+
		"\xC4\xC6\xC8\xCA\xCC\x2\v\x3\x2#(\x3\x2\x37\x39\x3\x2;<\x3\x2?@\x3\x2"+
		"\x42G\x3\x2=>\x4\x2::<<\x3\x2JS\x4\x2)),,\x360\x2\xCE\x3\x2\x2\x2\x4\xD8"+
		"\x3\x2\x2\x2\x6\xDB\x3\x2\x2\x2\b\xE2\x3\x2\x2\x2\n\xE5\x3\x2\x2\x2\f"+
		"\xE7\x3\x2\x2\x2\xE\xF1\x3\x2\x2\x2\x10\xF5\x3\x2\x2\x2\x12\xF9\x3\x2"+
		"\x2\x2\x14\x103\x3\x2\x2\x2\x16\x108\x3\x2\x2\x2\x18\x10C\x3\x2\x2\x2"+
		"\x1A\x10E\x3\x2\x2\x2\x1C\x11A\x3\x2\x2\x2\x1E\x122\x3\x2\x2\x2 \x124"+
		"\x3\x2\x2\x2\"\x12D\x3\x2\x2\x2$\x134\x3\x2\x2\x2&\x136\x3\x2\x2\x2(\x140"+
		"\x3\x2\x2\x2*\x148\x3\x2\x2\x2,\x14A\x3\x2\x2\x2.\x14C\x3\x2\x2\x2\x30"+
		"\x152\x3\x2\x2\x2\x32\x15A\x3\x2\x2\x2\x34\x15D\x3\x2\x2\x2\x36\x167\x3"+
		"\x2\x2\x2\x38\x169\x3\x2\x2\x2:\x174\x3\x2\x2\x2<\x180\x3\x2\x2\x2>\x182"+
		"\x3\x2\x2\x2@\x189\x3\x2\x2\x2\x42\x18B\x3\x2\x2\x2\x44\x19E\x3\x2\x2"+
		"\x2\x46\x1A0\x3\x2\x2\x2H\x1A9\x3\x2\x2\x2J\x1B1\x3\x2\x2\x2L\x1B4\x3"+
		"\x2\x2\x2N\x1BA\x3\x2\x2\x2P\x1C6\x3\x2\x2\x2R\x1CF\x3\x2\x2\x2T\x1D6"+
		"\x3\x2\x2\x2V\x1DC\x3\x2\x2\x2X\x1EF\x3\x2\x2\x2Z\x1F1\x3\x2\x2\x2\\\x1F3"+
		"\x3\x2\x2\x2^\x1F5\x3\x2\x2\x2`\x1FB\x3\x2\x2\x2\x62\x1FE\x3\x2\x2\x2"+
		"\x64\x203\x3\x2\x2\x2\x66\x207\x3\x2\x2\x2h\x20A\x3\x2\x2\x2j\x20D\x3"+
		"\x2\x2\x2l\x212\x3\x2\x2\x2n\x216\x3\x2\x2\x2p\x21B\x3\x2\x2\x2r\x221"+
		"\x3\x2\x2\x2t\x223\x3\x2\x2\x2v\x227\x3\x2\x2\x2x\x229\x3\x2\x2\x2z\x231"+
		"\x3\x2\x2\x2|\x233\x3\x2\x2\x2~\x23D\x3\x2\x2\x2\x80\x241\x3\x2\x2\x2"+
		"\x82\x249\x3\x2\x2\x2\x84\x27E\x3\x2\x2\x2\x86\x2AB\x3\x2\x2\x2\x88\x2AD"+
		"\x3\x2\x2\x2\x8A\x2AF\x3\x2\x2\x2\x8C\x2B1\x3\x2\x2\x2\x8E\x2B3\x3\x2"+
		"\x2\x2\x90\x2B5\x3\x2\x2\x2\x92\x2B7\x3\x2\x2\x2\x94\x2B9\x3\x2\x2\x2"+
		"\x96\x2BB\x3\x2\x2\x2\x98\x2C1\x3\x2\x2\x2\x9A\x2C7\x3\x2\x2\x2\x9C\x2CF"+
		"\x3\x2\x2\x2\x9E\x2D1\x3\x2\x2\x2\xA0\x2D3\x3\x2\x2\x2\xA2\x2D5\x3\x2"+
		"\x2\x2\xA4\x2D7\x3\x2\x2\x2\xA6\x2DD\x3\x2\x2\x2\xA8\x2E5\x3\x2\x2\x2"+
		"\xAA\x2F4\x3\x2\x2\x2\xAC\x2F6\x3\x2\x2\x2\xAE\x2F8\x3\x2\x2\x2\xB0\x2FB"+
		"\x3\x2\x2\x2\xB2\x301\x3\x2\x2\x2\xB4\x309\x3\x2\x2\x2\xB6\x30E\x3\x2"+
		"\x2\x2\xB8\x310\x3\x2\x2\x2\xBA\x316\x3\x2\x2\x2\xBC\x31C\x3\x2\x2\x2"+
		"\xBE\x31E\x3\x2\x2\x2\xC0\x326\x3\x2\x2\x2\xC2\x32C\x3\x2\x2\x2\xC4\x336"+
		"\x3\x2\x2\x2\xC6\x33D\x3\x2\x2\x2\xC8\x342\x3\x2\x2\x2\xCA\x344\x3\x2"+
		"\x2\x2\xCC\x346\x3\x2\x2\x2\xCE\xCF\x5\x4\x3\x2\xCF\x3\x3\x2\x2\x2\xD0"+
		"\xD7\x5\x12\n\x2\xD1\xD7\x5&\x14\x2\xD2\xD7\x5(\x15\x2\xD3\xD7\x5\x6\x4"+
		"\x2\xD4\xD7\x5\x16\f\x2\xD5\xD7\x5\x38\x1D\x2\xD6\xD0\x3\x2\x2\x2\xD6"+
		"\xD1\x3\x2\x2\x2\xD6\xD2\x3\x2\x2\x2\xD6\xD3\x3\x2\x2\x2\xD6\xD4\x3\x2"+
		"\x2\x2\xD6\xD5\x3\x2\x2\x2\xD7\xDA\x3\x2\x2\x2\xD8\xD6\x3\x2\x2\x2\xD8"+
		"\xD9\x3\x2\x2\x2\xD9\x5\x3\x2\x2\x2\xDA\xD8\x3\x2\x2\x2\xDB\xDC\a\v\x2"+
		"\x2\xDC\xDE\x5\n\x6\x2\xDD\xDF\x5\b\x5\x2\xDE\xDD\x3\x2\x2\x2\xDE\xDF"+
		"\x3\x2\x2\x2\xDF\xE0\x3\x2\x2\x2\xE0\xE1\x5\f\a\x2\xE1\a\x3\x2\x2\x2\xE2"+
		"\xE3\a\x33\x2\x2\xE3\xE4\x5\n\x6\x2\xE4\t\x3\x2\x2\x2\xE5\xE6\aT\x2\x2"+
		"\xE6\v\x3\x2\x2\x2\xE7\xEC\a\x1F\x2\x2\xE8\xEB\x5\xE\b\x2\xE9\xEB\x5\x10"+
		"\t\x2\xEA\xE8\x3\x2\x2\x2\xEA\xE9\x3\x2\x2\x2\xEB\xEE\x3\x2\x2\x2\xEC"+
		"\xEA\x3\x2\x2\x2\xEC\xED\x3\x2\x2\x2\xED\xEF\x3\x2\x2\x2\xEE\xEC\x3\x2"+
		"\x2\x2\xEF\xF0\a \x2\x2\xF0\r\x3\x2\x2\x2\xF1\xF2\x5\x66\x34\x2\xF2\xF3"+
		"\a\x34\x2\x2\xF3\xF\x3\x2\x2\x2\xF4\xF6\a\n\x2\x2\xF5\xF4\x3\x2\x2\x2"+
		"\xF5\xF6\x3\x2\x2\x2\xF6\xF7\x3\x2\x2\x2\xF7\xF8\x5&\x14\x2\xF8\x11\x3"+
		"\x2\x2\x2\xF9\xFD\a\x1D\x2\x2\xFA\xFC\x5\x14\v\x2\xFB\xFA\x3\x2\x2\x2"+
		"\xFC\xFF\x3\x2\x2\x2\xFD\xFB\x3\x2\x2\x2\xFD\xFE\x3\x2\x2\x2\xFE\x100"+
		"\x3\x2\x2\x2\xFF\xFD\x3\x2\x2\x2\x100\x101\a\x1E\x2\x2\x101\x13\x3\x2"+
		"\x2\x2\x102\x104\a\xF\x2\x2\x103\x102\x3\x2\x2\x2\x103\x104\x3\x2\x2\x2"+
		"\x104\x105\x3\x2\x2\x2\x105\x106\x5j\x36\x2\x106\x107\a\x34\x2\x2\x107"+
		"\x15\x3\x2\x2\x2\x108\x109\a\f\x2\x2\x109\x10A\x5\x18\r\x2\x10A\x10B\x5"+
		"\x1A\xE\x2\x10B\x17\x3\x2\x2\x2\x10C\x10D\aT\x2\x2\x10D\x19\x3\x2\x2\x2"+
		"\x10E\x114\a\x1D\x2\x2\x10F\x113\x5\xE\b\x2\x110\x113\x5\x1C\xF\x2\x111"+
		"\x113\x5\x1E\x10\x2\x112\x10F\x3\x2\x2\x2\x112\x110\x3\x2\x2\x2\x112\x111"+
		"\x3\x2\x2\x2\x113\x116\x3\x2\x2\x2\x114\x112\x3\x2\x2\x2\x114\x115\x3"+
		"\x2\x2\x2\x115\x117\x3\x2\x2\x2\x116\x114\x3\x2\x2\x2\x117\x118\a\x1E"+
		"\x2\x2\x118\x1B\x3\x2\x2\x2\x119\x11B\x5 \x11\x2\x11A\x119\x3\x2\x2\x2"+
		"\x11A\x11B\x3\x2\x2\x2\x11B\x11C\x3\x2\x2\x2\x11C\x11D\x5\x46$\x2\x11D"+
		"\x1D\x3\x2\x2\x2\x11E\x11F\aJ\x2\x2\x11F\x123\x5$\x13\x2\x120\x121\a<"+
		"\x2\x2\x121\x123\x5$\x13\x2\x122\x11E\x3\x2\x2\x2\x122\x120\x3\x2\x2\x2"+
		"\x123\x1F\x3\x2\x2\x2\x124\x129\x5\"\x12\x2\x125\x126\a\x36\x2\x2\x126"+
		"\x128\x5\"\x12\x2\x127\x125\x3\x2\x2\x2\x128\x12B\x3\x2\x2\x2\x129\x127"+
		"\x3\x2\x2\x2\x129\x12A\x3\x2\x2\x2\x12A!\x3\x2\x2\x2\x12B\x129\x3\x2\x2"+
		"\x2\x12C\x12E\a;\x2\x2\x12D\x12C\x3\x2\x2\x2\x12D\x12E\x3\x2\x2\x2\x12E"+
		"\x12F\x3\x2\x2\x2\x12F\x132\x5$\x13\x2\x130\x131\a<\x2\x2\x131\x133\x5"+
		"$\x13\x2\x132\x130\x3\x2\x2\x2\x132\x133\x3\x2\x2\x2\x133#\x3\x2\x2\x2"+
		"\x134\x135\a)\x2\x2\x135%\x3\x2\x2\x2\x136\x137\a\t\x2\x2\x137\x139\x5"+
		"*\x16\x2\x138\x13A\x5.\x18\x2\x139\x138\x3\x2\x2\x2\x139\x13A\x3\x2\x2"+
		"\x2\x13A\x13C\x3\x2\x2\x2\x13B\x13D\x5\x32\x1A\x2\x13C\x13B\x3\x2\x2\x2"+
		"\x13C\x13D\x3\x2\x2\x2\x13D\x13E\x3\x2\x2\x2\x13E\x13F\x5,\x17\x2\x13F"+
		"\'\x3\x2\x2\x2\x140\x141\a\b\x2\x2\x141\x143\x5*\x16\x2\x142\x144\x5."+
		"\x18\x2\x143\x142\x3\x2\x2\x2\x143\x144\x3\x2\x2\x2\x144\x146\x3\x2\x2"+
		"\x2\x145\x147\x5\x32\x1A\x2\x146\x145\x3\x2\x2\x2\x146\x147\x3\x2\x2\x2"+
		"\x147)\x3\x2\x2\x2\x148\x149\aT\x2\x2\x149+\x3\x2\x2\x2\x14A\x14B\x5\x46"+
		"$\x2\x14B-\x3\x2\x2\x2\x14C\x14E\a\x1B\x2\x2\x14D\x14F\x5\x30\x19\x2\x14E"+
		"\x14D\x3\x2\x2\x2\x14E\x14F\x3\x2\x2\x2\x14F\x150\x3\x2\x2\x2\x150\x151"+
		"\a\x1C\x2\x2\x151/\x3\x2\x2\x2\x152\x157\x5\x34\x1B\x2\x153\x154\a\x36"+
		"\x2\x2\x154\x156\x5\x34\x1B\x2\x155\x153\x3\x2\x2\x2\x156\x159\x3\x2\x2"+
		"\x2\x157\x155\x3\x2\x2\x2\x157\x158\x3\x2\x2\x2\x158\x31\x3\x2\x2\x2\x159"+
		"\x157\x3\x2\x2\x2\x15A\x15B\a\x33\x2\x2\x15B\x15C\x5r:\x2\x15C\x33\x3"+
		"\x2\x2\x2\x15D\x160\x5\x36\x1C\x2\x15E\x15F\a\x33\x2\x2\x15F\x161\x5r"+
		":\x2\x160\x15E\x3\x2\x2\x2\x160\x161\x3\x2\x2\x2\x161\x165\x3\x2\x2\x2"+
		"\x162\x166\a\x32\x2\x2\x163\x164\aJ\x2\x2\x164\x166\x5\xC4\x63\x2\x165"+
		"\x162\x3\x2\x2\x2\x165\x163\x3\x2\x2\x2\x165\x166\x3\x2\x2\x2\x166\x35"+
		"\x3\x2\x2\x2\x167\x168\aT\x2\x2\x168\x37\x3\x2\x2\x2\x169\x16A\a\x3\x2"+
		"\x2\x16A\x16C\x5@!\x2\x16B\x16D\x5\x42\"\x2\x16C\x16B\x3\x2\x2\x2\x16C"+
		"\x16D\x3\x2\x2\x2\x16D\x16E\x3\x2\x2\x2\x16E\x16F\a\x33\x2\x2\x16F\x172"+
		"\x5\xBC_\x2\x170\x173\a\x34\x2\x2\x171\x173\x5:\x1E\x2\x172\x170\x3\x2"+
		"\x2\x2\x172\x171\x3\x2\x2\x2\x173\x39\x3\x2\x2\x2\x174\x17B\a\x1F\x2\x2"+
		"\x175\x17A\x5<\x1F\x2\x176\x177\x5> \x2\x177\x178\a\x34\x2\x2\x178\x17A"+
		"\x3\x2\x2\x2\x179\x175\x3\x2\x2\x2\x179\x176\x3\x2\x2\x2\x17A\x17D\x3"+
		"\x2\x2\x2\x17B\x179\x3\x2\x2\x2\x17B\x17C\x3\x2\x2\x2\x17C\x17E\x3\x2"+
		"\x2\x2\x17D\x17B\x3\x2\x2\x2\x17E\x17F\a \x2\x2\x17F;\x3\x2\x2\x2\x180"+
		"\x181\x5\x64\x33\x2\x181=\x3\x2\x2\x2\x182\x183\a\t\x2\x2\x183\x185\x5"+
		"*\x16\x2\x184\x186\x5.\x18\x2\x185\x184\x3\x2\x2\x2\x185\x186\x3\x2\x2"+
		"\x2\x186\x187\x3\x2\x2\x2\x187\x188\x5\x32\x1A\x2\x188?\x3\x2\x2\x2\x189"+
		"\x18A\x5x=\x2\x18A\x41\x3\x2\x2\x2\x18B\x18C\a\x4\x2\x2\x18C\x18D\x5@"+
		"!\x2\x18D\x43\x3\x2\x2\x2\x18E\x191\x5\x84\x43\x2\x18F\x191\x5\x96L\x2"+
		"\x190\x18E\x3\x2\x2\x2\x190\x18F\x3\x2\x2\x2\x191\x192\x3\x2\x2\x2\x192"+
		"\x193\a\x34\x2\x2\x193\x19F\x3\x2\x2\x2\x194\x19F\x5\x46$\x2\x195\x19F"+
		"\a\x34\x2\x2\x196\x19F\x5H%\x2\x197\x19F\x5T+\x2\x198\x19F\x5V,\x2\x199"+
		"\x19F\x5L\'\x2\x19A\x19F\x5^\x30\x2\x19B\x19F\x5`\x31\x2\x19C\x19F\x5"+
		"\x62\x32\x2\x19D\x19F\x5\x64\x33\x2\x19E\x190\x3\x2\x2\x2\x19E\x194\x3"+
		"\x2\x2\x2\x19E\x195\x3\x2\x2\x2\x19E\x196\x3\x2\x2\x2\x19E\x197\x3\x2"+
		"\x2\x2\x19E\x198\x3\x2\x2\x2\x19E\x199\x3\x2\x2\x2\x19E\x19A\x3\x2\x2"+
		"\x2\x19E\x19B\x3\x2\x2\x2\x19E\x19C\x3\x2\x2\x2\x19E\x19D\x3\x2\x2\x2"+
		"\x19F\x45\x3\x2\x2\x2\x1A0\x1A4\a\x1F\x2\x2\x1A1\x1A3\x5\x44#\x2\x1A2"+
		"\x1A1\x3\x2\x2\x2\x1A3\x1A6\x3\x2\x2\x2\x1A4\x1A2\x3\x2\x2\x2\x1A4\x1A5"+
		"\x3\x2\x2\x2\x1A5\x1A7\x3\x2\x2\x2\x1A6\x1A4\x3\x2\x2\x2\x1A7\x1A8\a "+
		"\x2\x2\x1A8G\x3\x2\x2\x2\x1A9\x1AA\a\x11\x2\x2\x1AA\x1AB\a\x1B\x2\x2\x1AB"+
		"\x1AC\x5\x84\x43\x2\x1AC\x1AD\a\x1C\x2\x2\x1AD\x1AF\x5\x44#\x2\x1AE\x1B0"+
		"\x5J&\x2\x1AF\x1AE\x3\x2\x2\x2\x1AF\x1B0\x3\x2\x2\x2\x1B0I\x3\x2\x2\x2"+
		"\x1B1\x1B2\a\x12\x2\x2\x1B2\x1B3\x5\x44#\x2\x1B3K\x3\x2\x2\x2\x1B4\x1B5"+
		"\a\x17\x2\x2\x1B5\x1B6\a\x1B\x2\x2\x1B6\x1B7\x5\x84\x43\x2\x1B7\x1B8\a"+
		"\x1C\x2\x2\x1B8\x1B9\x5N(\x2\x1B9M\x3\x2\x2\x2\x1BA\x1BE\a\x1F\x2\x2\x1BB"+
		"\x1BD\x5P)\x2\x1BC\x1BB\x3\x2\x2\x2\x1BD\x1C0\x3\x2\x2\x2\x1BE\x1BC\x3"+
		"\x2\x2\x2\x1BE\x1BF\x3\x2\x2\x2\x1BF\x1C2\x3\x2\x2\x2\x1C0\x1BE\x3\x2"+
		"\x2\x2\x1C1\x1C3\x5R*\x2\x1C2\x1C1\x3\x2\x2\x2\x1C2\x1C3\x3\x2\x2\x2\x1C3"+
		"\x1C4\x3\x2\x2\x2\x1C4\x1C5\a \x2\x2\x1C5O\x3\x2\x2\x2\x1C6\x1C7\a\x18"+
		"\x2\x2\x1C7\x1C8\x5\x84\x43\x2\x1C8\x1CC\a\x33\x2\x2\x1C9\x1CB\x5\x44"+
		"#\x2\x1CA\x1C9\x3\x2\x2\x2\x1CB\x1CE\x3\x2\x2\x2\x1CC\x1CA\x3\x2\x2\x2"+
		"\x1CC\x1CD\x3\x2\x2\x2\x1CDQ\x3\x2\x2\x2\x1CE\x1CC\x3\x2\x2\x2\x1CF\x1D0"+
		"\a\x19\x2\x2\x1D0\x1D2\a\x33\x2\x2\x1D1\x1D3\x5\x44#\x2\x1D2\x1D1\x3\x2"+
		"\x2\x2\x1D3\x1D4\x3\x2\x2\x2\x1D4\x1D2\x3\x2\x2\x2\x1D4\x1D5\x3\x2\x2"+
		"\x2\x1D5S\x3\x2\x2\x2\x1D6\x1D7\a\x13\x2\x2\x1D7\x1D8\a\x1B\x2\x2\x1D8"+
		"\x1D9\x5\x84\x43\x2\x1D9\x1DA\a\x1C\x2\x2\x1DA\x1DB\x5\x44#\x2\x1DBU\x3"+
		"\x2\x2\x2\x1DC\x1DD\a\x14\x2\x2\x1DD\x1DF\a\x1B\x2\x2\x1DE\x1E0\x5X-\x2"+
		"\x1DF\x1DE\x3\x2\x2\x2\x1DF\x1E0\x3\x2\x2\x2\x1E0\x1E1\x3\x2\x2\x2\x1E1"+
		"\x1E3\a\x34\x2\x2\x1E2\x1E4\x5Z.\x2\x1E3\x1E2\x3\x2\x2\x2\x1E3\x1E4\x3"+
		"\x2\x2\x2\x1E4\x1E5\x3\x2\x2\x2\x1E5\x1E7\a\x34\x2\x2\x1E6\x1E8\x5\\/"+
		"\x2\x1E7\x1E6\x3\x2\x2\x2\x1E7\x1E8\x3\x2\x2\x2\x1E8\x1E9\x3\x2\x2\x2"+
		"\x1E9\x1EA\a\x1C\x2\x2\x1EA\x1EB\x5\x44#\x2\x1EBW\x3\x2\x2\x2\x1EC\x1F0"+
		"\x5\x66\x34\x2\x1ED\x1F0\x5\x84\x43\x2\x1EE\x1F0\x5\x96L\x2\x1EF\x1EC"+
		"\x3\x2\x2\x2\x1EF\x1ED\x3\x2\x2\x2\x1EF\x1EE\x3\x2\x2\x2\x1F0Y\x3\x2\x2"+
		"\x2\x1F1\x1F2\x5\x84\x43\x2\x1F2[\x3\x2\x2\x2\x1F3\x1F4\x5\x84\x43\x2"+
		"\x1F4]\x3\x2\x2\x2\x1F5\x1F7\a\x1A\x2\x2\x1F6\x1F8\x5\x84\x43\x2\x1F7"+
		"\x1F6\x3\x2\x2\x2\x1F7\x1F8\x3\x2\x2\x2\x1F8\x1F9\x3\x2\x2\x2\x1F9\x1FA"+
		"\a\x34\x2\x2\x1FA_\x3\x2\x2\x2\x1FB\x1FC\a\x15\x2\x2\x1FC\x1FD\a\x34\x2"+
		"\x2\x1FD\x61\x3\x2\x2\x2\x1FE\x1FF\a\x16\x2\x2\x1FF\x200\a\x34\x2\x2\x200"+
		"\x63\x3\x2\x2\x2\x201\x204\x5\x66\x34\x2\x202\x204\x5h\x35\x2\x203\x201"+
		"\x3\x2\x2\x2\x203\x202\x3\x2\x2\x2\x204\x205\x3\x2\x2\x2\x205\x206\a\x34"+
		"\x2\x2\x206\x65\x3\x2\x2\x2\x207\x208\a\r\x2\x2\x208\x209\x5j\x36\x2\x209"+
		"g\x3\x2\x2\x2\x20A\x20B\a\xE\x2\x2\x20B\x20C\x5l\x37\x2\x20Ci\x3\x2\x2"+
		"\x2\x20D\x210\x5n\x38\x2\x20E\x20F\aJ\x2\x2\x20F\x211\x5\x84\x43\x2\x210"+
		"\x20E\x3\x2\x2\x2\x210\x211\x3\x2\x2\x2\x211k\x3\x2\x2\x2\x212\x213\x5"+
		"n\x38\x2\x213\x214\aJ\x2\x2\x214\x215\x5\x84\x43\x2\x215m\x3\x2\x2\x2"+
		"\x216\x219\x5p\x39\x2\x217\x218\a\x33\x2\x2\x218\x21A\x5r:\x2\x219\x217"+
		"\x3\x2\x2\x2\x219\x21A\x3\x2\x2\x2\x21Ao\x3\x2\x2\x2\x21B\x21C\x5\xB6"+
		"\\\x2\x21Cq\x3\x2\x2\x2\x21D\x222\x5t;\x2\x21E\x222\x5v<\x2\x21F\x222"+
		"\x5|?\x2\x220\x222\x5~@\x2\x221\x21D\x3\x2\x2\x2\x221\x21E\x3\x2\x2\x2"+
		"\x221\x21F\x3\x2\x2\x2\x221\x220\x3\x2\x2\x2\x222s\x3\x2\x2\x2\x223\x224"+
		"\a\v\x2\x2\x224u\x3\x2\x2\x2\x225\x228\x5z>\x2\x226\x228\x5x=\x2\x227"+
		"\x225\x3\x2\x2\x2\x227\x226\x3\x2\x2\x2\x228w\x3\x2\x2\x2\x229\x22E\a"+
		"T\x2\x2\x22A\x22B\a\x35\x2\x2\x22B\x22D\aT\x2\x2\x22C\x22A\x3\x2\x2\x2"+
		"\x22D\x230\x3\x2\x2\x2\x22E\x22C\x3\x2\x2\x2\x22E\x22F\x3\x2\x2\x2\x22F"+
		"y\x3\x2\x2\x2\x230\x22E\x3\x2\x2\x2\x231\x232\t\x2\x2\x2\x232{\x3\x2\x2"+
		"\x2\x233\x235\a\x1B\x2\x2\x234\x236\x5\x80\x41\x2\x235\x234\x3\x2\x2\x2"+
		"\x235\x236\x3\x2\x2\x2\x236\x237\x3\x2\x2\x2\x237\x239\a!\x2\x2\x238\x23A"+
		"\x5r:\x2\x239\x238\x3\x2\x2\x2\x239\x23A\x3\x2\x2\x2\x23A\x23B\x3\x2\x2"+
		"\x2\x23B\x23C\a\x1C\x2\x2\x23C}\x3\x2\x2\x2\x23D\x23E\a\x1D\x2\x2\x23E"+
		"\x23F\x5r:\x2\x23F\x240\a\x1E\x2\x2\x240\x7F\x3\x2\x2\x2\x241\x246\x5"+
		"\x82\x42\x2\x242\x243\a\x36\x2\x2\x243\x245\x5\x82\x42\x2\x244\x242\x3"+
		"\x2\x2\x2\x245\x248\x3\x2\x2\x2\x246\x244\x3\x2\x2\x2\x246\x247\x3\x2"+
		"\x2\x2\x247\x81\x3\x2\x2\x2\x248\x246\x3\x2\x2\x2\x249\x24B\x5r:\x2\x24A"+
		"\x24C\a\x32\x2\x2\x24B\x24A\x3\x2\x2\x2\x24B\x24C\x3\x2\x2\x2\x24C\x83"+
		"\x3\x2\x2\x2\x24D\x24E\b\x43\x1\x2\x24E\x24F\a\x1B\x2\x2\x24F\x250\x5"+
		"r:\x2\x250\x251\a\x1C\x2\x2\x251\x252\x5\x84\x43\xE\x252\x27F\x3\x2\x2"+
		"\x2\x253\x254\x5\xA0Q\x2\x254\x255\x5\x84\x43\r\x255\x27F\x3\x2\x2\x2"+
		"\x256\x257\a\x1B\x2\x2\x257\x258\x5\x84\x43\x2\x258\x25A\a\x1C\x2\x2\x259"+
		"\x25B\x5\xB4[\x2\x25A\x259\x3\x2\x2\x2\x25A\x25B\x3\x2\x2\x2\x25B\x27F"+
		"\x3\x2\x2\x2\x25C\x25D\a\x1B\x2\x2\x25D\x25E\x5\x96L\x2\x25E\x25F\a\x1C"+
		"\x2\x2\x25F\x27F\x3\x2\x2\x2\x260\x261\x5\x9CO\x2\x261\x262\x5\xA8U\x2"+
		"\x262\x27F\x3\x2\x2\x2\x263\x264\x5\xA8U\x2\x264\x265\x5\x9EP\x2\x265"+
		"\x27F\x3\x2\x2\x2\x266\x268\x5\x9AN\x2\x267\x269\x5\xB4[\x2\x268\x267"+
		"\x3\x2\x2\x2\x268\x269\x3\x2\x2\x2\x269\x27F\x3\x2\x2\x2\x26A\x26C\x5"+
		"\xB6\\\x2\x26B\x26D\x5\xB4[\x2\x26C\x26B\x3\x2\x2\x2\x26C\x26D\x3\x2\x2"+
		"\x2\x26D\x27F\x3\x2\x2\x2\x26E\x270\x5\xBA^\x2\x26F\x271\x5\xB2Z\x2\x270"+
		"\x26F\x3\x2\x2\x2\x270\x271\x3\x2\x2\x2\x271\x27F\x3\x2\x2\x2\x272\x274"+
		"\x5\xB8]\x2\x273\x275\x5\xB4[\x2\x274\x273\x3\x2\x2\x2\x274\x275\x3\x2"+
		"\x2\x2\x275\x27F\x3\x2\x2\x2\x276\x278\x5\x98M\x2\x277\x279\x5\xB4[\x2"+
		"\x278\x277\x3\x2\x2\x2\x278\x279\x3\x2\x2\x2\x279\x27F\x3\x2\x2\x2\x27A"+
		"\x27C\x5\xC6\x64\x2\x27B\x27D\x5\xB2Z\x2\x27C\x27B\x3\x2\x2\x2\x27C\x27D"+
		"\x3\x2\x2\x2\x27D\x27F\x3\x2\x2\x2\x27E\x24D\x3\x2\x2\x2\x27E\x253\x3"+
		"\x2\x2\x2\x27E\x256\x3\x2\x2\x2\x27E\x25C\x3\x2\x2\x2\x27E\x260\x3\x2"+
		"\x2\x2\x27E\x263\x3\x2\x2\x2\x27E\x266\x3\x2\x2\x2\x27E\x26A\x3\x2\x2"+
		"\x2\x27E\x26E\x3\x2\x2\x2\x27E\x272\x3\x2\x2\x2\x27E\x276\x3\x2\x2\x2"+
		"\x27E\x27A\x3\x2\x2\x2\x27F\x2A8\x3\x2\x2\x2\x280\x281\f\f\x2\x2\x281"+
		"\x282\x5\x86\x44\x2\x282\x283\x5\x84\x43\r\x283\x2A7\x3\x2\x2\x2\x284"+
		"\x285\f\v\x2\x2\x285\x286\x5\x88\x45\x2\x286\x287\x5\x84\x43\f\x287\x2A7"+
		"\x3\x2\x2\x2\x288\x289\f\n\x2\x2\x289\x28A\x5\x8A\x46\x2\x28A\x28B\x5"+
		"\x84\x43\v\x28B\x2A7\x3\x2\x2\x2\x28C\x28D\f\t\x2\x2\x28D\x28E\x5\x8C"+
		"G\x2\x28E\x28F\x5\x84\x43\n\x28F\x2A7\x3\x2\x2\x2\x290\x291\f\b\x2\x2"+
		"\x291\x292\x5\x8EH\x2\x292\x293\x5\x84\x43\t\x293\x2A7\x3\x2\x2\x2\x294"+
		"\x295\f\a\x2\x2\x295\x296\x5\x90I\x2\x296\x297\x5\x84\x43\b\x297\x2A7"+
		"\x3\x2\x2\x2\x298\x299\f\x6\x2\x2\x299\x29A\x5\x92J\x2\x29A\x29B\x5\x84"+
		"\x43\a\x29B\x2A7\x3\x2\x2\x2\x29C\x29D\f\x5\x2\x2\x29D\x29E\x5\x94K\x2"+
		"\x29E\x29F\x5\x84\x43\x6\x29F\x2A7\x3\x2\x2\x2\x2A0\x2A1\f\x3\x2\x2\x2A1"+
		"\x2A2\a\x5\x2\x2\x2A2\x2A3\x5\x84\x43\x2\x2A3\x2A4\a\x33\x2\x2\x2A4\x2A5"+
		"\x5\x84\x43\x3\x2A5\x2A7\x3\x2\x2\x2\x2A6\x280\x3\x2\x2\x2\x2A6\x284\x3"+
		"\x2\x2\x2\x2A6\x288\x3\x2\x2\x2\x2A6\x28C\x3\x2\x2\x2\x2A6\x290\x3\x2"+
		"\x2\x2\x2A6\x294\x3\x2\x2\x2\x2A6\x298\x3\x2\x2\x2\x2A6\x29C\x3\x2\x2"+
		"\x2\x2A6\x2A0\x3\x2\x2\x2\x2A7\x2AA\x3\x2\x2\x2\x2A8\x2A6\x3\x2\x2\x2"+
		"\x2A8\x2A9\x3\x2\x2\x2\x2A9\x85\x3\x2\x2\x2\x2AA\x2A8\x3\x2\x2\x2\x2AB"+
		"\x2AC\t\x3\x2\x2\x2AC\x87\x3\x2\x2\x2\x2AD\x2AE\t\x4\x2\x2\x2AE\x89\x3"+
		"\x2\x2\x2\x2AF\x2B0\t\x5\x2\x2\x2B0\x8B\x3\x2\x2\x2\x2B1\x2B2\a@\x2\x2"+
		"\x2B2\x8D\x3\x2\x2\x2\x2B3\x2B4\a\x41\x2\x2\x2B4\x8F\x3\x2\x2\x2\x2B5"+
		"\x2B6\t\x6\x2\x2\x2B6\x91\x3\x2\x2\x2\x2B7\x2B8\aH\x2\x2\x2B8\x93\x3\x2"+
		"\x2\x2\x2B9\x2BA\aI\x2\x2\x2BA\x95\x3\x2\x2\x2\x2BB\x2BC\x5\xA8U\x2\x2BC"+
		"\x2BF\x5\xA2R\x2\x2BD\x2C0\x5\x84\x43\x2\x2BE\x2C0\x5\x96L\x2\x2BF\x2BD"+
		"\x3\x2\x2\x2\x2BF\x2BE\x3\x2\x2\x2\x2C0\x97\x3\x2\x2\x2\x2C1\x2C2\a\x10"+
		"\x2\x2\x2C2\x2C3\x5v<\x2\x2C3\x2C4\x5\xA4S\x2\x2C4\x99\x3\x2\x2\x2\x2C5"+
		"\x2C8\x5\x34\x1B\x2\x2C6\x2C8\x5.\x18\x2\x2C7\x2C5\x3\x2\x2\x2\x2C7\x2C6"+
		"\x3\x2\x2\x2\x2C8\x2CA\x3\x2\x2\x2\x2C9\x2CB\x5\x32\x1A\x2\x2CA\x2C9\x3"+
		"\x2\x2\x2\x2CA\x2CB\x3\x2\x2\x2\x2CB\x2CC\x3\x2\x2\x2\x2CC\x2CD\a\"\x2"+
		"\x2\x2CD\x2CE\x5,\x17\x2\x2CE\x9B\x3\x2\x2\x2\x2CF\x2D0\t\a\x2\x2\x2D0"+
		"\x9D\x3\x2\x2\x2\x2D1\x2D2\t\a\x2\x2\x2D2\x9F\x3\x2\x2\x2\x2D3\x2D4\t"+
		"\b\x2\x2\x2D4\xA1\x3\x2\x2\x2\x2D5\x2D6\t\t\x2\x2\x2D6\xA3\x3\x2\x2\x2"+
		"\x2D7\x2D9\a\x1B\x2\x2\x2D8\x2DA\x5\xA6T\x2\x2D9\x2D8\x3\x2\x2\x2\x2D9"+
		"\x2DA\x3\x2\x2\x2\x2DA\x2DB\x3\x2\x2\x2\x2DB\x2DC\a\x1C\x2\x2\x2DC\xA5"+
		"\x3\x2\x2\x2\x2DD\x2E2\x5\x84\x43\x2\x2DE\x2DF\a\x36\x2\x2\x2DF\x2E1\x5"+
		"\x84\x43\x2\x2E0\x2DE\x3\x2\x2\x2\x2E1\x2E4\x3\x2\x2\x2\x2E2\x2E0\x3\x2"+
		"\x2\x2\x2E2\x2E3\x3\x2\x2\x2\x2E3\xA7\x3\x2\x2\x2\x2E4\x2E2\x3\x2\x2\x2"+
		"\x2E5\x2E7\x5\xB6\\\x2\x2E6\x2E8\x5\xAAV\x2\x2E7\x2E6\x3\x2\x2\x2\x2E7"+
		"\x2E8\x3\x2\x2\x2\x2E8\xA9\x3\x2\x2\x2\x2E9\x2EA\x5\xACW\x2\x2EA\x2EB"+
		"\x5\xAAV\x2\x2EB\x2F5\x3\x2\x2\x2\x2EC\x2EE\x5\xAEX\x2\x2ED\x2EF\x5\xAA"+
		"V\x2\x2EE\x2ED\x3\x2\x2\x2\x2EE\x2EF\x3\x2\x2\x2\x2EF\x2F5\x3\x2\x2\x2"+
		"\x2F0\x2F2\x5\xB0Y\x2\x2F1\x2F3\x5\xAAV\x2\x2F2\x2F1\x3\x2\x2\x2\x2F2"+
		"\x2F3\x3\x2\x2\x2\x2F3\x2F5\x3\x2\x2\x2\x2F4\x2E9\x3\x2\x2\x2\x2F4\x2EC"+
		"\x3\x2\x2\x2\x2F4\x2F0\x3\x2\x2\x2\x2F5\xAB\x3\x2\x2\x2\x2F6\x2F7\x5\xA4"+
		"S\x2\x2F7\xAD\x3\x2\x2\x2\x2F8\x2F9\a\x35\x2\x2\x2F9\x2FA\x5\xB6\\\x2"+
		"\x2FA\xAF\x3\x2\x2\x2\x2FB\x2FC\a\x1D\x2\x2\x2FC\x2FD\x5\x84\x43\x2\x2FD"+
		"\x2FE\a\x1E\x2\x2\x2FE\xB1\x3\x2\x2\x2\x2FF\x302\x5\xAEX\x2\x300\x302"+
		"\x5\xB0Y\x2\x301\x2FF\x3\x2\x2\x2\x301\x300\x3\x2\x2\x2\x302\x304\x3\x2"+
		"\x2\x2\x303\x305\x5\xB4[\x2\x304\x303\x3\x2\x2\x2\x304\x305\x3\x2\x2\x2"+
		"\x305\xB3\x3\x2\x2\x2\x306\x30A\x5\xACW\x2\x307\x30A\x5\xAEX\x2\x308\x30A"+
		"\x5\xB0Y\x2\x309\x306\x3\x2\x2\x2\x309\x307\x3\x2\x2\x2\x309\x308\x3\x2"+
		"\x2\x2\x30A\x30C\x3\x2\x2\x2\x30B\x30D\x5\xB4[\x2\x30C\x30B\x3\x2\x2\x2"+
		"\x30C\x30D\x3\x2\x2\x2\x30D\xB5\x3\x2\x2\x2\x30E\x30F\aT\x2\x2\x30F\xB7"+
		"\x3\x2\x2\x2\x310\x312\a\x1D\x2\x2\x311\x313\x5\xA6T\x2\x312\x311\x3\x2"+
		"\x2\x2\x312\x313\x3\x2\x2\x2\x313\x314\x3\x2\x2\x2\x314\x315\a\x1E\x2"+
		"\x2\x315\xB9\x3\x2\x2\x2\x316\x318\a\x1F\x2\x2\x317\x319\x5\xBE`\x2\x318"+
		"\x317\x3\x2\x2\x2\x318\x319\x3\x2\x2\x2\x319\x31A\x3\x2\x2\x2\x31A\x31B"+
		"\a \x2\x2\x31B\xBB\x3\x2\x2\x2\x31C\x31D\a\x6\x2\x2\x31D\xBD\x3\x2\x2"+
		"\x2\x31E\x323\x5\xC0\x61\x2\x31F\x320\a\x36\x2\x2\x320\x322\x5\xC0\x61"+
		"\x2\x321\x31F\x3\x2\x2\x2\x322\x325\x3\x2\x2\x2\x323\x321\x3\x2\x2\x2"+
		"\x323\x324\x3\x2\x2\x2\x324\xBF\x3\x2\x2\x2\x325\x323\x3\x2\x2\x2\x326"+
		"\x327\x5\xC2\x62\x2\x327\x328\a\x33\x2\x2\x328\x329\x5\x84\x43\x2\x329"+
		"\xC1\x3\x2\x2\x2\x32A\x32D\aT\x2\x2\x32B\x32D\x5\xBC_\x2\x32C\x32A\x3"+
		"\x2\x2\x2\x32C\x32B\x3\x2\x2\x2\x32D\xC3\x3\x2\x2\x2\x32E\x330\a<\x2\x2"+
		"\x32F\x32E\x3\x2\x2\x2\x32F\x330\x3\x2\x2\x2\x330\x331\x3\x2\x2\x2\x331"+
		"\x337\x5\xC8\x65\x2\x332\x337\a-\x2\x2\x333\x337\a.\x2\x2\x334\x337\a"+
		"/\x2\x2\x335\x337\x5\xBC_\x2\x336\x32F\x3\x2\x2\x2\x336\x332\x3\x2\x2"+
		"\x2\x336\x333\x3\x2\x2\x2\x336\x334\x3\x2\x2\x2\x336\x335\x3\x2\x2\x2"+
		"\x337\xC5\x3\x2\x2\x2\x338\x33E\x5\xC8\x65\x2\x339\x33E\a-\x2\x2\x33A"+
		"\x33E\a.\x2\x2\x33B\x33E\a/\x2\x2\x33C\x33E\x5\xBC_\x2\x33D\x338\x3\x2"+
		"\x2\x2\x33D\x339\x3\x2\x2\x2\x33D\x33A\x3\x2\x2\x2\x33D\x33B\x3\x2\x2"+
		"\x2\x33D\x33C\x3\x2\x2\x2\x33E\xC7\x3\x2\x2\x2\x33F\x343\x5\xCA\x66\x2"+
		"\x340\x343\x5\xCCg\x2\x341\x343\t\n\x2\x2\x342\x33F\x3\x2\x2\x2\x342\x340"+
		"\x3\x2\x2\x2\x342\x341\x3\x2\x2\x2\x343\xC9\x3\x2\x2\x2\x344\x345\a*\x2"+
		"\x2\x345\xCB\x3\x2\x2\x2\x346\x347\a+\x2\x2\x347\xCD\x3\x2\x2\x2T\xD6"+
		"\xD8\xDE\xEA\xEC\xF5\xFD\x103\x112\x114\x11A\x122\x129\x12D\x132\x139"+
		"\x13C\x143\x146\x14E\x157\x160\x165\x16C\x172\x179\x17B\x185\x190\x19E"+
		"\x1A4\x1AF\x1BE\x1C2\x1CC\x1D4\x1DF\x1E3\x1E7\x1EF\x1F7\x203\x210\x219"+
		"\x221\x227\x22E\x235\x239\x246\x24B\x25A\x268\x26C\x270\x274\x278\x27C"+
		"\x27E\x2A6\x2A8\x2BF\x2C7\x2CA\x2D9\x2E2\x2E7\x2EE\x2F2\x2F4\x301\x304"+
		"\x309\x30C\x312\x318\x323\x32C\x32F\x336\x33D\x342";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
