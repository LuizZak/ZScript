#region License information
/*
    ZScript Game Scripting Programming Language
    Copyright (C) 2015  Luiz Fernando Silva

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
*/
#endregion

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Luiz Fernando/Documents/Visual Studio 2013/Engines/ZScript/ZScript\ZScript.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class ZScriptParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, StringLiteral=5, DoubleQuoteEscape=6, 
		SingleQuoteEscape=7, T_EXPORT=8, T_FUNCTION=9, T_OVERRIDE=10, T_OBJECT=11, 
		T_SEQUENCE=12, T_THIS=13, T_BASE=14, T_VAR=15, T_LET=16, T_CONST=17, T_NEW=18, 
		T_IS=19, T_IF=20, T_ELSE=21, T_WHILE=22, T_FOR=23, T_BREAK=24, T_CONTINUE=25, 
		T_SWITCH=26, T_CASE=27, T_DEFAULT=28, T_RETURN=29, T_LEFT_PAREN=30, T_RIGHT_PAREN=31, 
		T_LEFT_BRACKET=32, T_RIGHT_BRACKET=33, T_LEFT_CURLY=34, T_RIGHT_CURLY=35, 
		T_CLOSURE_RETURN=36, T_CLOSURE_CALL=37, T_INT=38, T_FLOAT=39, T_VOID=40, 
		T_ANY=41, T_STRING=42, T_BOOL=43, INT=44, HEX=45, BINARY=46, FLOAT=47, 
		T_FALSE=48, T_TRUE=49, T_NULL=50, T_QUOTES=51, T_DOUBLE_QUOTES=52, T_TRIPPLE_DOT=53, 
		T_DOUBLE_COLON=54, T_SEMICOLON=55, T_PERIOD=56, T_COMMA=57, T_MULT=58, 
		T_DIV=59, T_MOD=60, T_NOT=61, T_PLUS=62, T_MINUS=63, T_INCREMENT=64, T_DECREMENT=65, 
		T_BITWISE_AND=66, T_BITWISE_XOR=67, T_BITWISE_OR=68, T_SHIFTLEFT=69, T_SHIFTRIGHT=70, 
		T_EQUALITY=71, T_UNEQUALITY=72, T_MORE_THAN_OR_EQUALS=73, T_LESS_THAN_OR_EQUALS=74, 
		T_MORE_THAN=75, T_LESS_THAN=76, T_LOGICAL_AND=77, T_LOGICAL_OR=78, T_EQUALS=79, 
		T_PLUS_EQUALS=80, T_MINUS_EQUALS=81, T_TIMES_EQUALS=82, T_DIV_EQUALS=83, 
		T_MOD_EQUALS=84, T_XOR_EQUALS=85, T_AND_EQUALS=86, T_TILDE_EQUALS=87, 
		T_OR_EQUALS=88, T_SHIFTLEFT_EQUALS=89, T_SHIFTRIGHT_EQUALS=90, IDENT=91, 
		Whitespace=92, Newline=93, BlockComment=94, LineComment=95, ImportDirective=96;
	public const int
		RULE_program = 0, RULE_scriptBody = 1, RULE_classDefinition = 2, RULE_classInherit = 3, 
		RULE_className = 4, RULE_classBody = 5, RULE_classField = 6, RULE_classMethod = 7, 
		RULE_globalVariable = 8, RULE_sequenceBlock = 9, RULE_sequenceName = 10, 
		RULE_sequenceBody = 11, RULE_sequenceFrame = 12, RULE_sequenceFrameChange = 13, 
		RULE_frameName = 14, RULE_frameRange = 15, RULE_frameRangeElement = 16, 
		RULE_frameNumber = 17, RULE_functionDefinition = 18, RULE_exportDefinition = 19, 
		RULE_functionName = 20, RULE_functionBody = 21, RULE_functionArguments = 22, 
		RULE_argumentList = 23, RULE_returnType = 24, RULE_functionArg = 25, RULE_argumentName = 26, 
		RULE_typeAlias = 27, RULE_typeAliasBody = 28, RULE_typeAliasVariable = 29, 
		RULE_typeAliasFunction = 30, RULE_typeAliasName = 31, RULE_typeAliasInherit = 32, 
		RULE_statement = 33, RULE_blockStatement = 34, RULE_ifStatement = 35, 
		RULE_elseStatement = 36, RULE_switchStatement = 37, RULE_switchBlock = 38, 
		RULE_caseBlock = 39, RULE_defaultBlock = 40, RULE_whileStatement = 41, 
		RULE_forStatement = 42, RULE_forInit = 43, RULE_forCondition = 44, RULE_forIncrement = 45, 
		RULE_returnStatement = 46, RULE_breakStatement = 47, RULE_continueStatement = 48, 
		RULE_valueDeclareStatement = 49, RULE_valueHolderDecl = 50, RULE_valueHolderName = 51, 
		RULE_type = 52, RULE_objectType = 53, RULE_typeName = 54, RULE_complexTypeName = 55, 
		RULE_primitiveType = 56, RULE_callableType = 57, RULE_listType = 58, RULE_dictionaryType = 59, 
		RULE_callableTypeList = 60, RULE_callableArgType = 61, RULE_expression = 62, 
		RULE_multOp = 63, RULE_additionOp = 64, RULE_bitwiseShift = 65, RULE_bitwiseAndOp = 66, 
		RULE_bitwiseXOrOp = 67, RULE_bitwiseOrOp = 68, RULE_relationalOp = 69, 
		RULE_equalityOp = 70, RULE_logicalAnd = 71, RULE_logicalOr = 72, RULE_assignmentExpression = 73, 
		RULE_newExpression = 74, RULE_closureExpression = 75, RULE_prefixOperator = 76, 
		RULE_postfixOperator = 77, RULE_unaryOperator = 78, RULE_assignmentOperator = 79, 
		RULE_funcCallArguments = 80, RULE_expressionList = 81, RULE_leftValue = 82, 
		RULE_leftValueAccess = 83, RULE_functionCall = 84, RULE_fieldAccess = 85, 
		RULE_arrayAccess = 86, RULE_objectAccess = 87, RULE_valueAccess = 88, 
		RULE_memberName = 89, RULE_arrayLiteral = 90, RULE_dictionaryLiteral = 91, 
		RULE_objectLiteral = 92, RULE_stringLiteral = 93, RULE_dictionaryEntryList = 94, 
		RULE_dictionaryEntry = 95, RULE_objectEntryList = 96, RULE_objectEntryDefinition = 97, 
		RULE_entryName = 98, RULE_compileConstant = 99, RULE_constantAtom = 100, 
		RULE_numericAtom = 101, RULE_hexadecimalNumber = 102, RULE_binaryNumber = 103;
	public static readonly string[] ruleNames = {
		"program", "scriptBody", "classDefinition", "classInherit", "className", 
		"classBody", "classField", "classMethod", "globalVariable", "sequenceBlock", 
		"sequenceName", "sequenceBody", "sequenceFrame", "sequenceFrameChange", 
		"frameName", "frameRange", "frameRangeElement", "frameNumber", "functionDefinition", 
		"exportDefinition", "functionName", "functionBody", "functionArguments", 
		"argumentList", "returnType", "functionArg", "argumentName", "typeAlias", 
		"typeAliasBody", "typeAliasVariable", "typeAliasFunction", "typeAliasName", 
		"typeAliasInherit", "statement", "blockStatement", "ifStatement", "elseStatement", 
		"switchStatement", "switchBlock", "caseBlock", "defaultBlock", "whileStatement", 
		"forStatement", "forInit", "forCondition", "forIncrement", "returnStatement", 
		"breakStatement", "continueStatement", "valueDeclareStatement", "valueHolderDecl", 
		"valueHolderName", "type", "objectType", "typeName", "complexTypeName", 
		"primitiveType", "callableType", "listType", "dictionaryType", "callableTypeList", 
		"callableArgType", "expression", "multOp", "additionOp", "bitwiseShift", 
		"bitwiseAndOp", "bitwiseXOrOp", "bitwiseOrOp", "relationalOp", "equalityOp", 
		"logicalAnd", "logicalOr", "assignmentExpression", "newExpression", "closureExpression", 
		"prefixOperator", "postfixOperator", "unaryOperator", "assignmentOperator", 
		"funcCallArguments", "expressionList", "leftValue", "leftValueAccess", 
		"functionCall", "fieldAccess", "arrayAccess", "objectAccess", "valueAccess", 
		"memberName", "arrayLiteral", "dictionaryLiteral", "objectLiteral", "stringLiteral", 
		"dictionaryEntryList", "dictionaryEntry", "objectEntryList", "objectEntryDefinition", 
		"entryName", "compileConstant", "constantAtom", "numericAtom", "hexadecimalNumber", 
		"binaryNumber"
	};

	private static readonly string[] _LiteralNames = {
		null, "'class'", "'typeAlias'", "'<-'", "'?'", null, null, null, "'@'", 
		"'func'", "'override'", "'object'", "'sequence'", "'this'", "'base'", 
		"'var'", "'let'", "'const'", "'new'", "'is'", "'if'", "'else'", "'while'", 
		"'for'", "'break'", "'continue'", "'switch'", "'case'", "'default'", "'return'", 
		"'('", "')'", "'['", "']'", "'{'", "'}'", "'->'", "'=>'", "'int'", "'float'", 
		"'void'", "'any'", "'string'", "'bool'", null, null, null, null, "'false'", 
		"'true'", "'null'", "'''", "'\"'", "'...'", "':'", "';'", "'.'", "','", 
		"'*'", "'/'", "'%'", "'!'", "'+'", "'-'", "'++'", "'--'", "'&'", "'^'", 
		"'|'", null, null, "'=='", "'!='", "'>='", "'<='", "'>'", "'<'", "'&&'", 
		"'||'", "'='", "'+='", "'-='", "'*='", "'/='", "'%='", "'^='", "'&='", 
		"'~='", "'|='", "'<<='", "'>>='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, "StringLiteral", "DoubleQuoteEscape", "SingleQuoteEscape", 
		"T_EXPORT", "T_FUNCTION", "T_OVERRIDE", "T_OBJECT", "T_SEQUENCE", "T_THIS", 
		"T_BASE", "T_VAR", "T_LET", "T_CONST", "T_NEW", "T_IS", "T_IF", "T_ELSE", 
		"T_WHILE", "T_FOR", "T_BREAK", "T_CONTINUE", "T_SWITCH", "T_CASE", "T_DEFAULT", 
		"T_RETURN", "T_LEFT_PAREN", "T_RIGHT_PAREN", "T_LEFT_BRACKET", "T_RIGHT_BRACKET", 
		"T_LEFT_CURLY", "T_RIGHT_CURLY", "T_CLOSURE_RETURN", "T_CLOSURE_CALL", 
		"T_INT", "T_FLOAT", "T_VOID", "T_ANY", "T_STRING", "T_BOOL", "INT", "HEX", 
		"BINARY", "FLOAT", "T_FALSE", "T_TRUE", "T_NULL", "T_QUOTES", "T_DOUBLE_QUOTES", 
		"T_TRIPPLE_DOT", "T_DOUBLE_COLON", "T_SEMICOLON", "T_PERIOD", "T_COMMA", 
		"T_MULT", "T_DIV", "T_MOD", "T_NOT", "T_PLUS", "T_MINUS", "T_INCREMENT", 
		"T_DECREMENT", "T_BITWISE_AND", "T_BITWISE_XOR", "T_BITWISE_OR", "T_SHIFTLEFT", 
		"T_SHIFTRIGHT", "T_EQUALITY", "T_UNEQUALITY", "T_MORE_THAN_OR_EQUALS", 
		"T_LESS_THAN_OR_EQUALS", "T_MORE_THAN", "T_LESS_THAN", "T_LOGICAL_AND", 
		"T_LOGICAL_OR", "T_EQUALS", "T_PLUS_EQUALS", "T_MINUS_EQUALS", "T_TIMES_EQUALS", 
		"T_DIV_EQUALS", "T_MOD_EQUALS", "T_XOR_EQUALS", "T_AND_EQUALS", "T_TILDE_EQUALS", 
		"T_OR_EQUALS", "T_SHIFTLEFT_EQUALS", "T_SHIFTRIGHT_EQUALS", "IDENT", "Whitespace", 
		"Newline", "BlockComment", "LineComment", "ImportDirective"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ZScript.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public ZScriptParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ScriptBodyContext scriptBody() {
			return GetRuleContext<ScriptBodyContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208; scriptBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptBodyContext : ParserRuleContext {
		public FunctionDefinitionContext[] functionDefinition() {
			return GetRuleContexts<FunctionDefinitionContext>();
		}
		public FunctionDefinitionContext functionDefinition(int i) {
			return GetRuleContext<FunctionDefinitionContext>(i);
		}
		public GlobalVariableContext[] globalVariable() {
			return GetRuleContexts<GlobalVariableContext>();
		}
		public GlobalVariableContext globalVariable(int i) {
			return GetRuleContext<GlobalVariableContext>(i);
		}
		public ExportDefinitionContext[] exportDefinition() {
			return GetRuleContexts<ExportDefinitionContext>();
		}
		public ExportDefinitionContext exportDefinition(int i) {
			return GetRuleContext<ExportDefinitionContext>(i);
		}
		public ClassDefinitionContext[] classDefinition() {
			return GetRuleContexts<ClassDefinitionContext>();
		}
		public ClassDefinitionContext classDefinition(int i) {
			return GetRuleContext<ClassDefinitionContext>(i);
		}
		public SequenceBlockContext[] sequenceBlock() {
			return GetRuleContexts<SequenceBlockContext>();
		}
		public SequenceBlockContext sequenceBlock(int i) {
			return GetRuleContext<SequenceBlockContext>(i);
		}
		public TypeAliasContext[] typeAlias() {
			return GetRuleContexts<TypeAliasContext>();
		}
		public TypeAliasContext typeAlias(int i) {
			return GetRuleContext<TypeAliasContext>(i);
		}
		public ScriptBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scriptBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterScriptBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitScriptBody(this);
		}
	}

	[RuleVersion(0)]
	public ScriptBodyContext scriptBody() {
		ScriptBodyContext _localctx = new ScriptBodyContext(Context, State);
		EnterRule(_localctx, 2, RULE_scriptBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T_EXPORT) | (1L << T_FUNCTION) | (1L << T_SEQUENCE) | (1L << T_VAR) | (1L << T_LET))) != 0)) {
				{
				State = 216;
				switch (TokenStream.La(1)) {
				case T_FUNCTION:
					{
					State = 210; functionDefinition();
					}
					break;
				case T_VAR:
				case T_LET:
					{
					State = 211; globalVariable();
					}
					break;
				case T_EXPORT:
					{
					State = 212; exportDefinition();
					}
					break;
				case T__0:
					{
					State = 213; classDefinition();
					}
					break;
				case T_SEQUENCE:
					{
					State = 214; sequenceBlock();
					}
					break;
				case T__1:
					{
					State = 215; typeAlias();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 220;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDefinitionContext : ParserRuleContext {
		public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ClassInheritContext classInherit() {
			return GetRuleContext<ClassInheritContext>(0);
		}
		public ClassDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterClassDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitClassDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ClassDefinitionContext classDefinition() {
		ClassDefinitionContext _localctx = new ClassDefinitionContext(Context, State);
		EnterRule(_localctx, 4, RULE_classDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221; Match(T__0);
			State = 222; className();
			State = 224;
			_la = TokenStream.La(1);
			if (_la==T_DOUBLE_COLON) {
				{
				State = 223; classInherit();
				}
			}

			State = 226; classBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassInheritContext : ParserRuleContext {
		public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		public ClassInheritContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classInherit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterClassInherit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitClassInherit(this);
		}
	}

	[RuleVersion(0)]
	public ClassInheritContext classInherit() {
		ClassInheritContext _localctx = new ClassInheritContext(Context, State);
		EnterRule(_localctx, 6, RULE_classInherit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228; Match(T_DOUBLE_COLON);
			State = 229; className();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassNameContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(ZScriptParser.IDENT, 0); }
		public ClassNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_className; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterClassName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitClassName(this);
		}
	}

	[RuleVersion(0)]
	public ClassNameContext className() {
		ClassNameContext _localctx = new ClassNameContext(Context, State);
		EnterRule(_localctx, 8, RULE_className);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231; Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		public ClassFieldContext[] classField() {
			return GetRuleContexts<ClassFieldContext>();
		}
		public ClassFieldContext classField(int i) {
			return GetRuleContext<ClassFieldContext>(i);
		}
		public ClassMethodContext[] classMethod() {
			return GetRuleContexts<ClassMethodContext>();
		}
		public ClassMethodContext classMethod(int i) {
			return GetRuleContext<ClassMethodContext>(i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 10, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233; Match(T_LEFT_CURLY);
			State = 238;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T_FUNCTION) | (1L << T_OVERRIDE) | (1L << T_VAR) | (1L << T_LET))) != 0)) {
				{
				State = 236;
				switch (TokenStream.La(1)) {
				case T_VAR:
				case T_LET:
					{
					State = 234; classField();
					}
					break;
				case T_FUNCTION:
				case T_OVERRIDE:
					{
					State = 235; classMethod();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 240;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 241; Match(T_RIGHT_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassFieldContext : ParserRuleContext {
		public ValueDeclareStatementContext valueDeclareStatement() {
			return GetRuleContext<ValueDeclareStatementContext>(0);
		}
		public ClassFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classField; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterClassField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitClassField(this);
		}
	}

	[RuleVersion(0)]
	public ClassFieldContext classField() {
		ClassFieldContext _localctx = new ClassFieldContext(Context, State);
		EnterRule(_localctx, 12, RULE_classField);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243; valueDeclareStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassMethodContext : ParserRuleContext {
		public IToken @override;
		public FunctionDefinitionContext functionDefinition() {
			return GetRuleContext<FunctionDefinitionContext>(0);
		}
		public ClassMethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classMethod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterClassMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitClassMethod(this);
		}
	}

	[RuleVersion(0)]
	public ClassMethodContext classMethod() {
		ClassMethodContext _localctx = new ClassMethodContext(Context, State);
		EnterRule(_localctx, 14, RULE_classMethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246;
			_la = TokenStream.La(1);
			if (_la==T_OVERRIDE) {
				{
				State = 245; _localctx.@override = Match(T_OVERRIDE);
				}
			}

			State = 248; functionDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVariableContext : ParserRuleContext {
		public ValueDeclareStatementContext valueDeclareStatement() {
			return GetRuleContext<ValueDeclareStatementContext>(0);
		}
		public GlobalVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterGlobalVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitGlobalVariable(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVariableContext globalVariable() {
		GlobalVariableContext _localctx = new GlobalVariableContext(Context, State);
		EnterRule(_localctx, 16, RULE_globalVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250; valueDeclareStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SequenceBlockContext : ParserRuleContext {
		public SequenceNameContext sequenceName() {
			return GetRuleContext<SequenceNameContext>(0);
		}
		public SequenceBodyContext sequenceBody() {
			return GetRuleContext<SequenceBodyContext>(0);
		}
		public SequenceBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequenceBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterSequenceBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitSequenceBlock(this);
		}
	}

	[RuleVersion(0)]
	public SequenceBlockContext sequenceBlock() {
		SequenceBlockContext _localctx = new SequenceBlockContext(Context, State);
		EnterRule(_localctx, 18, RULE_sequenceBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252; Match(T_SEQUENCE);
			State = 253; sequenceName();
			State = 254; sequenceBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SequenceNameContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(ZScriptParser.IDENT, 0); }
		public SequenceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequenceName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterSequenceName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitSequenceName(this);
		}
	}

	[RuleVersion(0)]
	public SequenceNameContext sequenceName() {
		SequenceNameContext _localctx = new SequenceNameContext(Context, State);
		EnterRule(_localctx, 20, RULE_sequenceName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256; Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SequenceBodyContext : ParserRuleContext {
		public ClassFieldContext[] classField() {
			return GetRuleContexts<ClassFieldContext>();
		}
		public ClassFieldContext classField(int i) {
			return GetRuleContext<ClassFieldContext>(i);
		}
		public SequenceFrameContext[] sequenceFrame() {
			return GetRuleContexts<SequenceFrameContext>();
		}
		public SequenceFrameContext sequenceFrame(int i) {
			return GetRuleContext<SequenceFrameContext>(i);
		}
		public SequenceFrameChangeContext[] sequenceFrameChange() {
			return GetRuleContexts<SequenceFrameChangeContext>();
		}
		public SequenceFrameChangeContext sequenceFrameChange(int i) {
			return GetRuleContext<SequenceFrameChangeContext>(i);
		}
		public SequenceBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequenceBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterSequenceBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitSequenceBody(this);
		}
	}

	[RuleVersion(0)]
	public SequenceBodyContext sequenceBody() {
		SequenceBodyContext _localctx = new SequenceBodyContext(Context, State);
		EnterRule(_localctx, 22, RULE_sequenceBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258; Match(T_LEFT_BRACKET);
			State = 264;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T_VAR) | (1L << T_LET) | (1L << T_LEFT_CURLY) | (1L << INT) | (1L << T_PLUS) | (1L << T_MINUS))) != 0) || _la==T_EQUALS || _la==IDENT) {
				{
				State = 262;
				switch (TokenStream.La(1)) {
				case T_VAR:
				case T_LET:
					{
					State = 259; classField();
					}
					break;
				case T_LEFT_CURLY:
				case INT:
				case T_PLUS:
				case IDENT:
					{
					State = 260; sequenceFrame();
					}
					break;
				case T_MINUS:
				case T_EQUALS:
					{
					State = 261; sequenceFrameChange();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 266;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 267; Match(T_RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SequenceFrameContext : ParserRuleContext {
		public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public FrameNameContext frameName() {
			return GetRuleContext<FrameNameContext>(0);
		}
		public FrameRangeContext frameRange() {
			return GetRuleContext<FrameRangeContext>(0);
		}
		public SequenceFrameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequenceFrame; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterSequenceFrame(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitSequenceFrame(this);
		}
	}

	[RuleVersion(0)]
	public SequenceFrameContext sequenceFrame() {
		SequenceFrameContext _localctx = new SequenceFrameContext(Context, State);
		EnterRule(_localctx, 24, RULE_sequenceFrame);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			_la = TokenStream.La(1);
			if (_la==IDENT) {
				{
				State = 269; frameName();
				State = 270; Match(T_DOUBLE_COLON);
				}
			}

			State = 275;
			_la = TokenStream.La(1);
			if (_la==INT || _la==T_PLUS) {
				{
				State = 274; frameRange();
				}
			}

			State = 277; functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SequenceFrameChangeContext : ParserRuleContext {
		public FrameNumberContext frameNumber() {
			return GetRuleContext<FrameNumberContext>(0);
		}
		public SequenceFrameChangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequenceFrameChange; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterSequenceFrameChange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitSequenceFrameChange(this);
		}
	}

	[RuleVersion(0)]
	public SequenceFrameChangeContext sequenceFrameChange() {
		SequenceFrameChangeContext _localctx = new SequenceFrameChangeContext(Context, State);
		EnterRule(_localctx, 26, RULE_sequenceFrameChange);
		try {
			State = 283;
			switch (TokenStream.La(1)) {
			case T_EQUALS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 279; Match(T_EQUALS);
				State = 280; frameNumber();
				}
				break;
			case T_MINUS:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 281; Match(T_MINUS);
				State = 282; frameNumber();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameNameContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(ZScriptParser.IDENT, 0); }
		public FrameNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFrameName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFrameName(this);
		}
	}

	[RuleVersion(0)]
	public FrameNameContext frameName() {
		FrameNameContext _localctx = new FrameNameContext(Context, State);
		EnterRule(_localctx, 28, RULE_frameName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285; Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameRangeContext : ParserRuleContext {
		public FrameRangeElementContext[] frameRangeElement() {
			return GetRuleContexts<FrameRangeElementContext>();
		}
		public FrameRangeElementContext frameRangeElement(int i) {
			return GetRuleContext<FrameRangeElementContext>(i);
		}
		public FrameRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameRange; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFrameRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFrameRange(this);
		}
	}

	[RuleVersion(0)]
	public FrameRangeContext frameRange() {
		FrameRangeContext _localctx = new FrameRangeContext(Context, State);
		EnterRule(_localctx, 30, RULE_frameRange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287; frameRangeElement();
			State = 292;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T_COMMA) {
				{
				{
				State = 288; Match(T_COMMA);
				State = 289; frameRangeElement();
				}
				}
				State = 294;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameRangeElementContext : ParserRuleContext {
		public IToken relative;
		public FrameNumberContext[] frameNumber() {
			return GetRuleContexts<FrameNumberContext>();
		}
		public FrameNumberContext frameNumber(int i) {
			return GetRuleContext<FrameNumberContext>(i);
		}
		public FrameRangeElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameRangeElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFrameRangeElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFrameRangeElement(this);
		}
	}

	[RuleVersion(0)]
	public FrameRangeElementContext frameRangeElement() {
		FrameRangeElementContext _localctx = new FrameRangeElementContext(Context, State);
		EnterRule(_localctx, 32, RULE_frameRangeElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296;
			_la = TokenStream.La(1);
			if (_la==T_PLUS) {
				{
				State = 295; _localctx.relative = Match(T_PLUS);
				}
			}

			State = 298; frameNumber();
			State = 301;
			_la = TokenStream.La(1);
			if (_la==T_MINUS) {
				{
				State = 299; Match(T_MINUS);
				State = 300; frameNumber();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameNumberContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(ZScriptParser.INT, 0); }
		public FrameNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFrameNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFrameNumber(this);
		}
	}

	[RuleVersion(0)]
	public FrameNumberContext frameNumber() {
		FrameNumberContext _localctx = new FrameNumberContext(Context, State);
		EnterRule(_localctx, 34, RULE_frameNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303; Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public FunctionArgumentsContext functionArguments() {
			return GetRuleContext<FunctionArgumentsContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFunctionDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFunctionDefinition(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 36, RULE_functionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305; Match(T_FUNCTION);
			State = 306; functionName();
			State = 308;
			_la = TokenStream.La(1);
			if (_la==T_LEFT_PAREN) {
				{
				State = 307; functionArguments();
				}
			}

			State = 311;
			_la = TokenStream.La(1);
			if (_la==T_DOUBLE_COLON) {
				{
				State = 310; returnType();
				}
			}

			State = 313; functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportDefinitionContext : ParserRuleContext {
		public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		public FunctionArgumentsContext functionArguments() {
			return GetRuleContext<FunctionArgumentsContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public ExportDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterExportDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitExportDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ExportDefinitionContext exportDefinition() {
		ExportDefinitionContext _localctx = new ExportDefinitionContext(Context, State);
		EnterRule(_localctx, 38, RULE_exportDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315; Match(T_EXPORT);
			State = 316; functionName();
			State = 318;
			_la = TokenStream.La(1);
			if (_la==T_LEFT_PAREN) {
				{
				State = 317; functionArguments();
				}
			}

			State = 321;
			_la = TokenStream.La(1);
			if (_la==T_DOUBLE_COLON) {
				{
				State = 320; returnType();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionNameContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(ZScriptParser.IDENT, 0); }
		public FunctionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFunctionName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFunctionName(this);
		}
	}

	[RuleVersion(0)]
	public FunctionNameContext functionName() {
		FunctionNameContext _localctx = new FunctionNameContext(Context, State);
		EnterRule(_localctx, 40, RULE_functionName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323; Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFunctionBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFunctionBody(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 42, RULE_functionBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325; blockStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionArgumentsContext : ParserRuleContext {
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public FunctionArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFunctionArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFunctionArguments(this);
		}
	}

	[RuleVersion(0)]
	public FunctionArgumentsContext functionArguments() {
		FunctionArgumentsContext _localctx = new FunctionArgumentsContext(Context, State);
		EnterRule(_localctx, 44, RULE_functionArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 327; Match(T_LEFT_PAREN);
			State = 329;
			_la = TokenStream.La(1);
			if (_la==IDENT) {
				{
				State = 328; argumentList();
				}
			}

			State = 331; Match(T_RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public FunctionArgContext[] functionArg() {
			return GetRuleContexts<FunctionArgContext>();
		}
		public FunctionArgContext functionArg(int i) {
			return GetRuleContext<FunctionArgContext>(i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 46, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333; functionArg();
			State = 338;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T_COMMA) {
				{
				{
				State = 334; Match(T_COMMA);
				State = 335; functionArg();
				}
				}
				State = 340;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnTypeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterReturnType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitReturnType(this);
		}
	}

	[RuleVersion(0)]
	public ReturnTypeContext returnType() {
		ReturnTypeContext _localctx = new ReturnTypeContext(Context, State);
		EnterRule(_localctx, 48, RULE_returnType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341; Match(T_DOUBLE_COLON);
			State = 342; type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionArgContext : ParserRuleContext {
		public IToken variadic;
		public ArgumentNameContext argumentName() {
			return GetRuleContext<ArgumentNameContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public CompileConstantContext compileConstant() {
			return GetRuleContext<CompileConstantContext>(0);
		}
		public FunctionArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFunctionArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFunctionArg(this);
		}
	}

	[RuleVersion(0)]
	public FunctionArgContext functionArg() {
		FunctionArgContext _localctx = new FunctionArgContext(Context, State);
		EnterRule(_localctx, 50, RULE_functionArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 344; argumentName();
			State = 347;
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 345; Match(T_DOUBLE_COLON);
				State = 346; type();
				}
				break;
			}
			State = 352;
			switch (TokenStream.La(1)) {
			case T_TRIPPLE_DOT:
				{
				State = 349; _localctx.variadic = Match(T_TRIPPLE_DOT);
				}
				break;
			case T_EQUALS:
				{
				{
				State = 350; Match(T_EQUALS);
				State = 351; compileConstant();
				}
				}
				break;
			case T_RIGHT_PAREN:
			case T_CLOSURE_CALL:
			case T_DOUBLE_COLON:
			case T_COMMA:
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentNameContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(ZScriptParser.IDENT, 0); }
		public ArgumentNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterArgumentName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitArgumentName(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentNameContext argumentName() {
		ArgumentNameContext _localctx = new ArgumentNameContext(Context, State);
		EnterRule(_localctx, 52, RULE_argumentName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 354; Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeAliasContext : ParserRuleContext {
		public TypeAliasNameContext typeAliasName() {
			return GetRuleContext<TypeAliasNameContext>(0);
		}
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public TypeAliasBodyContext typeAliasBody() {
			return GetRuleContext<TypeAliasBodyContext>(0);
		}
		public TypeAliasInheritContext typeAliasInherit() {
			return GetRuleContext<TypeAliasInheritContext>(0);
		}
		public TypeAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeAlias; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterTypeAlias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitTypeAlias(this);
		}
	}

	[RuleVersion(0)]
	public TypeAliasContext typeAlias() {
		TypeAliasContext _localctx = new TypeAliasContext(Context, State);
		EnterRule(_localctx, 54, RULE_typeAlias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 356; Match(T__1);
			State = 357; typeAliasName();
			State = 359;
			_la = TokenStream.La(1);
			if (_la==T__2) {
				{
				State = 358; typeAliasInherit();
				}
			}

			State = 361; Match(T_DOUBLE_COLON);
			State = 362; stringLiteral();
			State = 365;
			switch (TokenStream.La(1)) {
			case T_SEMICOLON:
				{
				State = 363; Match(T_SEMICOLON);
				}
				break;
			case T_LEFT_CURLY:
				{
				State = 364; typeAliasBody();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeAliasBodyContext : ParserRuleContext {
		public TypeAliasVariableContext[] typeAliasVariable() {
			return GetRuleContexts<TypeAliasVariableContext>();
		}
		public TypeAliasVariableContext typeAliasVariable(int i) {
			return GetRuleContext<TypeAliasVariableContext>(i);
		}
		public TypeAliasFunctionContext[] typeAliasFunction() {
			return GetRuleContexts<TypeAliasFunctionContext>();
		}
		public TypeAliasFunctionContext typeAliasFunction(int i) {
			return GetRuleContext<TypeAliasFunctionContext>(i);
		}
		public TypeAliasBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeAliasBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterTypeAliasBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitTypeAliasBody(this);
		}
	}

	[RuleVersion(0)]
	public TypeAliasBodyContext typeAliasBody() {
		TypeAliasBodyContext _localctx = new TypeAliasBodyContext(Context, State);
		EnterRule(_localctx, 56, RULE_typeAliasBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 367; Match(T_LEFT_CURLY);
			State = 374;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T_FUNCTION) | (1L << T_VAR) | (1L << T_LET))) != 0)) {
				{
				State = 372;
				switch (TokenStream.La(1)) {
				case T_VAR:
				case T_LET:
					{
					State = 368; typeAliasVariable();
					}
					break;
				case T_FUNCTION:
					{
					State = 369; typeAliasFunction();
					State = 370; Match(T_SEMICOLON);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 376;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 377; Match(T_RIGHT_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeAliasVariableContext : ParserRuleContext {
		public ValueDeclareStatementContext valueDeclareStatement() {
			return GetRuleContext<ValueDeclareStatementContext>(0);
		}
		public TypeAliasVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeAliasVariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterTypeAliasVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitTypeAliasVariable(this);
		}
	}

	[RuleVersion(0)]
	public TypeAliasVariableContext typeAliasVariable() {
		TypeAliasVariableContext _localctx = new TypeAliasVariableContext(Context, State);
		EnterRule(_localctx, 58, RULE_typeAliasVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379; valueDeclareStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeAliasFunctionContext : ParserRuleContext {
		public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		public FunctionArgumentsContext functionArguments() {
			return GetRuleContext<FunctionArgumentsContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public TypeAliasFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeAliasFunction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterTypeAliasFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitTypeAliasFunction(this);
		}
	}

	[RuleVersion(0)]
	public TypeAliasFunctionContext typeAliasFunction() {
		TypeAliasFunctionContext _localctx = new TypeAliasFunctionContext(Context, State);
		EnterRule(_localctx, 60, RULE_typeAliasFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 381; Match(T_FUNCTION);
			State = 382; functionName();
			State = 383; functionArguments();
			State = 384; returnType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeAliasNameContext : ParserRuleContext {
		public ComplexTypeNameContext complexTypeName() {
			return GetRuleContext<ComplexTypeNameContext>(0);
		}
		public TypeAliasNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeAliasName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterTypeAliasName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitTypeAliasName(this);
		}
	}

	[RuleVersion(0)]
	public TypeAliasNameContext typeAliasName() {
		TypeAliasNameContext _localctx = new TypeAliasNameContext(Context, State);
		EnterRule(_localctx, 62, RULE_typeAliasName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 386; complexTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeAliasInheritContext : ParserRuleContext {
		public TypeAliasNameContext typeAliasName() {
			return GetRuleContext<TypeAliasNameContext>(0);
		}
		public TypeAliasInheritContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeAliasInherit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterTypeAliasInherit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitTypeAliasInherit(this);
		}
	}

	[RuleVersion(0)]
	public TypeAliasInheritContext typeAliasInherit() {
		TypeAliasInheritContext _localctx = new TypeAliasInheritContext(Context, State);
		EnterRule(_localctx, 64, RULE_typeAliasInherit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 388; Match(T__2);
			State = 389; typeAliasName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		public ValueDeclareStatementContext valueDeclareStatement() {
			return GetRuleContext<ValueDeclareStatementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 66, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 407;
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				{
				State = 393;
				switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
				case 1:
					{
					State = 391; expression(0);
					}
					break;
				case 2:
					{
					State = 392; assignmentExpression();
					}
					break;
				}
				State = 395; Match(T_SEMICOLON);
				}
				}
				break;
			case 2:
				{
				State = 397; blockStatement();
				}
				break;
			case 3:
				{
				State = 398; Match(T_SEMICOLON);
				}
				break;
			case 4:
				{
				State = 399; ifStatement();
				}
				break;
			case 5:
				{
				State = 400; whileStatement();
				}
				break;
			case 6:
				{
				State = 401; forStatement();
				}
				break;
			case 7:
				{
				State = 402; switchStatement();
				}
				break;
			case 8:
				{
				State = 403; returnStatement();
				}
				break;
			case 9:
				{
				State = 404; breakStatement();
				}
				break;
			case 10:
				{
				State = 405; continueStatement();
				}
				break;
			case 11:
				{
				State = 406; valueDeclareStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(Context, State);
		EnterRule(_localctx, 68, RULE_blockStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 409; Match(T_LEFT_CURLY);
			State = 413;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << StringLiteral) | (1L << T_THIS) | (1L << T_BASE) | (1L << T_VAR) | (1L << T_LET) | (1L << T_NEW) | (1L << T_IF) | (1L << T_WHILE) | (1L << T_FOR) | (1L << T_BREAK) | (1L << T_CONTINUE) | (1L << T_SWITCH) | (1L << T_RETURN) | (1L << T_LEFT_PAREN) | (1L << T_LEFT_BRACKET) | (1L << T_LEFT_CURLY) | (1L << INT) | (1L << HEX) | (1L << BINARY) | (1L << FLOAT) | (1L << T_FALSE) | (1L << T_TRUE) | (1L << T_NULL) | (1L << T_SEMICOLON) | (1L << T_NOT) | (1L << T_MINUS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T_INCREMENT - 64)) | (1L << (T_DECREMENT - 64)) | (1L << (IDENT - 64)))) != 0)) {
				{
				{
				State = 410; statement();
				}
				}
				State = 415;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 416; Match(T_RIGHT_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 70, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 418; Match(T_IF);
			State = 419; Match(T_LEFT_PAREN);
			State = 420; expression(0);
			State = 421; Match(T_RIGHT_PAREN);
			State = 422; statement();
			State = 424;
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				{
				State = 423; elseStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 72, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 426; Match(T_ELSE);
			State = 427; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		public SwitchBlockContext switchBlock() {
			return GetRuleContext<SwitchBlockContext>(0);
		}
		public ValueHolderDeclContext valueHolderDecl() {
			return GetRuleContext<ValueHolderDeclContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 74, RULE_switchStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 429; Match(T_SWITCH);
			State = 430; Match(T_LEFT_PAREN);
			State = 433;
			switch (TokenStream.La(1)) {
			case T_VAR:
			case T_LET:
				{
				State = 431; valueHolderDecl();
				}
				break;
			case StringLiteral:
			case T_THIS:
			case T_BASE:
			case T_NEW:
			case T_LEFT_PAREN:
			case T_LEFT_BRACKET:
			case T_LEFT_CURLY:
			case INT:
			case HEX:
			case BINARY:
			case FLOAT:
			case T_FALSE:
			case T_TRUE:
			case T_NULL:
			case T_NOT:
			case T_MINUS:
			case T_INCREMENT:
			case T_DECREMENT:
			case IDENT:
				{
				State = 432; expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 435; Match(T_RIGHT_PAREN);
			State = 436; switchBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBlockContext : ParserRuleContext {
		public CaseBlockContext[] caseBlock() {
			return GetRuleContexts<CaseBlockContext>();
		}
		public CaseBlockContext caseBlock(int i) {
			return GetRuleContext<CaseBlockContext>(i);
		}
		public DefaultBlockContext defaultBlock() {
			return GetRuleContext<DefaultBlockContext>(0);
		}
		public SwitchBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterSwitchBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitSwitchBlock(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBlockContext switchBlock() {
		SwitchBlockContext _localctx = new SwitchBlockContext(Context, State);
		EnterRule(_localctx, 76, RULE_switchBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 438; Match(T_LEFT_CURLY);
			State = 442;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T_CASE) {
				{
				{
				State = 439; caseBlock();
				}
				}
				State = 444;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 446;
			_la = TokenStream.La(1);
			if (_la==T_DEFAULT) {
				{
				State = 445; defaultBlock();
				}
			}

			State = 448; Match(T_RIGHT_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseBlockContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public CaseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterCaseBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitCaseBlock(this);
		}
	}

	[RuleVersion(0)]
	public CaseBlockContext caseBlock() {
		CaseBlockContext _localctx = new CaseBlockContext(Context, State);
		EnterRule(_localctx, 78, RULE_caseBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 450; Match(T_CASE);
			State = 451; expression(0);
			State = 452; Match(T_DOUBLE_COLON);
			State = 456;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << StringLiteral) | (1L << T_THIS) | (1L << T_BASE) | (1L << T_VAR) | (1L << T_LET) | (1L << T_NEW) | (1L << T_IF) | (1L << T_WHILE) | (1L << T_FOR) | (1L << T_BREAK) | (1L << T_CONTINUE) | (1L << T_SWITCH) | (1L << T_RETURN) | (1L << T_LEFT_PAREN) | (1L << T_LEFT_BRACKET) | (1L << T_LEFT_CURLY) | (1L << INT) | (1L << HEX) | (1L << BINARY) | (1L << FLOAT) | (1L << T_FALSE) | (1L << T_TRUE) | (1L << T_NULL) | (1L << T_SEMICOLON) | (1L << T_NOT) | (1L << T_MINUS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T_INCREMENT - 64)) | (1L << (T_DECREMENT - 64)) | (1L << (IDENT - 64)))) != 0)) {
				{
				{
				State = 453; statement();
				}
				}
				State = 458;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultBlockContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public DefaultBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterDefaultBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitDefaultBlock(this);
		}
	}

	[RuleVersion(0)]
	public DefaultBlockContext defaultBlock() {
		DefaultBlockContext _localctx = new DefaultBlockContext(Context, State);
		EnterRule(_localctx, 80, RULE_defaultBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 459; Match(T_DEFAULT);
			State = 460; Match(T_DOUBLE_COLON);
			State = 462;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 461; statement();
				}
				}
				State = 464;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << StringLiteral) | (1L << T_THIS) | (1L << T_BASE) | (1L << T_VAR) | (1L << T_LET) | (1L << T_NEW) | (1L << T_IF) | (1L << T_WHILE) | (1L << T_FOR) | (1L << T_BREAK) | (1L << T_CONTINUE) | (1L << T_SWITCH) | (1L << T_RETURN) | (1L << T_LEFT_PAREN) | (1L << T_LEFT_BRACKET) | (1L << T_LEFT_CURLY) | (1L << INT) | (1L << HEX) | (1L << BINARY) | (1L << FLOAT) | (1L << T_FALSE) | (1L << T_TRUE) | (1L << T_NULL) | (1L << T_SEMICOLON) | (1L << T_NOT) | (1L << T_MINUS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T_INCREMENT - 64)) | (1L << (T_DECREMENT - 64)) | (1L << (IDENT - 64)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 82, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 466; Match(T_WHILE);
			State = 467; Match(T_LEFT_PAREN);
			State = 468; expression(0);
			State = 469; Match(T_RIGHT_PAREN);
			State = 470; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ForInitContext forInit() {
			return GetRuleContext<ForInitContext>(0);
		}
		public ForConditionContext forCondition() {
			return GetRuleContext<ForConditionContext>(0);
		}
		public ForIncrementContext forIncrement() {
			return GetRuleContext<ForIncrementContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 84, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 472; Match(T_FOR);
			State = 473; Match(T_LEFT_PAREN);
			State = 475;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << StringLiteral) | (1L << T_THIS) | (1L << T_BASE) | (1L << T_VAR) | (1L << T_LET) | (1L << T_NEW) | (1L << T_LEFT_PAREN) | (1L << T_LEFT_BRACKET) | (1L << T_LEFT_CURLY) | (1L << INT) | (1L << HEX) | (1L << BINARY) | (1L << FLOAT) | (1L << T_FALSE) | (1L << T_TRUE) | (1L << T_NULL) | (1L << T_NOT) | (1L << T_MINUS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T_INCREMENT - 64)) | (1L << (T_DECREMENT - 64)) | (1L << (IDENT - 64)))) != 0)) {
				{
				State = 474; forInit();
				}
			}

			State = 477; Match(T_SEMICOLON);
			State = 479;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << StringLiteral) | (1L << T_THIS) | (1L << T_BASE) | (1L << T_NEW) | (1L << T_LEFT_PAREN) | (1L << T_LEFT_BRACKET) | (1L << T_LEFT_CURLY) | (1L << INT) | (1L << HEX) | (1L << BINARY) | (1L << FLOAT) | (1L << T_FALSE) | (1L << T_TRUE) | (1L << T_NULL) | (1L << T_NOT) | (1L << T_MINUS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T_INCREMENT - 64)) | (1L << (T_DECREMENT - 64)) | (1L << (IDENT - 64)))) != 0)) {
				{
				State = 478; forCondition();
				}
			}

			State = 481; Match(T_SEMICOLON);
			State = 483;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << StringLiteral) | (1L << T_THIS) | (1L << T_BASE) | (1L << T_NEW) | (1L << T_LEFT_PAREN) | (1L << T_LEFT_BRACKET) | (1L << T_LEFT_CURLY) | (1L << INT) | (1L << HEX) | (1L << BINARY) | (1L << FLOAT) | (1L << T_FALSE) | (1L << T_TRUE) | (1L << T_NULL) | (1L << T_NOT) | (1L << T_MINUS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T_INCREMENT - 64)) | (1L << (T_DECREMENT - 64)) | (1L << (IDENT - 64)))) != 0)) {
				{
				State = 482; forIncrement();
				}
			}

			State = 485; Match(T_RIGHT_PAREN);
			State = 486; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitContext : ParserRuleContext {
		public ValueHolderDeclContext valueHolderDecl() {
			return GetRuleContext<ValueHolderDeclContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ForInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterForInit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitForInit(this);
		}
	}

	[RuleVersion(0)]
	public ForInitContext forInit() {
		ForInitContext _localctx = new ForInitContext(Context, State);
		EnterRule(_localctx, 86, RULE_forInit);
		try {
			State = 491;
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 488; valueHolderDecl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 489; expression(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 490; assignmentExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForConditionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forCondition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterForCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitForCondition(this);
		}
	}

	[RuleVersion(0)]
	public ForConditionContext forCondition() {
		ForConditionContext _localctx = new ForConditionContext(Context, State);
		EnterRule(_localctx, 88, RULE_forCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 493; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForIncrementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForIncrementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forIncrement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterForIncrement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitForIncrement(this);
		}
	}

	[RuleVersion(0)]
	public ForIncrementContext forIncrement() {
		ForIncrementContext _localctx = new ForIncrementContext(Context, State);
		EnterRule(_localctx, 90, RULE_forIncrement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 495; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ExpressionContext value;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 92, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 497; Match(T_RETURN);
			State = 499;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << StringLiteral) | (1L << T_THIS) | (1L << T_BASE) | (1L << T_NEW) | (1L << T_LEFT_PAREN) | (1L << T_LEFT_BRACKET) | (1L << T_LEFT_CURLY) | (1L << INT) | (1L << HEX) | (1L << BINARY) | (1L << FLOAT) | (1L << T_FALSE) | (1L << T_TRUE) | (1L << T_NULL) | (1L << T_NOT) | (1L << T_MINUS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T_INCREMENT - 64)) | (1L << (T_DECREMENT - 64)) | (1L << (IDENT - 64)))) != 0)) {
				{
				State = 498; _localctx.value = expression(0);
				}
			}

			State = 501; Match(T_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 94, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 503; Match(T_BREAK);
			State = 504; Match(T_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 96, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 506; Match(T_CONTINUE);
			State = 507; Match(T_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueDeclareStatementContext : ParserRuleContext {
		public ValueHolderDeclContext valueHolderDecl() {
			return GetRuleContext<ValueHolderDeclContext>(0);
		}
		public ValueDeclareStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueDeclareStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterValueDeclareStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitValueDeclareStatement(this);
		}
	}

	[RuleVersion(0)]
	public ValueDeclareStatementContext valueDeclareStatement() {
		ValueDeclareStatementContext _localctx = new ValueDeclareStatementContext(Context, State);
		EnterRule(_localctx, 98, RULE_valueDeclareStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 509; valueHolderDecl();
			State = 510; Match(T_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueHolderDeclContext : ParserRuleContext {
		public IToken var;
		public IToken let;
		public ValueHolderNameContext valueHolderName() {
			return GetRuleContext<ValueHolderNameContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ValueHolderDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueHolderDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterValueHolderDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitValueHolderDecl(this);
		}
	}

	[RuleVersion(0)]
	public ValueHolderDeclContext valueHolderDecl() {
		ValueHolderDeclContext _localctx = new ValueHolderDeclContext(Context, State);
		EnterRule(_localctx, 100, RULE_valueHolderDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 514;
			switch (TokenStream.La(1)) {
			case T_VAR:
				{
				State = 512; _localctx.var = Match(T_VAR);
				}
				break;
			case T_LET:
				{
				State = 513; _localctx.let = Match(T_LET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 516; valueHolderName();
			State = 519;
			_la = TokenStream.La(1);
			if (_la==T_DOUBLE_COLON) {
				{
				State = 517; Match(T_DOUBLE_COLON);
				State = 518; type();
				}
			}

			State = 523;
			_la = TokenStream.La(1);
			if (_la==T_EQUALS) {
				{
				State = 521; Match(T_EQUALS);
				State = 522; expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueHolderNameContext : ParserRuleContext {
		public MemberNameContext memberName() {
			return GetRuleContext<MemberNameContext>(0);
		}
		public ValueHolderNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueHolderName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterValueHolderName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitValueHolderName(this);
		}
	}

	[RuleVersion(0)]
	public ValueHolderNameContext valueHolderName() {
		ValueHolderNameContext _localctx = new ValueHolderNameContext(Context, State);
		EnterRule(_localctx, 102, RULE_valueHolderName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 525; memberName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ObjectTypeContext objectType() {
			return GetRuleContext<ObjectTypeContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public CallableTypeContext callableType() {
			return GetRuleContext<CallableTypeContext>(0);
		}
		public ListTypeContext listType() {
			return GetRuleContext<ListTypeContext>(0);
		}
		public DictionaryTypeContext dictionaryType() {
			return GetRuleContext<DictionaryTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 104, RULE_type);
		try {
			State = 532;
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 527; objectType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 528; typeName();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 529; callableType();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 530; listType();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 531; dictionaryType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectTypeContext : ParserRuleContext {
		public ObjectTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterObjectType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitObjectType(this);
		}
	}

	[RuleVersion(0)]
	public ObjectTypeContext objectType() {
		ObjectTypeContext _localctx = new ObjectTypeContext(Context, State);
		EnterRule(_localctx, 106, RULE_objectType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 534; Match(T_OBJECT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public ComplexTypeNameContext complexTypeName() {
			return GetRuleContext<ComplexTypeNameContext>(0);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 108, RULE_typeName);
		try {
			State = 538;
			switch (TokenStream.La(1)) {
			case T_INT:
			case T_FLOAT:
			case T_VOID:
			case T_ANY:
			case T_STRING:
			case T_BOOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 536; primitiveType();
				}
				break;
			case IDENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 537; complexTypeName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexTypeNameContext : ParserRuleContext {
		public ITerminalNode[] IDENT() { return GetTokens(ZScriptParser.IDENT); }
		public ITerminalNode IDENT(int i) {
			return GetToken(ZScriptParser.IDENT, i);
		}
		public ComplexTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterComplexTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitComplexTypeName(this);
		}
	}

	[RuleVersion(0)]
	public ComplexTypeNameContext complexTypeName() {
		ComplexTypeNameContext _localctx = new ComplexTypeNameContext(Context, State);
		EnterRule(_localctx, 110, RULE_complexTypeName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 540; Match(IDENT);
			State = 545;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 541; Match(T_PERIOD);
					State = 542; Match(IDENT);
					}
					} 
				}
				State = 547;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public ITerminalNode T_INT() { return GetToken(ZScriptParser.T_INT, 0); }
		public ITerminalNode T_FLOAT() { return GetToken(ZScriptParser.T_FLOAT, 0); }
		public ITerminalNode T_VOID() { return GetToken(ZScriptParser.T_VOID, 0); }
		public ITerminalNode T_ANY() { return GetToken(ZScriptParser.T_ANY, 0); }
		public ITerminalNode T_STRING() { return GetToken(ZScriptParser.T_STRING, 0); }
		public ITerminalNode T_BOOL() { return GetToken(ZScriptParser.T_BOOL, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 112, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 548;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T_INT) | (1L << T_FLOAT) | (1L << T_VOID) | (1L << T_ANY) | (1L << T_STRING) | (1L << T_BOOL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallableTypeContext : ParserRuleContext {
		public CallableTypeListContext callableTypeList() {
			return GetRuleContext<CallableTypeListContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public CallableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callableType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterCallableType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitCallableType(this);
		}
	}

	[RuleVersion(0)]
	public CallableTypeContext callableType() {
		CallableTypeContext _localctx = new CallableTypeContext(Context, State);
		EnterRule(_localctx, 114, RULE_callableType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 550; Match(T_LEFT_PAREN);
			State = 552;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T_OBJECT) | (1L << T_LEFT_PAREN) | (1L << T_LEFT_BRACKET) | (1L << T_INT) | (1L << T_FLOAT) | (1L << T_VOID) | (1L << T_ANY) | (1L << T_STRING) | (1L << T_BOOL))) != 0) || _la==IDENT) {
				{
				State = 551; callableTypeList();
				}
			}

			State = 554; Match(T_CLOSURE_RETURN);
			State = 556;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T_OBJECT) | (1L << T_LEFT_PAREN) | (1L << T_LEFT_BRACKET) | (1L << T_INT) | (1L << T_FLOAT) | (1L << T_VOID) | (1L << T_ANY) | (1L << T_STRING) | (1L << T_BOOL))) != 0) || _la==IDENT) {
				{
				State = 555; type();
				}
			}

			State = 558; Match(T_RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListTypeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ListTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterListType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitListType(this);
		}
	}

	[RuleVersion(0)]
	public ListTypeContext listType() {
		ListTypeContext _localctx = new ListTypeContext(Context, State);
		EnterRule(_localctx, 116, RULE_listType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 560; Match(T_LEFT_BRACKET);
			State = 561; type();
			State = 562; Match(T_RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictionaryTypeContext : ParserRuleContext {
		public TypeContext keyType;
		public TypeContext valueType;
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public DictionaryTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionaryType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterDictionaryType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitDictionaryType(this);
		}
	}

	[RuleVersion(0)]
	public DictionaryTypeContext dictionaryType() {
		DictionaryTypeContext _localctx = new DictionaryTypeContext(Context, State);
		EnterRule(_localctx, 118, RULE_dictionaryType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 564; Match(T_LEFT_BRACKET);
			State = 565; _localctx.keyType = type();
			State = 566; Match(T_DOUBLE_COLON);
			State = 567; _localctx.valueType = type();
			State = 568; Match(T_RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallableTypeListContext : ParserRuleContext {
		public CallableArgTypeContext[] callableArgType() {
			return GetRuleContexts<CallableArgTypeContext>();
		}
		public CallableArgTypeContext callableArgType(int i) {
			return GetRuleContext<CallableArgTypeContext>(i);
		}
		public CallableTypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callableTypeList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterCallableTypeList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitCallableTypeList(this);
		}
	}

	[RuleVersion(0)]
	public CallableTypeListContext callableTypeList() {
		CallableTypeListContext _localctx = new CallableTypeListContext(Context, State);
		EnterRule(_localctx, 120, RULE_callableTypeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 570; callableArgType();
			State = 575;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T_COMMA) {
				{
				{
				State = 571; Match(T_COMMA);
				State = 572; callableArgType();
				}
				}
				State = 577;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallableArgTypeContext : ParserRuleContext {
		public IToken variadic;
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public CallableArgTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callableArgType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterCallableArgType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitCallableArgType(this);
		}
	}

	[RuleVersion(0)]
	public CallableArgTypeContext callableArgType() {
		CallableArgTypeContext _localctx = new CallableArgTypeContext(Context, State);
		EnterRule(_localctx, 122, RULE_callableArgType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 578; type();
			State = 580;
			_la = TokenStream.La(1);
			if (_la==T_TRIPPLE_DOT) {
				{
				State = 579; _localctx.variadic = Match(T_TRIPPLE_DOT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public UnaryOperatorContext unaryOperator() {
			return GetRuleContext<UnaryOperatorContext>(0);
		}
		public ValueAccessContext valueAccess() {
			return GetRuleContext<ValueAccessContext>(0);
		}
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ITerminalNode T_THIS() { return GetToken(ZScriptParser.T_THIS, 0); }
		public ObjectAccessContext objectAccess() {
			return GetRuleContext<ObjectAccessContext>(0);
		}
		public ITerminalNode T_BASE() { return GetToken(ZScriptParser.T_BASE, 0); }
		public PrefixOperatorContext prefixOperator() {
			return GetRuleContext<PrefixOperatorContext>(0);
		}
		public LeftValueContext leftValue() {
			return GetRuleContext<LeftValueContext>(0);
		}
		public PostfixOperatorContext postfixOperator() {
			return GetRuleContext<PostfixOperatorContext>(0);
		}
		public ClosureExpressionContext closureExpression() {
			return GetRuleContext<ClosureExpressionContext>(0);
		}
		public MemberNameContext memberName() {
			return GetRuleContext<MemberNameContext>(0);
		}
		public ObjectLiteralContext objectLiteral() {
			return GetRuleContext<ObjectLiteralContext>(0);
		}
		public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		public DictionaryLiteralContext dictionaryLiteral() {
			return GetRuleContext<DictionaryLiteralContext>(0);
		}
		public NewExpressionContext newExpression() {
			return GetRuleContext<NewExpressionContext>(0);
		}
		public ConstantAtomContext constantAtom() {
			return GetRuleContext<ConstantAtomContext>(0);
		}
		public MultOpContext multOp() {
			return GetRuleContext<MultOpContext>(0);
		}
		public AdditionOpContext additionOp() {
			return GetRuleContext<AdditionOpContext>(0);
		}
		public RelationalOpContext relationalOp() {
			return GetRuleContext<RelationalOpContext>(0);
		}
		public BitwiseShiftContext bitwiseShift() {
			return GetRuleContext<BitwiseShiftContext>(0);
		}
		public BitwiseAndOpContext bitwiseAndOp() {
			return GetRuleContext<BitwiseAndOpContext>(0);
		}
		public BitwiseXOrOpContext bitwiseXOrOp() {
			return GetRuleContext<BitwiseXOrOpContext>(0);
		}
		public BitwiseOrOpContext bitwiseOrOp() {
			return GetRuleContext<BitwiseOrOpContext>(0);
		}
		public EqualityOpContext equalityOp() {
			return GetRuleContext<EqualityOpContext>(0);
		}
		public LogicalAndContext logicalAnd() {
			return GetRuleContext<LogicalAndContext>(0);
		}
		public LogicalOrContext logicalOr() {
			return GetRuleContext<LogicalOrContext>(0);
		}
		public ITerminalNode T_IS() { return GetToken(ZScriptParser.T_IS, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 124;
		EnterRecursionRule(_localctx, 124, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 643;
			switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
			case 1:
				{
				State = 583; Match(T_LEFT_PAREN);
				State = 584; type();
				State = 585; Match(T_RIGHT_PAREN);
				State = 586; expression(15);
				}
				break;
			case 2:
				{
				State = 588; unaryOperator();
				State = 589; expression(14);
				}
				break;
			case 3:
				{
				State = 591; Match(T_LEFT_PAREN);
				State = 592; expression(0);
				State = 593; Match(T_RIGHT_PAREN);
				State = 595;
				switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
				case 1:
					{
					State = 594; valueAccess();
					}
					break;
				}
				}
				break;
			case 4:
				{
				State = 597; Match(T_LEFT_PAREN);
				State = 598; assignmentExpression();
				State = 599; Match(T_RIGHT_PAREN);
				}
				break;
			case 5:
				{
				State = 601; Match(T_THIS);
				State = 603;
				switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
				case 1:
					{
					State = 602; objectAccess();
					}
					break;
				}
				}
				break;
			case 6:
				{
				State = 605; Match(T_BASE);
				State = 607;
				switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
				case 1:
					{
					State = 606; valueAccess();
					}
					break;
				}
				}
				break;
			case 7:
				{
				State = 609; prefixOperator();
				State = 610; leftValue();
				}
				break;
			case 8:
				{
				State = 612; leftValue();
				State = 613; postfixOperator();
				}
				break;
			case 9:
				{
				State = 615; closureExpression();
				State = 617;
				switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
				case 1:
					{
					State = 616; valueAccess();
					}
					break;
				}
				}
				break;
			case 10:
				{
				State = 619; memberName();
				State = 621;
				switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
				case 1:
					{
					State = 620; valueAccess();
					}
					break;
				}
				}
				break;
			case 11:
				{
				State = 623; objectLiteral();
				State = 625;
				switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
				case 1:
					{
					State = 624; objectAccess();
					}
					break;
				}
				}
				break;
			case 12:
				{
				State = 627; arrayLiteral();
				State = 629;
				switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
				case 1:
					{
					State = 628; valueAccess();
					}
					break;
				}
				}
				break;
			case 13:
				{
				State = 631; dictionaryLiteral();
				State = 633;
				switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
				case 1:
					{
					State = 632; valueAccess();
					}
					break;
				}
				}
				break;
			case 14:
				{
				State = 635; newExpression();
				State = 637;
				switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
				case 1:
					{
					State = 636; valueAccess();
					}
					break;
				}
				}
				break;
			case 15:
				{
				State = 639; constantAtom();
				State = 641;
				switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
				case 1:
					{
					State = 640; objectAccess();
					}
					break;
				}
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 696;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 694;
					switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 645;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 646; multOp();
						State = 647; expression(14);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 649;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 650; additionOp();
						State = 651; expression(13);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 653;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 654; relationalOp();
						State = 655; expression(12);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 657;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 658; bitwiseShift();
						State = 659; expression(10);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 661;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 662; bitwiseAndOp();
						State = 663; expression(9);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 665;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 666; bitwiseXOrOp();
						State = 667; expression(8);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 669;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 670; bitwiseOrOp();
						State = 671; expression(7);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 673;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 674; equalityOp();
						State = 675; expression(6);
						}
						break;
					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 677;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 678; logicalAnd();
						State = 679; expression(5);
						}
						break;
					case 10:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 681;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 682; logicalOr();
						State = 683; expression(4);
						}
						break;
					case 11:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 685;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 686; Match(T__3);
						State = 687; expression(0);
						State = 688; Match(T_DOUBLE_COLON);
						State = 689; expression(2);
						}
						break;
					case 12:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 691;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 692; Match(T_IS);
						State = 693; type();
						}
						break;
					}
					} 
				}
				State = 698;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultOpContext : ParserRuleContext {
		public MultOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterMultOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitMultOp(this);
		}
	}

	[RuleVersion(0)]
	public MultOpContext multOp() {
		MultOpContext _localctx = new MultOpContext(Context, State);
		EnterRule(_localctx, 126, RULE_multOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 699;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T_MULT) | (1L << T_DIV) | (1L << T_MOD))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditionOpContext : ParserRuleContext {
		public AdditionOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additionOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterAdditionOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitAdditionOp(this);
		}
	}

	[RuleVersion(0)]
	public AdditionOpContext additionOp() {
		AdditionOpContext _localctx = new AdditionOpContext(Context, State);
		EnterRule(_localctx, 128, RULE_additionOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 701;
			_la = TokenStream.La(1);
			if ( !(_la==T_PLUS || _la==T_MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitwiseShiftContext : ParserRuleContext {
		public ITerminalNode T_SHIFTLEFT() { return GetToken(ZScriptParser.T_SHIFTLEFT, 0); }
		public ITerminalNode T_SHIFTRIGHT() { return GetToken(ZScriptParser.T_SHIFTRIGHT, 0); }
		public BitwiseShiftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwiseShift; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterBitwiseShift(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitBitwiseShift(this);
		}
	}

	[RuleVersion(0)]
	public BitwiseShiftContext bitwiseShift() {
		BitwiseShiftContext _localctx = new BitwiseShiftContext(Context, State);
		EnterRule(_localctx, 130, RULE_bitwiseShift);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 703;
			_la = TokenStream.La(1);
			if ( !(_la==T_SHIFTLEFT || _la==T_SHIFTRIGHT) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitwiseAndOpContext : ParserRuleContext {
		public BitwiseAndOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwiseAndOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterBitwiseAndOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitBitwiseAndOp(this);
		}
	}

	[RuleVersion(0)]
	public BitwiseAndOpContext bitwiseAndOp() {
		BitwiseAndOpContext _localctx = new BitwiseAndOpContext(Context, State);
		EnterRule(_localctx, 132, RULE_bitwiseAndOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 705;
			_la = TokenStream.La(1);
			if ( !(_la==T_BITWISE_AND || _la==T_BITWISE_XOR) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitwiseXOrOpContext : ParserRuleContext {
		public BitwiseXOrOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwiseXOrOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterBitwiseXOrOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitBitwiseXOrOp(this);
		}
	}

	[RuleVersion(0)]
	public BitwiseXOrOpContext bitwiseXOrOp() {
		BitwiseXOrOpContext _localctx = new BitwiseXOrOpContext(Context, State);
		EnterRule(_localctx, 134, RULE_bitwiseXOrOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 707; Match(T_BITWISE_XOR);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitwiseOrOpContext : ParserRuleContext {
		public BitwiseOrOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwiseOrOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterBitwiseOrOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitBitwiseOrOp(this);
		}
	}

	[RuleVersion(0)]
	public BitwiseOrOpContext bitwiseOrOp() {
		BitwiseOrOpContext _localctx = new BitwiseOrOpContext(Context, State);
		EnterRule(_localctx, 136, RULE_bitwiseOrOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 709; Match(T_BITWISE_OR);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalOpContext : ParserRuleContext {
		public RelationalOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterRelationalOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitRelationalOp(this);
		}
	}

	[RuleVersion(0)]
	public RelationalOpContext relationalOp() {
		RelationalOpContext _localctx = new RelationalOpContext(Context, State);
		EnterRule(_localctx, 138, RULE_relationalOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 711;
			_la = TokenStream.La(1);
			if ( !(((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (T_MORE_THAN_OR_EQUALS - 73)) | (1L << (T_LESS_THAN_OR_EQUALS - 73)) | (1L << (T_MORE_THAN - 73)) | (1L << (T_LESS_THAN - 73)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityOpContext : ParserRuleContext {
		public EqualityOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterEqualityOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitEqualityOp(this);
		}
	}

	[RuleVersion(0)]
	public EqualityOpContext equalityOp() {
		EqualityOpContext _localctx = new EqualityOpContext(Context, State);
		EnterRule(_localctx, 140, RULE_equalityOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 713;
			_la = TokenStream.La(1);
			if ( !(_la==T_EQUALITY || _la==T_UNEQUALITY) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalAndContext : ParserRuleContext {
		public LogicalAndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalAnd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterLogicalAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitLogicalAnd(this);
		}
	}

	[RuleVersion(0)]
	public LogicalAndContext logicalAnd() {
		LogicalAndContext _localctx = new LogicalAndContext(Context, State);
		EnterRule(_localctx, 142, RULE_logicalAnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 715; Match(T_LOGICAL_AND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOrContext : ParserRuleContext {
		public LogicalOrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterLogicalOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitLogicalOr(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOrContext logicalOr() {
		LogicalOrContext _localctx = new LogicalOrContext(Context, State);
		EnterRule(_localctx, 144, RULE_logicalOr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 717; Match(T_LOGICAL_OR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		public LeftValueContext leftValue() {
			return GetRuleContext<LeftValueContext>(0);
		}
		public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 146, RULE_assignmentExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 719; leftValue();
			State = 720; assignmentOperator();
			State = 723;
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				{
				State = 721; expression(0);
				}
				break;
			case 2:
				{
				State = 722; assignmentExpression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewExpressionContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public FuncCallArgumentsContext funcCallArguments() {
			return GetRuleContext<FuncCallArgumentsContext>(0);
		}
		public NewExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterNewExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitNewExpression(this);
		}
	}

	[RuleVersion(0)]
	public NewExpressionContext newExpression() {
		NewExpressionContext _localctx = new NewExpressionContext(Context, State);
		EnterRule(_localctx, 148, RULE_newExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 725; Match(T_NEW);
			State = 726; typeName();
			State = 727; funcCallArguments();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClosureExpressionContext : ParserRuleContext {
		public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public FunctionArgContext functionArg() {
			return GetRuleContext<FunctionArgContext>(0);
		}
		public FunctionArgumentsContext functionArguments() {
			return GetRuleContext<FunctionArgumentsContext>(0);
		}
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public ClosureExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closureExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterClosureExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitClosureExpression(this);
		}
	}

	[RuleVersion(0)]
	public ClosureExpressionContext closureExpression() {
		ClosureExpressionContext _localctx = new ClosureExpressionContext(Context, State);
		EnterRule(_localctx, 150, RULE_closureExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 731;
			switch (TokenStream.La(1)) {
			case IDENT:
				{
				State = 729; functionArg();
				}
				break;
			case T_LEFT_PAREN:
				{
				State = 730; functionArguments();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 734;
			_la = TokenStream.La(1);
			if (_la==T_DOUBLE_COLON) {
				{
				State = 733; returnType();
				}
			}

			State = 736; Match(T_CLOSURE_CALL);
			State = 737; functionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefixOperatorContext : ParserRuleContext {
		public PrefixOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterPrefixOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitPrefixOperator(this);
		}
	}

	[RuleVersion(0)]
	public PrefixOperatorContext prefixOperator() {
		PrefixOperatorContext _localctx = new PrefixOperatorContext(Context, State);
		EnterRule(_localctx, 152, RULE_prefixOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 739;
			_la = TokenStream.La(1);
			if ( !(_la==T_INCREMENT || _la==T_DECREMENT) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixOperatorContext : ParserRuleContext {
		public PostfixOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterPostfixOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitPostfixOperator(this);
		}
	}

	[RuleVersion(0)]
	public PostfixOperatorContext postfixOperator() {
		PostfixOperatorContext _localctx = new PostfixOperatorContext(Context, State);
		EnterRule(_localctx, 154, RULE_postfixOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 741;
			_la = TokenStream.La(1);
			if ( !(_la==T_INCREMENT || _la==T_DECREMENT) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOperatorContext : ParserRuleContext {
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterUnaryOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitUnaryOperator(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOperatorContext unaryOperator() {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(Context, State);
		EnterRule(_localctx, 156, RULE_unaryOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 743;
			_la = TokenStream.La(1);
			if ( !(_la==T_NOT || _la==T_MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterAssignmentOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitAssignmentOperator(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 158, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 745;
			_la = TokenStream.La(1);
			if ( !(((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (T_EQUALS - 79)) | (1L << (T_PLUS_EQUALS - 79)) | (1L << (T_MINUS_EQUALS - 79)) | (1L << (T_TIMES_EQUALS - 79)) | (1L << (T_DIV_EQUALS - 79)) | (1L << (T_MOD_EQUALS - 79)) | (1L << (T_XOR_EQUALS - 79)) | (1L << (T_AND_EQUALS - 79)) | (1L << (T_TILDE_EQUALS - 79)) | (1L << (T_OR_EQUALS - 79)) | (1L << (T_SHIFTLEFT_EQUALS - 79)) | (1L << (T_SHIFTRIGHT_EQUALS - 79)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncCallArgumentsContext : ParserRuleContext {
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public FuncCallArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcCallArguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFuncCallArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFuncCallArguments(this);
		}
	}

	[RuleVersion(0)]
	public FuncCallArgumentsContext funcCallArguments() {
		FuncCallArgumentsContext _localctx = new FuncCallArgumentsContext(Context, State);
		EnterRule(_localctx, 160, RULE_funcCallArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 747; Match(T_LEFT_PAREN);
			State = 749;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << StringLiteral) | (1L << T_THIS) | (1L << T_BASE) | (1L << T_NEW) | (1L << T_LEFT_PAREN) | (1L << T_LEFT_BRACKET) | (1L << T_LEFT_CURLY) | (1L << INT) | (1L << HEX) | (1L << BINARY) | (1L << FLOAT) | (1L << T_FALSE) | (1L << T_TRUE) | (1L << T_NULL) | (1L << T_NOT) | (1L << T_MINUS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T_INCREMENT - 64)) | (1L << (T_DECREMENT - 64)) | (1L << (IDENT - 64)))) != 0)) {
				{
				State = 748; expressionList();
				}
			}

			State = 751; Match(T_RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 162, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 753; expression(0);
			State = 758;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T_COMMA) {
				{
				{
				State = 754; Match(T_COMMA);
				State = 755; expression(0);
				}
				}
				State = 760;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeftValueContext : ParserRuleContext {
		public MemberNameContext memberName() {
			return GetRuleContext<MemberNameContext>(0);
		}
		public LeftValueAccessContext leftValueAccess() {
			return GetRuleContext<LeftValueAccessContext>(0);
		}
		public LeftValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leftValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterLeftValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitLeftValue(this);
		}
	}

	[RuleVersion(0)]
	public LeftValueContext leftValue() {
		LeftValueContext _localctx = new LeftValueContext(Context, State);
		EnterRule(_localctx, 164, RULE_leftValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 763;
			switch (TokenStream.La(1)) {
			case IDENT:
				{
				State = 761; memberName();
				}
				break;
			case T_THIS:
				{
				State = 762; Match(T_THIS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 766;
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				{
				State = 765; leftValueAccess();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeftValueAccessContext : ParserRuleContext {
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public LeftValueAccessContext leftValueAccess() {
			return GetRuleContext<LeftValueAccessContext>(0);
		}
		public FieldAccessContext fieldAccess() {
			return GetRuleContext<FieldAccessContext>(0);
		}
		public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		public LeftValueAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leftValueAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterLeftValueAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitLeftValueAccess(this);
		}
	}

	[RuleVersion(0)]
	public LeftValueAccessContext leftValueAccess() {
		LeftValueAccessContext _localctx = new LeftValueAccessContext(Context, State);
		EnterRule(_localctx, 166, RULE_leftValueAccess);
		try {
			State = 779;
			switch (TokenStream.La(1)) {
			case T_LEFT_PAREN:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 768; functionCall();
				State = 769; leftValueAccess();
				}
				}
				break;
			case T_PERIOD:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 771; fieldAccess();
				State = 773;
				switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
				case 1:
					{
					State = 772; leftValueAccess();
					}
					break;
				}
				}
				}
				break;
			case T_LEFT_BRACKET:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 775; arrayAccess();
				State = 777;
				switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
				case 1:
					{
					State = 776; leftValueAccess();
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public FuncCallArgumentsContext funcCallArguments() {
			return GetRuleContext<FuncCallArgumentsContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 168, RULE_functionCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 781; funcCallArguments();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldAccessContext : ParserRuleContext {
		public MemberNameContext memberName() {
			return GetRuleContext<MemberNameContext>(0);
		}
		public FieldAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterFieldAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitFieldAccess(this);
		}
	}

	[RuleVersion(0)]
	public FieldAccessContext fieldAccess() {
		FieldAccessContext _localctx = new FieldAccessContext(Context, State);
		EnterRule(_localctx, 170, RULE_fieldAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 783; Match(T_PERIOD);
			State = 784; memberName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAccessContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrayAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterArrayAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitArrayAccess(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccessContext arrayAccess() {
		ArrayAccessContext _localctx = new ArrayAccessContext(Context, State);
		EnterRule(_localctx, 172, RULE_arrayAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 786; Match(T_LEFT_BRACKET);
			State = 787; expression(0);
			State = 788; Match(T_RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectAccessContext : ParserRuleContext {
		public FieldAccessContext fieldAccess() {
			return GetRuleContext<FieldAccessContext>(0);
		}
		public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		public ValueAccessContext valueAccess() {
			return GetRuleContext<ValueAccessContext>(0);
		}
		public ObjectAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterObjectAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitObjectAccess(this);
		}
	}

	[RuleVersion(0)]
	public ObjectAccessContext objectAccess() {
		ObjectAccessContext _localctx = new ObjectAccessContext(Context, State);
		EnterRule(_localctx, 174, RULE_objectAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 792;
			switch (TokenStream.La(1)) {
			case T_PERIOD:
				{
				State = 790; fieldAccess();
				}
				break;
			case T_LEFT_BRACKET:
				{
				State = 791; arrayAccess();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 795;
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				{
				State = 794; valueAccess();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueAccessContext : ParserRuleContext {
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FieldAccessContext fieldAccess() {
			return GetRuleContext<FieldAccessContext>(0);
		}
		public ArrayAccessContext arrayAccess() {
			return GetRuleContext<ArrayAccessContext>(0);
		}
		public ValueAccessContext valueAccess() {
			return GetRuleContext<ValueAccessContext>(0);
		}
		public ValueAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterValueAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitValueAccess(this);
		}
	}

	[RuleVersion(0)]
	public ValueAccessContext valueAccess() {
		ValueAccessContext _localctx = new ValueAccessContext(Context, State);
		EnterRule(_localctx, 176, RULE_valueAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 800;
			switch (TokenStream.La(1)) {
			case T_LEFT_PAREN:
				{
				State = 797; functionCall();
				}
				break;
			case T_PERIOD:
				{
				State = 798; fieldAccess();
				}
				break;
			case T_LEFT_BRACKET:
				{
				State = 799; arrayAccess();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 803;
			switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
			case 1:
				{
				State = 802; valueAccess();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberNameContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(ZScriptParser.IDENT, 0); }
		public MemberNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterMemberName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitMemberName(this);
		}
	}

	[RuleVersion(0)]
	public MemberNameContext memberName() {
		MemberNameContext _localctx = new MemberNameContext(Context, State);
		EnterRule(_localctx, 178, RULE_memberName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 805; Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayLiteralContext : ParserRuleContext {
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ArrayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterArrayLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitArrayLiteral(this);
		}
	}

	[RuleVersion(0)]
	public ArrayLiteralContext arrayLiteral() {
		ArrayLiteralContext _localctx = new ArrayLiteralContext(Context, State);
		EnterRule(_localctx, 180, RULE_arrayLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 807; Match(T_LEFT_BRACKET);
			State = 809;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << StringLiteral) | (1L << T_THIS) | (1L << T_BASE) | (1L << T_NEW) | (1L << T_LEFT_PAREN) | (1L << T_LEFT_BRACKET) | (1L << T_LEFT_CURLY) | (1L << INT) | (1L << HEX) | (1L << BINARY) | (1L << FLOAT) | (1L << T_FALSE) | (1L << T_TRUE) | (1L << T_NULL) | (1L << T_NOT) | (1L << T_MINUS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T_INCREMENT - 64)) | (1L << (T_DECREMENT - 64)) | (1L << (IDENT - 64)))) != 0)) {
				{
				State = 808; expressionList();
				}
			}

			State = 811; Match(T_RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictionaryLiteralContext : ParserRuleContext {
		public DictionaryEntryListContext dictionaryEntryList() {
			return GetRuleContext<DictionaryEntryListContext>(0);
		}
		public DictionaryLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionaryLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterDictionaryLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitDictionaryLiteral(this);
		}
	}

	[RuleVersion(0)]
	public DictionaryLiteralContext dictionaryLiteral() {
		DictionaryLiteralContext _localctx = new DictionaryLiteralContext(Context, State);
		EnterRule(_localctx, 182, RULE_dictionaryLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 813; Match(T_LEFT_BRACKET);
			State = 814; dictionaryEntryList();
			State = 815; Match(T_RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectLiteralContext : ParserRuleContext {
		public ObjectEntryListContext objectEntryList() {
			return GetRuleContext<ObjectEntryListContext>(0);
		}
		public ObjectLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterObjectLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitObjectLiteral(this);
		}
	}

	[RuleVersion(0)]
	public ObjectLiteralContext objectLiteral() {
		ObjectLiteralContext _localctx = new ObjectLiteralContext(Context, State);
		EnterRule(_localctx, 184, RULE_objectLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 817; Match(T_LEFT_CURLY);
			State = 819;
			_la = TokenStream.La(1);
			if (_la==StringLiteral || _la==IDENT) {
				{
				State = 818; objectEntryList();
				}
			}

			State = 821; Match(T_RIGHT_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		public ITerminalNode StringLiteral() { return GetToken(ZScriptParser.StringLiteral, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 186, RULE_stringLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 823; Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictionaryEntryListContext : ParserRuleContext {
		public DictionaryEntryContext[] dictionaryEntry() {
			return GetRuleContexts<DictionaryEntryContext>();
		}
		public DictionaryEntryContext dictionaryEntry(int i) {
			return GetRuleContext<DictionaryEntryContext>(i);
		}
		public DictionaryEntryListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionaryEntryList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterDictionaryEntryList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitDictionaryEntryList(this);
		}
	}

	[RuleVersion(0)]
	public DictionaryEntryListContext dictionaryEntryList() {
		DictionaryEntryListContext _localctx = new DictionaryEntryListContext(Context, State);
		EnterRule(_localctx, 188, RULE_dictionaryEntryList);
		int _la;
		try {
			State = 834;
			switch (TokenStream.La(1)) {
			case T_DOUBLE_COLON:
				EnterOuterAlt(_localctx, 1);
				{
				State = 825; Match(T_DOUBLE_COLON);
				}
				break;
			case StringLiteral:
			case T_THIS:
			case T_BASE:
			case T_NEW:
			case T_LEFT_PAREN:
			case T_LEFT_BRACKET:
			case T_LEFT_CURLY:
			case INT:
			case HEX:
			case BINARY:
			case FLOAT:
			case T_FALSE:
			case T_TRUE:
			case T_NULL:
			case T_NOT:
			case T_MINUS:
			case T_INCREMENT:
			case T_DECREMENT:
			case IDENT:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 826; dictionaryEntry();
				State = 831;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==T_COMMA) {
					{
					{
					State = 827; Match(T_COMMA);
					State = 828; dictionaryEntry();
					}
					}
					State = 833;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictionaryEntryContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DictionaryEntryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionaryEntry; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterDictionaryEntry(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitDictionaryEntry(this);
		}
	}

	[RuleVersion(0)]
	public DictionaryEntryContext dictionaryEntry() {
		DictionaryEntryContext _localctx = new DictionaryEntryContext(Context, State);
		EnterRule(_localctx, 190, RULE_dictionaryEntry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 836; expression(0);
			State = 837; Match(T_DOUBLE_COLON);
			State = 838; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectEntryListContext : ParserRuleContext {
		public ObjectEntryDefinitionContext[] objectEntryDefinition() {
			return GetRuleContexts<ObjectEntryDefinitionContext>();
		}
		public ObjectEntryDefinitionContext objectEntryDefinition(int i) {
			return GetRuleContext<ObjectEntryDefinitionContext>(i);
		}
		public ObjectEntryListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectEntryList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterObjectEntryList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitObjectEntryList(this);
		}
	}

	[RuleVersion(0)]
	public ObjectEntryListContext objectEntryList() {
		ObjectEntryListContext _localctx = new ObjectEntryListContext(Context, State);
		EnterRule(_localctx, 192, RULE_objectEntryList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 840; objectEntryDefinition();
			State = 845;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T_COMMA) {
				{
				{
				State = 841; Match(T_COMMA);
				State = 842; objectEntryDefinition();
				}
				}
				State = 847;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectEntryDefinitionContext : ParserRuleContext {
		public EntryNameContext entryName() {
			return GetRuleContext<EntryNameContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ObjectEntryDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectEntryDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterObjectEntryDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitObjectEntryDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ObjectEntryDefinitionContext objectEntryDefinition() {
		ObjectEntryDefinitionContext _localctx = new ObjectEntryDefinitionContext(Context, State);
		EnterRule(_localctx, 194, RULE_objectEntryDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 848; entryName();
			State = 849; Match(T_DOUBLE_COLON);
			State = 850; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntryNameContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(ZScriptParser.IDENT, 0); }
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public EntryNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entryName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterEntryName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitEntryName(this);
		}
	}

	[RuleVersion(0)]
	public EntryNameContext entryName() {
		EntryNameContext _localctx = new EntryNameContext(Context, State);
		EnterRule(_localctx, 196, RULE_entryName);
		try {
			State = 854;
			switch (TokenStream.La(1)) {
			case IDENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 852; Match(IDENT);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 853; stringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompileConstantContext : ParserRuleContext {
		public NumericAtomContext numericAtom() {
			return GetRuleContext<NumericAtomContext>(0);
		}
		public ITerminalNode T_FALSE() { return GetToken(ZScriptParser.T_FALSE, 0); }
		public ITerminalNode T_TRUE() { return GetToken(ZScriptParser.T_TRUE, 0); }
		public ITerminalNode T_NULL() { return GetToken(ZScriptParser.T_NULL, 0); }
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public CompileConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileConstant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterCompileConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitCompileConstant(this);
		}
	}

	[RuleVersion(0)]
	public CompileConstantContext compileConstant() {
		CompileConstantContext _localctx = new CompileConstantContext(Context, State);
		EnterRule(_localctx, 198, RULE_compileConstant);
		int _la;
		try {
			State = 864;
			switch (TokenStream.La(1)) {
			case INT:
			case HEX:
			case BINARY:
			case FLOAT:
			case T_MINUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 857;
				_la = TokenStream.La(1);
				if (_la==T_MINUS) {
					{
					State = 856; Match(T_MINUS);
					}
				}

				State = 859; numericAtom();
				}
				break;
			case T_FALSE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 860; Match(T_FALSE);
				}
				break;
			case T_TRUE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 861; Match(T_TRUE);
				}
				break;
			case T_NULL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 862; Match(T_NULL);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 5);
				{
				State = 863; stringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantAtomContext : ParserRuleContext {
		public NumericAtomContext numericAtom() {
			return GetRuleContext<NumericAtomContext>(0);
		}
		public ITerminalNode T_FALSE() { return GetToken(ZScriptParser.T_FALSE, 0); }
		public ITerminalNode T_TRUE() { return GetToken(ZScriptParser.T_TRUE, 0); }
		public ITerminalNode T_NULL() { return GetToken(ZScriptParser.T_NULL, 0); }
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public ConstantAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantAtom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterConstantAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitConstantAtom(this);
		}
	}

	[RuleVersion(0)]
	public ConstantAtomContext constantAtom() {
		ConstantAtomContext _localctx = new ConstantAtomContext(Context, State);
		EnterRule(_localctx, 200, RULE_constantAtom);
		try {
			State = 871;
			switch (TokenStream.La(1)) {
			case INT:
			case HEX:
			case BINARY:
			case FLOAT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 866; numericAtom();
				}
				break;
			case T_FALSE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 867; Match(T_FALSE);
				}
				break;
			case T_TRUE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 868; Match(T_TRUE);
				}
				break;
			case T_NULL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 869; Match(T_NULL);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 5);
				{
				State = 870; stringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericAtomContext : ParserRuleContext {
		public HexadecimalNumberContext hexadecimalNumber() {
			return GetRuleContext<HexadecimalNumberContext>(0);
		}
		public BinaryNumberContext binaryNumber() {
			return GetRuleContext<BinaryNumberContext>(0);
		}
		public ITerminalNode FLOAT() { return GetToken(ZScriptParser.FLOAT, 0); }
		public ITerminalNode INT() { return GetToken(ZScriptParser.INT, 0); }
		public NumericAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericAtom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterNumericAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitNumericAtom(this);
		}
	}

	[RuleVersion(0)]
	public NumericAtomContext numericAtom() {
		NumericAtomContext _localctx = new NumericAtomContext(Context, State);
		EnterRule(_localctx, 202, RULE_numericAtom);
		int _la;
		try {
			State = 876;
			switch (TokenStream.La(1)) {
			case HEX:
				EnterOuterAlt(_localctx, 1);
				{
				State = 873; hexadecimalNumber();
				}
				break;
			case BINARY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 874; binaryNumber();
				}
				break;
			case INT:
			case FLOAT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 875;
				_la = TokenStream.La(1);
				if ( !(_la==INT || _la==FLOAT) ) {
				ErrorHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HexadecimalNumberContext : ParserRuleContext {
		public ITerminalNode HEX() { return GetToken(ZScriptParser.HEX, 0); }
		public HexadecimalNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hexadecimalNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterHexadecimalNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitHexadecimalNumber(this);
		}
	}

	[RuleVersion(0)]
	public HexadecimalNumberContext hexadecimalNumber() {
		HexadecimalNumberContext _localctx = new HexadecimalNumberContext(Context, State);
		EnterRule(_localctx, 204, RULE_hexadecimalNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 878; Match(HEX);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryNumberContext : ParserRuleContext {
		public ITerminalNode BINARY() { return GetToken(ZScriptParser.BINARY, 0); }
		public BinaryNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.EnterBinaryNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IZScriptListener typedListener = listener as IZScriptListener;
			if (typedListener != null) typedListener.ExitBinaryNumber(this);
		}
	}

	[RuleVersion(0)]
	public BinaryNumberContext binaryNumber() {
		BinaryNumberContext _localctx = new BinaryNumberContext(Context, State);
		EnterRule(_localctx, 206, RULE_binaryNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 880; Match(BINARY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 62: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 13);
		case 1: return Precpred(Context, 12);
		case 2: return Precpred(Context, 11);
		case 3: return Precpred(Context, 9);
		case 4: return Precpred(Context, 8);
		case 5: return Precpred(Context, 7);
		case 6: return Precpred(Context, 6);
		case 7: return Precpred(Context, 5);
		case 8: return Precpred(Context, 4);
		case 9: return Precpred(Context, 3);
		case 10: return Precpred(Context, 2);
		case 11: return Precpred(Context, 10);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x62\x375\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\a\x3"+
		"\xDB\n\x3\f\x3\xE\x3\xDE\v\x3\x3\x4\x3\x4\x3\x4\x5\x4\xE3\n\x4\x3\x4\x3"+
		"\x4\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\a\a\a\xEF\n\a\f\a\xE\a"+
		"\xF2\v\a\x3\a\x3\a\x3\b\x3\b\x3\t\x5\t\xF9\n\t\x3\t\x3\t\x3\n\x3\n\x3"+
		"\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\a\r\x109\n\r\f\r\xE\r"+
		"\x10C\v\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x5\xE\x113\n\xE\x3\xE\x5\xE\x116"+
		"\n\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x11E\n\xF\x3\x10\x3\x10"+
		"\x3\x11\x3\x11\x3\x11\a\x11\x125\n\x11\f\x11\xE\x11\x128\v\x11\x3\x12"+
		"\x5\x12\x12B\n\x12\x3\x12\x3\x12\x3\x12\x5\x12\x130\n\x12\x3\x13\x3\x13"+
		"\x3\x14\x3\x14\x3\x14\x5\x14\x137\n\x14\x3\x14\x5\x14\x13A\n\x14\x3\x14"+
		"\x3\x14\x3\x15\x3\x15\x3\x15\x5\x15\x141\n\x15\x3\x15\x5\x15\x144\n\x15"+
		"\x3\x16\x3\x16\x3\x17\x3\x17\x3\x18\x3\x18\x5\x18\x14C\n\x18\x3\x18\x3"+
		"\x18\x3\x19\x3\x19\x3\x19\a\x19\x153\n\x19\f\x19\xE\x19\x156\v\x19\x3"+
		"\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x15E\n\x1B\x3\x1B\x3\x1B"+
		"\x3\x1B\x5\x1B\x163\n\x1B\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x16A"+
		"\n\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x170\n\x1D\x3\x1E\x3\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\a\x1E\x177\n\x1E\f\x1E\xE\x1E\x17A\v\x1E\x3\x1E\x3"+
		"\x1E\x3\x1F\x3\x1F\x3 \x3 \x3 \x3 \x3 \x3!\x3!\x3\"\x3\"\x3\"\x3#\x3#"+
		"\x5#\x18C\n#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x5#\x19A"+
		"\n#\x3$\x3$\a$\x19E\n$\f$\xE$\x1A1\v$\x3$\x3$\x3%\x3%\x3%\x3%\x3%\x3%"+
		"\x5%\x1AB\n%\x3&\x3&\x3&\x3\'\x3\'\x3\'\x3\'\x5\'\x1B4\n\'\x3\'\x3\'\x3"+
		"\'\x3(\x3(\a(\x1BB\n(\f(\xE(\x1BE\v(\x3(\x5(\x1C1\n(\x3(\x3(\x3)\x3)\x3"+
		")\x3)\a)\x1C9\n)\f)\xE)\x1CC\v)\x3*\x3*\x3*\x6*\x1D1\n*\r*\xE*\x1D2\x3"+
		"+\x3+\x3+\x3+\x3+\x3+\x3,\x3,\x3,\x5,\x1DE\n,\x3,\x3,\x5,\x1E2\n,\x3,"+
		"\x3,\x5,\x1E6\n,\x3,\x3,\x3,\x3-\x3-\x3-\x5-\x1EE\n-\x3.\x3.\x3/\x3/\x3"+
		"\x30\x3\x30\x5\x30\x1F6\n\x30\x3\x30\x3\x30\x3\x31\x3\x31\x3\x31\x3\x32"+
		"\x3\x32\x3\x32\x3\x33\x3\x33\x3\x33\x3\x34\x3\x34\x5\x34\x205\n\x34\x3"+
		"\x34\x3\x34\x3\x34\x5\x34\x20A\n\x34\x3\x34\x3\x34\x5\x34\x20E\n\x34\x3"+
		"\x35\x3\x35\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x5\x36\x217\n\x36\x3\x37"+
		"\x3\x37\x3\x38\x3\x38\x5\x38\x21D\n\x38\x3\x39\x3\x39\x3\x39\a\x39\x222"+
		"\n\x39\f\x39\xE\x39\x225\v\x39\x3:\x3:\x3;\x3;\x5;\x22B\n;\x3;\x3;\x5"+
		";\x22F\n;\x3;\x3;\x3<\x3<\x3<\x3<\x3=\x3=\x3=\x3=\x3=\x3=\x3>\x3>\x3>"+
		"\a>\x240\n>\f>\xE>\x243\v>\x3?\x3?\x5?\x247\n?\x3@\x3@\x3@\x3@\x3@\x3"+
		"@\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x5@\x256\n@\x3@\x3@\x3@\x3@\x3@\x3@\x5@"+
		"\x25E\n@\x3@\x3@\x5@\x262\n@\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x5@\x26C"+
		"\n@\x3@\x3@\x5@\x270\n@\x3@\x3@\x5@\x274\n@\x3@\x3@\x5@\x278\n@\x3@\x3"+
		"@\x5@\x27C\n@\x3@\x3@\x5@\x280\n@\x3@\x3@\x5@\x284\n@\x5@\x286\n@\x3@"+
		"\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x3"+
		"@\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x3@"+
		"\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x3@\x3@\a@\x2B9\n@\f@\xE"+
		"@\x2BC\v@\x3\x41\x3\x41\x3\x42\x3\x42\x3\x43\x3\x43\x3\x44\x3\x44\x3\x45"+
		"\x3\x45\x3\x46\x3\x46\x3G\x3G\x3H\x3H\x3I\x3I\x3J\x3J\x3K\x3K\x3K\x3K"+
		"\x5K\x2D6\nK\x3L\x3L\x3L\x3L\x3M\x3M\x5M\x2DE\nM\x3M\x5M\x2E1\nM\x3M\x3"+
		"M\x3M\x3N\x3N\x3O\x3O\x3P\x3P\x3Q\x3Q\x3R\x3R\x5R\x2F0\nR\x3R\x3R\x3S"+
		"\x3S\x3S\aS\x2F7\nS\fS\xES\x2FA\vS\x3T\x3T\x5T\x2FE\nT\x3T\x5T\x301\n"+
		"T\x3U\x3U\x3U\x3U\x3U\x5U\x308\nU\x3U\x3U\x5U\x30C\nU\x5U\x30E\nU\x3V"+
		"\x3V\x3W\x3W\x3W\x3X\x3X\x3X\x3X\x3Y\x3Y\x5Y\x31B\nY\x3Y\x5Y\x31E\nY\x3"+
		"Z\x3Z\x3Z\x5Z\x323\nZ\x3Z\x5Z\x326\nZ\x3[\x3[\x3\\\x3\\\x5\\\x32C\n\\"+
		"\x3\\\x3\\\x3]\x3]\x3]\x3]\x3^\x3^\x5^\x336\n^\x3^\x3^\x3_\x3_\x3`\x3"+
		"`\x3`\x3`\a`\x340\n`\f`\xE`\x343\v`\x5`\x345\n`\x3\x61\x3\x61\x3\x61\x3"+
		"\x61\x3\x62\x3\x62\x3\x62\a\x62\x34E\n\x62\f\x62\xE\x62\x351\v\x62\x3"+
		"\x63\x3\x63\x3\x63\x3\x63\x3\x64\x3\x64\x5\x64\x359\n\x64\x3\x65\x5\x65"+
		"\x35C\n\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x5\x65\x363\n\x65\x3\x66"+
		"\x3\x66\x3\x66\x3\x66\x3\x66\x5\x66\x36A\n\x66\x3g\x3g\x3g\x5g\x36F\n"+
		"g\x3h\x3h\x3i\x3i\x3i\x2\x3~j\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A"+
		"\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42\x44\x46HJLNPRTVXZ\\^`\x62"+
		"\x64\x66hjlnprtvxz|~\x80\x82\x84\x86\x88\x8A\x8C\x8E\x90\x92\x94\x96\x98"+
		"\x9A\x9C\x9E\xA0\xA2\xA4\xA6\xA8\xAA\xAC\xAE\xB0\xB2\xB4\xB6\xB8\xBA\xBC"+
		"\xBE\xC0\xC2\xC4\xC6\xC8\xCA\xCC\xCE\xD0\x2\r\x3\x2(-\x3\x2<>\x3\x2@\x41"+
		"\x3\x2GH\x3\x2\x44\x45\x3\x2KN\x3\x2IJ\x3\x2\x42\x43\x4\x2??\x41\x41\x3"+
		"\x2Q\\\x4\x2..\x31\x31\x396\x2\xD2\x3\x2\x2\x2\x4\xDC\x3\x2\x2\x2\x6\xDF"+
		"\x3\x2\x2\x2\b\xE6\x3\x2\x2\x2\n\xE9\x3\x2\x2\x2\f\xEB\x3\x2\x2\x2\xE"+
		"\xF5\x3\x2\x2\x2\x10\xF8\x3\x2\x2\x2\x12\xFC\x3\x2\x2\x2\x14\xFE\x3\x2"+
		"\x2\x2\x16\x102\x3\x2\x2\x2\x18\x104\x3\x2\x2\x2\x1A\x112\x3\x2\x2\x2"+
		"\x1C\x11D\x3\x2\x2\x2\x1E\x11F\x3\x2\x2\x2 \x121\x3\x2\x2\x2\"\x12A\x3"+
		"\x2\x2\x2$\x131\x3\x2\x2\x2&\x133\x3\x2\x2\x2(\x13D\x3\x2\x2\x2*\x145"+
		"\x3\x2\x2\x2,\x147\x3\x2\x2\x2.\x149\x3\x2\x2\x2\x30\x14F\x3\x2\x2\x2"+
		"\x32\x157\x3\x2\x2\x2\x34\x15A\x3\x2\x2\x2\x36\x164\x3\x2\x2\x2\x38\x166"+
		"\x3\x2\x2\x2:\x171\x3\x2\x2\x2<\x17D\x3\x2\x2\x2>\x17F\x3\x2\x2\x2@\x184"+
		"\x3\x2\x2\x2\x42\x186\x3\x2\x2\x2\x44\x199\x3\x2\x2\x2\x46\x19B\x3\x2"+
		"\x2\x2H\x1A4\x3\x2\x2\x2J\x1AC\x3\x2\x2\x2L\x1AF\x3\x2\x2\x2N\x1B8\x3"+
		"\x2\x2\x2P\x1C4\x3\x2\x2\x2R\x1CD\x3\x2\x2\x2T\x1D4\x3\x2\x2\x2V\x1DA"+
		"\x3\x2\x2\x2X\x1ED\x3\x2\x2\x2Z\x1EF\x3\x2\x2\x2\\\x1F1\x3\x2\x2\x2^\x1F3"+
		"\x3\x2\x2\x2`\x1F9\x3\x2\x2\x2\x62\x1FC\x3\x2\x2\x2\x64\x1FF\x3\x2\x2"+
		"\x2\x66\x204\x3\x2\x2\x2h\x20F\x3\x2\x2\x2j\x216\x3\x2\x2\x2l\x218\x3"+
		"\x2\x2\x2n\x21C\x3\x2\x2\x2p\x21E\x3\x2\x2\x2r\x226\x3\x2\x2\x2t\x228"+
		"\x3\x2\x2\x2v\x232\x3\x2\x2\x2x\x236\x3\x2\x2\x2z\x23C\x3\x2\x2\x2|\x244"+
		"\x3\x2\x2\x2~\x285\x3\x2\x2\x2\x80\x2BD\x3\x2\x2\x2\x82\x2BF\x3\x2\x2"+
		"\x2\x84\x2C1\x3\x2\x2\x2\x86\x2C3\x3\x2\x2\x2\x88\x2C5\x3\x2\x2\x2\x8A"+
		"\x2C7\x3\x2\x2\x2\x8C\x2C9\x3\x2\x2\x2\x8E\x2CB\x3\x2\x2\x2\x90\x2CD\x3"+
		"\x2\x2\x2\x92\x2CF\x3\x2\x2\x2\x94\x2D1\x3\x2\x2\x2\x96\x2D7\x3\x2\x2"+
		"\x2\x98\x2DD\x3\x2\x2\x2\x9A\x2E5\x3\x2\x2\x2\x9C\x2E7\x3\x2\x2\x2\x9E"+
		"\x2E9\x3\x2\x2\x2\xA0\x2EB\x3\x2\x2\x2\xA2\x2ED\x3\x2\x2\x2\xA4\x2F3\x3"+
		"\x2\x2\x2\xA6\x2FD\x3\x2\x2\x2\xA8\x30D\x3\x2\x2\x2\xAA\x30F\x3\x2\x2"+
		"\x2\xAC\x311\x3\x2\x2\x2\xAE\x314\x3\x2\x2\x2\xB0\x31A\x3\x2\x2\x2\xB2"+
		"\x322\x3\x2\x2\x2\xB4\x327\x3\x2\x2\x2\xB6\x329\x3\x2\x2\x2\xB8\x32F\x3"+
		"\x2\x2\x2\xBA\x333\x3\x2\x2\x2\xBC\x339\x3\x2\x2\x2\xBE\x344\x3\x2\x2"+
		"\x2\xC0\x346\x3\x2\x2\x2\xC2\x34A\x3\x2\x2\x2\xC4\x352\x3\x2\x2\x2\xC6"+
		"\x358\x3\x2\x2\x2\xC8\x362\x3\x2\x2\x2\xCA\x369\x3\x2\x2\x2\xCC\x36E\x3"+
		"\x2\x2\x2\xCE\x370\x3\x2\x2\x2\xD0\x372\x3\x2\x2\x2\xD2\xD3\x5\x4\x3\x2"+
		"\xD3\x3\x3\x2\x2\x2\xD4\xDB\x5&\x14\x2\xD5\xDB\x5\x12\n\x2\xD6\xDB\x5"+
		"(\x15\x2\xD7\xDB\x5\x6\x4\x2\xD8\xDB\x5\x14\v\x2\xD9\xDB\x5\x38\x1D\x2"+
		"\xDA\xD4\x3\x2\x2\x2\xDA\xD5\x3\x2\x2\x2\xDA\xD6\x3\x2\x2\x2\xDA\xD7\x3"+
		"\x2\x2\x2\xDA\xD8\x3\x2\x2\x2\xDA\xD9\x3\x2\x2\x2\xDB\xDE\x3\x2\x2\x2"+
		"\xDC\xDA\x3\x2\x2\x2\xDC\xDD\x3\x2\x2\x2\xDD\x5\x3\x2\x2\x2\xDE\xDC\x3"+
		"\x2\x2\x2\xDF\xE0\a\x3\x2\x2\xE0\xE2\x5\n\x6\x2\xE1\xE3\x5\b\x5\x2\xE2"+
		"\xE1\x3\x2\x2\x2\xE2\xE3\x3\x2\x2\x2\xE3\xE4\x3\x2\x2\x2\xE4\xE5\x5\f"+
		"\a\x2\xE5\a\x3\x2\x2\x2\xE6\xE7\a\x38\x2\x2\xE7\xE8\x5\n\x6\x2\xE8\t\x3"+
		"\x2\x2\x2\xE9\xEA\a]\x2\x2\xEA\v\x3\x2\x2\x2\xEB\xF0\a$\x2\x2\xEC\xEF"+
		"\x5\xE\b\x2\xED\xEF\x5\x10\t\x2\xEE\xEC\x3\x2\x2\x2\xEE\xED\x3\x2\x2\x2"+
		"\xEF\xF2\x3\x2\x2\x2\xF0\xEE\x3\x2\x2\x2\xF0\xF1\x3\x2\x2\x2\xF1\xF3\x3"+
		"\x2\x2\x2\xF2\xF0\x3\x2\x2\x2\xF3\xF4\a%\x2\x2\xF4\r\x3\x2\x2\x2\xF5\xF6"+
		"\x5\x64\x33\x2\xF6\xF\x3\x2\x2\x2\xF7\xF9\a\f\x2\x2\xF8\xF7\x3\x2\x2\x2"+
		"\xF8\xF9\x3\x2\x2\x2\xF9\xFA\x3\x2\x2\x2\xFA\xFB\x5&\x14\x2\xFB\x11\x3"+
		"\x2\x2\x2\xFC\xFD\x5\x64\x33\x2\xFD\x13\x3\x2\x2\x2\xFE\xFF\a\xE\x2\x2"+
		"\xFF\x100\x5\x16\f\x2\x100\x101\x5\x18\r\x2\x101\x15\x3\x2\x2\x2\x102"+
		"\x103\a]\x2\x2\x103\x17\x3\x2\x2\x2\x104\x10A\a\"\x2\x2\x105\x109\x5\xE"+
		"\b\x2\x106\x109\x5\x1A\xE\x2\x107\x109\x5\x1C\xF\x2\x108\x105\x3\x2\x2"+
		"\x2\x108\x106\x3\x2\x2\x2\x108\x107\x3\x2\x2\x2\x109\x10C\x3\x2\x2\x2"+
		"\x10A\x108\x3\x2\x2\x2\x10A\x10B\x3\x2\x2\x2\x10B\x10D\x3\x2\x2\x2\x10C"+
		"\x10A\x3\x2\x2\x2\x10D\x10E\a#\x2\x2\x10E\x19\x3\x2\x2\x2\x10F\x110\x5"+
		"\x1E\x10\x2\x110\x111\a\x38\x2\x2\x111\x113\x3\x2\x2\x2\x112\x10F\x3\x2"+
		"\x2\x2\x112\x113\x3\x2\x2\x2\x113\x115\x3\x2\x2\x2\x114\x116\x5 \x11\x2"+
		"\x115\x114\x3\x2\x2\x2\x115\x116\x3\x2\x2\x2\x116\x117\x3\x2\x2\x2\x117"+
		"\x118\x5,\x17\x2\x118\x1B\x3\x2\x2\x2\x119\x11A\aQ\x2\x2\x11A\x11E\x5"+
		"$\x13\x2\x11B\x11C\a\x41\x2\x2\x11C\x11E\x5$\x13\x2\x11D\x119\x3\x2\x2"+
		"\x2\x11D\x11B\x3\x2\x2\x2\x11E\x1D\x3\x2\x2\x2\x11F\x120\a]\x2\x2\x120"+
		"\x1F\x3\x2\x2\x2\x121\x126\x5\"\x12\x2\x122\x123\a;\x2\x2\x123\x125\x5"+
		"\"\x12\x2\x124\x122\x3\x2\x2\x2\x125\x128\x3\x2\x2\x2\x126\x124\x3\x2"+
		"\x2\x2\x126\x127\x3\x2\x2\x2\x127!\x3\x2\x2\x2\x128\x126\x3\x2\x2\x2\x129"+
		"\x12B\a@\x2\x2\x12A\x129\x3\x2\x2\x2\x12A\x12B\x3\x2\x2\x2\x12B\x12C\x3"+
		"\x2\x2\x2\x12C\x12F\x5$\x13\x2\x12D\x12E\a\x41\x2\x2\x12E\x130\x5$\x13"+
		"\x2\x12F\x12D\x3\x2\x2\x2\x12F\x130\x3\x2\x2\x2\x130#\x3\x2\x2\x2\x131"+
		"\x132\a.\x2\x2\x132%\x3\x2\x2\x2\x133\x134\a\v\x2\x2\x134\x136\x5*\x16"+
		"\x2\x135\x137\x5.\x18\x2\x136\x135\x3\x2\x2\x2\x136\x137\x3\x2\x2\x2\x137"+
		"\x139\x3\x2\x2\x2\x138\x13A\x5\x32\x1A\x2\x139\x138\x3\x2\x2\x2\x139\x13A"+
		"\x3\x2\x2\x2\x13A\x13B\x3\x2\x2\x2\x13B\x13C\x5,\x17\x2\x13C\'\x3\x2\x2"+
		"\x2\x13D\x13E\a\n\x2\x2\x13E\x140\x5*\x16\x2\x13F\x141\x5.\x18\x2\x140"+
		"\x13F\x3\x2\x2\x2\x140\x141\x3\x2\x2\x2\x141\x143\x3\x2\x2\x2\x142\x144"+
		"\x5\x32\x1A\x2\x143\x142\x3\x2\x2\x2\x143\x144\x3\x2\x2\x2\x144)\x3\x2"+
		"\x2\x2\x145\x146\a]\x2\x2\x146+\x3\x2\x2\x2\x147\x148\x5\x46$\x2\x148"+
		"-\x3\x2\x2\x2\x149\x14B\a \x2\x2\x14A\x14C\x5\x30\x19\x2\x14B\x14A\x3"+
		"\x2\x2\x2\x14B\x14C\x3\x2\x2\x2\x14C\x14D\x3\x2\x2\x2\x14D\x14E\a!\x2"+
		"\x2\x14E/\x3\x2\x2\x2\x14F\x154\x5\x34\x1B\x2\x150\x151\a;\x2\x2\x151"+
		"\x153\x5\x34\x1B\x2\x152\x150\x3\x2\x2\x2\x153\x156\x3\x2\x2\x2\x154\x152"+
		"\x3\x2\x2\x2\x154\x155\x3\x2\x2\x2\x155\x31\x3\x2\x2\x2\x156\x154\x3\x2"+
		"\x2\x2\x157\x158\a\x38\x2\x2\x158\x159\x5j\x36\x2\x159\x33\x3\x2\x2\x2"+
		"\x15A\x15D\x5\x36\x1C\x2\x15B\x15C\a\x38\x2\x2\x15C\x15E\x5j\x36\x2\x15D"+
		"\x15B\x3\x2\x2\x2\x15D\x15E\x3\x2\x2\x2\x15E\x162\x3\x2\x2\x2\x15F\x163"+
		"\a\x37\x2\x2\x160\x161\aQ\x2\x2\x161\x163\x5\xC8\x65\x2\x162\x15F\x3\x2"+
		"\x2\x2\x162\x160\x3\x2\x2\x2\x162\x163\x3\x2\x2\x2\x163\x35\x3\x2\x2\x2"+
		"\x164\x165\a]\x2\x2\x165\x37\x3\x2\x2\x2\x166\x167\a\x4\x2\x2\x167\x169"+
		"\x5@!\x2\x168\x16A\x5\x42\"\x2\x169\x168\x3\x2\x2\x2\x169\x16A\x3\x2\x2"+
		"\x2\x16A\x16B\x3\x2\x2\x2\x16B\x16C\a\x38\x2\x2\x16C\x16F\x5\xBC_\x2\x16D"+
		"\x170\a\x39\x2\x2\x16E\x170\x5:\x1E\x2\x16F\x16D\x3\x2\x2\x2\x16F\x16E"+
		"\x3\x2\x2\x2\x170\x39\x3\x2\x2\x2\x171\x178\a$\x2\x2\x172\x177\x5<\x1F"+
		"\x2\x173\x174\x5> \x2\x174\x175\a\x39\x2\x2\x175\x177\x3\x2\x2\x2\x176"+
		"\x172\x3\x2\x2\x2\x176\x173\x3\x2\x2\x2\x177\x17A\x3\x2\x2\x2\x178\x176"+
		"\x3\x2\x2\x2\x178\x179\x3\x2\x2\x2\x179\x17B\x3\x2\x2\x2\x17A\x178\x3"+
		"\x2\x2\x2\x17B\x17C\a%\x2\x2\x17C;\x3\x2\x2\x2\x17D\x17E\x5\x64\x33\x2"+
		"\x17E=\x3\x2\x2\x2\x17F\x180\a\v\x2\x2\x180\x181\x5*\x16\x2\x181\x182"+
		"\x5.\x18\x2\x182\x183\x5\x32\x1A\x2\x183?\x3\x2\x2\x2\x184\x185\x5p\x39"+
		"\x2\x185\x41\x3\x2\x2\x2\x186\x187\a\x5\x2\x2\x187\x188\x5@!\x2\x188\x43"+
		"\x3\x2\x2\x2\x189\x18C\x5~@\x2\x18A\x18C\x5\x94K\x2\x18B\x189\x3\x2\x2"+
		"\x2\x18B\x18A\x3\x2\x2\x2\x18C\x18D\x3\x2\x2\x2\x18D\x18E\a\x39\x2\x2"+
		"\x18E\x19A\x3\x2\x2\x2\x18F\x19A\x5\x46$\x2\x190\x19A\a\x39\x2\x2\x191"+
		"\x19A\x5H%\x2\x192\x19A\x5T+\x2\x193\x19A\x5V,\x2\x194\x19A\x5L\'\x2\x195"+
		"\x19A\x5^\x30\x2\x196\x19A\x5`\x31\x2\x197\x19A\x5\x62\x32\x2\x198\x19A"+
		"\x5\x64\x33\x2\x199\x18B\x3\x2\x2\x2\x199\x18F\x3\x2\x2\x2\x199\x190\x3"+
		"\x2\x2\x2\x199\x191\x3\x2\x2\x2\x199\x192\x3\x2\x2\x2\x199\x193\x3\x2"+
		"\x2\x2\x199\x194\x3\x2\x2\x2\x199\x195\x3\x2\x2\x2\x199\x196\x3\x2\x2"+
		"\x2\x199\x197\x3\x2\x2\x2\x199\x198\x3\x2\x2\x2\x19A\x45\x3\x2\x2\x2\x19B"+
		"\x19F\a$\x2\x2\x19C\x19E\x5\x44#\x2\x19D\x19C\x3\x2\x2\x2\x19E\x1A1\x3"+
		"\x2\x2\x2\x19F\x19D\x3\x2\x2\x2\x19F\x1A0\x3\x2\x2\x2\x1A0\x1A2\x3\x2"+
		"\x2\x2\x1A1\x19F\x3\x2\x2\x2\x1A2\x1A3\a%\x2\x2\x1A3G\x3\x2\x2\x2\x1A4"+
		"\x1A5\a\x16\x2\x2\x1A5\x1A6\a \x2\x2\x1A6\x1A7\x5~@\x2\x1A7\x1A8\a!\x2"+
		"\x2\x1A8\x1AA\x5\x44#\x2\x1A9\x1AB\x5J&\x2\x1AA\x1A9\x3\x2\x2\x2\x1AA"+
		"\x1AB\x3\x2\x2\x2\x1ABI\x3\x2\x2\x2\x1AC\x1AD\a\x17\x2\x2\x1AD\x1AE\x5"+
		"\x44#\x2\x1AEK\x3\x2\x2\x2\x1AF\x1B0\a\x1C\x2\x2\x1B0\x1B3\a \x2\x2\x1B1"+
		"\x1B4\x5\x66\x34\x2\x1B2\x1B4\x5~@\x2\x1B3\x1B1\x3\x2\x2\x2\x1B3\x1B2"+
		"\x3\x2\x2\x2\x1B4\x1B5\x3\x2\x2\x2\x1B5\x1B6\a!\x2\x2\x1B6\x1B7\x5N(\x2"+
		"\x1B7M\x3\x2\x2\x2\x1B8\x1BC\a$\x2\x2\x1B9\x1BB\x5P)\x2\x1BA\x1B9\x3\x2"+
		"\x2\x2\x1BB\x1BE\x3\x2\x2\x2\x1BC\x1BA\x3\x2\x2\x2\x1BC\x1BD\x3\x2\x2"+
		"\x2\x1BD\x1C0\x3\x2\x2\x2\x1BE\x1BC\x3\x2\x2\x2\x1BF\x1C1\x5R*\x2\x1C0"+
		"\x1BF\x3\x2\x2\x2\x1C0\x1C1\x3\x2\x2\x2\x1C1\x1C2\x3\x2\x2\x2\x1C2\x1C3"+
		"\a%\x2\x2\x1C3O\x3\x2\x2\x2\x1C4\x1C5\a\x1D\x2\x2\x1C5\x1C6\x5~@\x2\x1C6"+
		"\x1CA\a\x38\x2\x2\x1C7\x1C9\x5\x44#\x2\x1C8\x1C7\x3\x2\x2\x2\x1C9\x1CC"+
		"\x3\x2\x2\x2\x1CA\x1C8\x3\x2\x2\x2\x1CA\x1CB\x3\x2\x2\x2\x1CBQ\x3\x2\x2"+
		"\x2\x1CC\x1CA\x3\x2\x2\x2\x1CD\x1CE\a\x1E\x2\x2\x1CE\x1D0\a\x38\x2\x2"+
		"\x1CF\x1D1\x5\x44#\x2\x1D0\x1CF\x3\x2\x2\x2\x1D1\x1D2\x3\x2\x2\x2\x1D2"+
		"\x1D0\x3\x2\x2\x2\x1D2\x1D3\x3\x2\x2\x2\x1D3S\x3\x2\x2\x2\x1D4\x1D5\a"+
		"\x18\x2\x2\x1D5\x1D6\a \x2\x2\x1D6\x1D7\x5~@\x2\x1D7\x1D8\a!\x2\x2\x1D8"+
		"\x1D9\x5\x44#\x2\x1D9U\x3\x2\x2\x2\x1DA\x1DB\a\x19\x2\x2\x1DB\x1DD\a "+
		"\x2\x2\x1DC\x1DE\x5X-\x2\x1DD\x1DC\x3\x2\x2\x2\x1DD\x1DE\x3\x2\x2\x2\x1DE"+
		"\x1DF\x3\x2\x2\x2\x1DF\x1E1\a\x39\x2\x2\x1E0\x1E2\x5Z.\x2\x1E1\x1E0\x3"+
		"\x2\x2\x2\x1E1\x1E2\x3\x2\x2\x2\x1E2\x1E3\x3\x2\x2\x2\x1E3\x1E5\a\x39"+
		"\x2\x2\x1E4\x1E6\x5\\/\x2\x1E5\x1E4\x3\x2\x2\x2\x1E5\x1E6\x3\x2\x2\x2"+
		"\x1E6\x1E7\x3\x2\x2\x2\x1E7\x1E8\a!\x2\x2\x1E8\x1E9\x5\x44#\x2\x1E9W\x3"+
		"\x2\x2\x2\x1EA\x1EE\x5\x66\x34\x2\x1EB\x1EE\x5~@\x2\x1EC\x1EE\x5\x94K"+
		"\x2\x1ED\x1EA\x3\x2\x2\x2\x1ED\x1EB\x3\x2\x2\x2\x1ED\x1EC\x3\x2\x2\x2"+
		"\x1EEY\x3\x2\x2\x2\x1EF\x1F0\x5~@\x2\x1F0[\x3\x2\x2\x2\x1F1\x1F2\x5~@"+
		"\x2\x1F2]\x3\x2\x2\x2\x1F3\x1F5\a\x1F\x2\x2\x1F4\x1F6\x5~@\x2\x1F5\x1F4"+
		"\x3\x2\x2\x2\x1F5\x1F6\x3\x2\x2\x2\x1F6\x1F7\x3\x2\x2\x2\x1F7\x1F8\a\x39"+
		"\x2\x2\x1F8_\x3\x2\x2\x2\x1F9\x1FA\a\x1A\x2\x2\x1FA\x1FB\a\x39\x2\x2\x1FB"+
		"\x61\x3\x2\x2\x2\x1FC\x1FD\a\x1B\x2\x2\x1FD\x1FE\a\x39\x2\x2\x1FE\x63"+
		"\x3\x2\x2\x2\x1FF\x200\x5\x66\x34\x2\x200\x201\a\x39\x2\x2\x201\x65\x3"+
		"\x2\x2\x2\x202\x205\a\x11\x2\x2\x203\x205\a\x12\x2\x2\x204\x202\x3\x2"+
		"\x2\x2\x204\x203\x3\x2\x2\x2\x205\x206\x3\x2\x2\x2\x206\x209\x5h\x35\x2"+
		"\x207\x208\a\x38\x2\x2\x208\x20A\x5j\x36\x2\x209\x207\x3\x2\x2\x2\x209"+
		"\x20A\x3\x2\x2\x2\x20A\x20D\x3\x2\x2\x2\x20B\x20C\aQ\x2\x2\x20C\x20E\x5"+
		"~@\x2\x20D\x20B\x3\x2\x2\x2\x20D\x20E\x3\x2\x2\x2\x20Eg\x3\x2\x2\x2\x20F"+
		"\x210\x5\xB4[\x2\x210i\x3\x2\x2\x2\x211\x217\x5l\x37\x2\x212\x217\x5n"+
		"\x38\x2\x213\x217\x5t;\x2\x214\x217\x5v<\x2\x215\x217\x5x=\x2\x216\x211"+
		"\x3\x2\x2\x2\x216\x212\x3\x2\x2\x2\x216\x213\x3\x2\x2\x2\x216\x214\x3"+
		"\x2\x2\x2\x216\x215\x3\x2\x2\x2\x217k\x3\x2\x2\x2\x218\x219\a\r\x2\x2"+
		"\x219m\x3\x2\x2\x2\x21A\x21D\x5r:\x2\x21B\x21D\x5p\x39\x2\x21C\x21A\x3"+
		"\x2\x2\x2\x21C\x21B\x3\x2\x2\x2\x21Do\x3\x2\x2\x2\x21E\x223\a]\x2\x2\x21F"+
		"\x220\a:\x2\x2\x220\x222\a]\x2\x2\x221\x21F\x3\x2\x2\x2\x222\x225\x3\x2"+
		"\x2\x2\x223\x221\x3\x2\x2\x2\x223\x224\x3\x2\x2\x2\x224q\x3\x2\x2\x2\x225"+
		"\x223\x3\x2\x2\x2\x226\x227\t\x2\x2\x2\x227s\x3\x2\x2\x2\x228\x22A\a "+
		"\x2\x2\x229\x22B\x5z>\x2\x22A\x229\x3\x2\x2\x2\x22A\x22B\x3\x2\x2\x2\x22B"+
		"\x22C\x3\x2\x2\x2\x22C\x22E\a&\x2\x2\x22D\x22F\x5j\x36\x2\x22E\x22D\x3"+
		"\x2\x2\x2\x22E\x22F\x3\x2\x2\x2\x22F\x230\x3\x2\x2\x2\x230\x231\a!\x2"+
		"\x2\x231u\x3\x2\x2\x2\x232\x233\a\"\x2\x2\x233\x234\x5j\x36\x2\x234\x235"+
		"\a#\x2\x2\x235w\x3\x2\x2\x2\x236\x237\a\"\x2\x2\x237\x238\x5j\x36\x2\x238"+
		"\x239\a\x38\x2\x2\x239\x23A\x5j\x36\x2\x23A\x23B\a#\x2\x2\x23By\x3\x2"+
		"\x2\x2\x23C\x241\x5|?\x2\x23D\x23E\a;\x2\x2\x23E\x240\x5|?\x2\x23F\x23D"+
		"\x3\x2\x2\x2\x240\x243\x3\x2\x2\x2\x241\x23F\x3\x2\x2\x2\x241\x242\x3"+
		"\x2\x2\x2\x242{\x3\x2\x2\x2\x243\x241\x3\x2\x2\x2\x244\x246\x5j\x36\x2"+
		"\x245\x247\a\x37\x2\x2\x246\x245\x3\x2\x2\x2\x246\x247\x3\x2\x2\x2\x247"+
		"}\x3\x2\x2\x2\x248\x249\b@\x1\x2\x249\x24A\a \x2\x2\x24A\x24B\x5j\x36"+
		"\x2\x24B\x24C\a!\x2\x2\x24C\x24D\x5~@\x11\x24D\x286\x3\x2\x2\x2\x24E\x24F"+
		"\x5\x9EP\x2\x24F\x250\x5~@\x10\x250\x286\x3\x2\x2\x2\x251\x252\a \x2\x2"+
		"\x252\x253\x5~@\x2\x253\x255\a!\x2\x2\x254\x256\x5\xB2Z\x2\x255\x254\x3"+
		"\x2\x2\x2\x255\x256\x3\x2\x2\x2\x256\x286\x3\x2\x2\x2\x257\x258\a \x2"+
		"\x2\x258\x259\x5\x94K\x2\x259\x25A\a!\x2\x2\x25A\x286\x3\x2\x2\x2\x25B"+
		"\x25D\a\xF\x2\x2\x25C\x25E\x5\xB0Y\x2\x25D\x25C\x3\x2\x2\x2\x25D\x25E"+
		"\x3\x2\x2\x2\x25E\x286\x3\x2\x2\x2\x25F\x261\a\x10\x2\x2\x260\x262\x5"+
		"\xB2Z\x2\x261\x260\x3\x2\x2\x2\x261\x262\x3\x2\x2\x2\x262\x286\x3\x2\x2"+
		"\x2\x263\x264\x5\x9AN\x2\x264\x265\x5\xA6T\x2\x265\x286\x3\x2\x2\x2\x266"+
		"\x267\x5\xA6T\x2\x267\x268\x5\x9CO\x2\x268\x286\x3\x2\x2\x2\x269\x26B"+
		"\x5\x98M\x2\x26A\x26C\x5\xB2Z\x2\x26B\x26A\x3\x2\x2\x2\x26B\x26C\x3\x2"+
		"\x2\x2\x26C\x286\x3\x2\x2\x2\x26D\x26F\x5\xB4[\x2\x26E\x270\x5\xB2Z\x2"+
		"\x26F\x26E\x3\x2\x2\x2\x26F\x270\x3\x2\x2\x2\x270\x286\x3\x2\x2\x2\x271"+
		"\x273\x5\xBA^\x2\x272\x274\x5\xB0Y\x2\x273\x272\x3\x2\x2\x2\x273\x274"+
		"\x3\x2\x2\x2\x274\x286\x3\x2\x2\x2\x275\x277\x5\xB6\\\x2\x276\x278\x5"+
		"\xB2Z\x2\x277\x276\x3\x2\x2\x2\x277\x278\x3\x2\x2\x2\x278\x286\x3\x2\x2"+
		"\x2\x279\x27B\x5\xB8]\x2\x27A\x27C\x5\xB2Z\x2\x27B\x27A\x3\x2\x2\x2\x27B"+
		"\x27C\x3\x2\x2\x2\x27C\x286\x3\x2\x2\x2\x27D\x27F\x5\x96L\x2\x27E\x280"+
		"\x5\xB2Z\x2\x27F\x27E\x3\x2\x2\x2\x27F\x280\x3\x2\x2\x2\x280\x286\x3\x2"+
		"\x2\x2\x281\x283\x5\xCA\x66\x2\x282\x284\x5\xB0Y\x2\x283\x282\x3\x2\x2"+
		"\x2\x283\x284\x3\x2\x2\x2\x284\x286\x3\x2\x2\x2\x285\x248\x3\x2\x2\x2"+
		"\x285\x24E\x3\x2\x2\x2\x285\x251\x3\x2\x2\x2\x285\x257\x3\x2\x2\x2\x285"+
		"\x25B\x3\x2\x2\x2\x285\x25F\x3\x2\x2\x2\x285\x263\x3\x2\x2\x2\x285\x266"+
		"\x3\x2\x2\x2\x285\x269\x3\x2\x2\x2\x285\x26D\x3\x2\x2\x2\x285\x271\x3"+
		"\x2\x2\x2\x285\x275\x3\x2\x2\x2\x285\x279\x3\x2\x2\x2\x285\x27D\x3\x2"+
		"\x2\x2\x285\x281\x3\x2\x2\x2\x286\x2BA\x3\x2\x2\x2\x287\x288\f\xF\x2\x2"+
		"\x288\x289\x5\x80\x41\x2\x289\x28A\x5~@\x10\x28A\x2B9\x3\x2\x2\x2\x28B"+
		"\x28C\f\xE\x2\x2\x28C\x28D\x5\x82\x42\x2\x28D\x28E\x5~@\xF\x28E\x2B9\x3"+
		"\x2\x2\x2\x28F\x290\f\r\x2\x2\x290\x291\x5\x8CG\x2\x291\x292\x5~@\xE\x292"+
		"\x2B9\x3\x2\x2\x2\x293\x294\f\v\x2\x2\x294\x295\x5\x84\x43\x2\x295\x296"+
		"\x5~@\f\x296\x2B9\x3\x2\x2\x2\x297\x298\f\n\x2\x2\x298\x299\x5\x86\x44"+
		"\x2\x299\x29A\x5~@\v\x29A\x2B9\x3\x2\x2\x2\x29B\x29C\f\t\x2\x2\x29C\x29D"+
		"\x5\x88\x45\x2\x29D\x29E\x5~@\n\x29E\x2B9\x3\x2\x2\x2\x29F\x2A0\f\b\x2"+
		"\x2\x2A0\x2A1\x5\x8A\x46\x2\x2A1\x2A2\x5~@\t\x2A2\x2B9\x3\x2\x2\x2\x2A3"+
		"\x2A4\f\a\x2\x2\x2A4\x2A5\x5\x8EH\x2\x2A5\x2A6\x5~@\b\x2A6\x2B9\x3\x2"+
		"\x2\x2\x2A7\x2A8\f\x6\x2\x2\x2A8\x2A9\x5\x90I\x2\x2A9\x2AA\x5~@\a\x2AA"+
		"\x2B9\x3\x2\x2\x2\x2AB\x2AC\f\x5\x2\x2\x2AC\x2AD\x5\x92J\x2\x2AD\x2AE"+
		"\x5~@\x6\x2AE\x2B9\x3\x2\x2\x2\x2AF\x2B0\f\x4\x2\x2\x2B0\x2B1\a\x6\x2"+
		"\x2\x2B1\x2B2\x5~@\x2\x2B2\x2B3\a\x38\x2\x2\x2B3\x2B4\x5~@\x4\x2B4\x2B9"+
		"\x3\x2\x2\x2\x2B5\x2B6\f\f\x2\x2\x2B6\x2B7\a\x15\x2\x2\x2B7\x2B9\x5j\x36"+
		"\x2\x2B8\x287\x3\x2\x2\x2\x2B8\x28B\x3\x2\x2\x2\x2B8\x28F\x3\x2\x2\x2"+
		"\x2B8\x293\x3\x2\x2\x2\x2B8\x297\x3\x2\x2\x2\x2B8\x29B\x3\x2\x2\x2\x2B8"+
		"\x29F\x3\x2\x2\x2\x2B8\x2A3\x3\x2\x2\x2\x2B8\x2A7\x3\x2\x2\x2\x2B8\x2AB"+
		"\x3\x2\x2\x2\x2B8\x2AF\x3\x2\x2\x2\x2B8\x2B5\x3\x2\x2\x2\x2B9\x2BC\x3"+
		"\x2\x2\x2\x2BA\x2B8\x3\x2\x2\x2\x2BA\x2BB\x3\x2\x2\x2\x2BB\x7F\x3\x2\x2"+
		"\x2\x2BC\x2BA\x3\x2\x2\x2\x2BD\x2BE\t\x3\x2\x2\x2BE\x81\x3\x2\x2\x2\x2BF"+
		"\x2C0\t\x4\x2\x2\x2C0\x83\x3\x2\x2\x2\x2C1\x2C2\t\x5\x2\x2\x2C2\x85\x3"+
		"\x2\x2\x2\x2C3\x2C4\t\x6\x2\x2\x2C4\x87\x3\x2\x2\x2\x2C5\x2C6\a\x45\x2"+
		"\x2\x2C6\x89\x3\x2\x2\x2\x2C7\x2C8\a\x46\x2\x2\x2C8\x8B\x3\x2\x2\x2\x2C9"+
		"\x2CA\t\a\x2\x2\x2CA\x8D\x3\x2\x2\x2\x2CB\x2CC\t\b\x2\x2\x2CC\x8F\x3\x2"+
		"\x2\x2\x2CD\x2CE\aO\x2\x2\x2CE\x91\x3\x2\x2\x2\x2CF\x2D0\aP\x2\x2\x2D0"+
		"\x93\x3\x2\x2\x2\x2D1\x2D2\x5\xA6T\x2\x2D2\x2D5\x5\xA0Q\x2\x2D3\x2D6\x5"+
		"~@\x2\x2D4\x2D6\x5\x94K\x2\x2D5\x2D3\x3\x2\x2\x2\x2D5\x2D4\x3\x2\x2\x2"+
		"\x2D6\x95\x3\x2\x2\x2\x2D7\x2D8\a\x14\x2\x2\x2D8\x2D9\x5n\x38\x2\x2D9"+
		"\x2DA\x5\xA2R\x2\x2DA\x97\x3\x2\x2\x2\x2DB\x2DE\x5\x34\x1B\x2\x2DC\x2DE"+
		"\x5.\x18\x2\x2DD\x2DB\x3\x2\x2\x2\x2DD\x2DC\x3\x2\x2\x2\x2DE\x2E0\x3\x2"+
		"\x2\x2\x2DF\x2E1\x5\x32\x1A\x2\x2E0\x2DF\x3\x2\x2\x2\x2E0\x2E1\x3\x2\x2"+
		"\x2\x2E1\x2E2\x3\x2\x2\x2\x2E2\x2E3\a\'\x2\x2\x2E3\x2E4\x5,\x17\x2\x2E4"+
		"\x99\x3\x2\x2\x2\x2E5\x2E6\t\t\x2\x2\x2E6\x9B\x3\x2\x2\x2\x2E7\x2E8\t"+
		"\t\x2\x2\x2E8\x9D\x3\x2\x2\x2\x2E9\x2EA\t\n\x2\x2\x2EA\x9F\x3\x2\x2\x2"+
		"\x2EB\x2EC\t\v\x2\x2\x2EC\xA1\x3\x2\x2\x2\x2ED\x2EF\a \x2\x2\x2EE\x2F0"+
		"\x5\xA4S\x2\x2EF\x2EE\x3\x2\x2\x2\x2EF\x2F0\x3\x2\x2\x2\x2F0\x2F1\x3\x2"+
		"\x2\x2\x2F1\x2F2\a!\x2\x2\x2F2\xA3\x3\x2\x2\x2\x2F3\x2F8\x5~@\x2\x2F4"+
		"\x2F5\a;\x2\x2\x2F5\x2F7\x5~@\x2\x2F6\x2F4\x3\x2\x2\x2\x2F7\x2FA\x3\x2"+
		"\x2\x2\x2F8\x2F6\x3\x2\x2\x2\x2F8\x2F9\x3\x2\x2\x2\x2F9\xA5\x3\x2\x2\x2"+
		"\x2FA\x2F8\x3\x2\x2\x2\x2FB\x2FE\x5\xB4[\x2\x2FC\x2FE\a\xF\x2\x2\x2FD"+
		"\x2FB\x3\x2\x2\x2\x2FD\x2FC\x3\x2\x2\x2\x2FE\x300\x3\x2\x2\x2\x2FF\x301"+
		"\x5\xA8U\x2\x300\x2FF\x3\x2\x2\x2\x300\x301\x3\x2\x2\x2\x301\xA7\x3\x2"+
		"\x2\x2\x302\x303\x5\xAAV\x2\x303\x304\x5\xA8U\x2\x304\x30E\x3\x2\x2\x2"+
		"\x305\x307\x5\xACW\x2\x306\x308\x5\xA8U\x2\x307\x306\x3\x2\x2\x2\x307"+
		"\x308\x3\x2\x2\x2\x308\x30E\x3\x2\x2\x2\x309\x30B\x5\xAEX\x2\x30A\x30C"+
		"\x5\xA8U\x2\x30B\x30A\x3\x2\x2\x2\x30B\x30C\x3\x2\x2\x2\x30C\x30E\x3\x2"+
		"\x2\x2\x30D\x302\x3\x2\x2\x2\x30D\x305\x3\x2\x2\x2\x30D\x309\x3\x2\x2"+
		"\x2\x30E\xA9\x3\x2\x2\x2\x30F\x310\x5\xA2R\x2\x310\xAB\x3\x2\x2\x2\x311"+
		"\x312\a:\x2\x2\x312\x313\x5\xB4[\x2\x313\xAD\x3\x2\x2\x2\x314\x315\a\""+
		"\x2\x2\x315\x316\x5~@\x2\x316\x317\a#\x2\x2\x317\xAF\x3\x2\x2\x2\x318"+
		"\x31B\x5\xACW\x2\x319\x31B\x5\xAEX\x2\x31A\x318\x3\x2\x2\x2\x31A\x319"+
		"\x3\x2\x2\x2\x31B\x31D\x3\x2\x2\x2\x31C\x31E\x5\xB2Z\x2\x31D\x31C\x3\x2"+
		"\x2\x2\x31D\x31E\x3\x2\x2\x2\x31E\xB1\x3\x2\x2\x2\x31F\x323\x5\xAAV\x2"+
		"\x320\x323\x5\xACW\x2\x321\x323\x5\xAEX\x2\x322\x31F\x3\x2\x2\x2\x322"+
		"\x320\x3\x2\x2\x2\x322\x321\x3\x2\x2\x2\x323\x325\x3\x2\x2\x2\x324\x326"+
		"\x5\xB2Z\x2\x325\x324\x3\x2\x2\x2\x325\x326\x3\x2\x2\x2\x326\xB3\x3\x2"+
		"\x2\x2\x327\x328\a]\x2\x2\x328\xB5\x3\x2\x2\x2\x329\x32B\a\"\x2\x2\x32A"+
		"\x32C\x5\xA4S\x2\x32B\x32A\x3\x2\x2\x2\x32B\x32C\x3\x2\x2\x2\x32C\x32D"+
		"\x3\x2\x2\x2\x32D\x32E\a#\x2\x2\x32E\xB7\x3\x2\x2\x2\x32F\x330\a\"\x2"+
		"\x2\x330\x331\x5\xBE`\x2\x331\x332\a#\x2\x2\x332\xB9\x3\x2\x2\x2\x333"+
		"\x335\a$\x2\x2\x334\x336\x5\xC2\x62\x2\x335\x334\x3\x2\x2\x2\x335\x336"+
		"\x3\x2\x2\x2\x336\x337\x3\x2\x2\x2\x337\x338\a%\x2\x2\x338\xBB\x3\x2\x2"+
		"\x2\x339\x33A\a\a\x2\x2\x33A\xBD\x3\x2\x2\x2\x33B\x345\a\x38\x2\x2\x33C"+
		"\x341\x5\xC0\x61\x2\x33D\x33E\a;\x2\x2\x33E\x340\x5\xC0\x61\x2\x33F\x33D"+
		"\x3\x2\x2\x2\x340\x343\x3\x2\x2\x2\x341\x33F\x3\x2\x2\x2\x341\x342\x3"+
		"\x2\x2\x2\x342\x345\x3\x2\x2\x2\x343\x341\x3\x2\x2\x2\x344\x33B\x3\x2"+
		"\x2\x2\x344\x33C\x3\x2\x2\x2\x345\xBF\x3\x2\x2\x2\x346\x347\x5~@\x2\x347"+
		"\x348\a\x38\x2\x2\x348\x349\x5~@\x2\x349\xC1\x3\x2\x2\x2\x34A\x34F\x5"+
		"\xC4\x63\x2\x34B\x34C\a;\x2\x2\x34C\x34E\x5\xC4\x63\x2\x34D\x34B\x3\x2"+
		"\x2\x2\x34E\x351\x3\x2\x2\x2\x34F\x34D\x3\x2\x2\x2\x34F\x350\x3\x2\x2"+
		"\x2\x350\xC3\x3\x2\x2\x2\x351\x34F\x3\x2\x2\x2\x352\x353\x5\xC6\x64\x2"+
		"\x353\x354\a\x38\x2\x2\x354\x355\x5~@\x2\x355\xC5\x3\x2\x2\x2\x356\x359"+
		"\a]\x2\x2\x357\x359\x5\xBC_\x2\x358\x356\x3\x2\x2\x2\x358\x357\x3\x2\x2"+
		"\x2\x359\xC7\x3\x2\x2\x2\x35A\x35C\a\x41\x2\x2\x35B\x35A\x3\x2\x2\x2\x35B"+
		"\x35C\x3\x2\x2\x2\x35C\x35D\x3\x2\x2\x2\x35D\x363\x5\xCCg\x2\x35E\x363"+
		"\a\x32\x2\x2\x35F\x363\a\x33\x2\x2\x360\x363\a\x34\x2\x2\x361\x363\x5"+
		"\xBC_\x2\x362\x35B\x3\x2\x2\x2\x362\x35E\x3\x2\x2\x2\x362\x35F\x3\x2\x2"+
		"\x2\x362\x360\x3\x2\x2\x2\x362\x361\x3\x2\x2\x2\x363\xC9\x3\x2\x2\x2\x364"+
		"\x36A\x5\xCCg\x2\x365\x36A\a\x32\x2\x2\x366\x36A\a\x33\x2\x2\x367\x36A"+
		"\a\x34\x2\x2\x368\x36A\x5\xBC_\x2\x369\x364\x3\x2\x2\x2\x369\x365\x3\x2"+
		"\x2\x2\x369\x366\x3\x2\x2\x2\x369\x367\x3\x2\x2\x2\x369\x368\x3\x2\x2"+
		"\x2\x36A\xCB\x3\x2\x2\x2\x36B\x36F\x5\xCEh\x2\x36C\x36F\x5\xD0i\x2\x36D"+
		"\x36F\t\f\x2\x2\x36E\x36B\x3\x2\x2\x2\x36E\x36C\x3\x2\x2\x2\x36E\x36D"+
		"\x3\x2\x2\x2\x36F\xCD\x3\x2\x2\x2\x370\x371\a/\x2\x2\x371\xCF\x3\x2\x2"+
		"\x2\x372\x373\a\x30\x2\x2\x373\xD1\x3\x2\x2\x2Y\xDA\xDC\xE2\xEE\xF0\xF8"+
		"\x108\x10A\x112\x115\x11D\x126\x12A\x12F\x136\x139\x140\x143\x14B\x154"+
		"\x15D\x162\x169\x16F\x176\x178\x18B\x199\x19F\x1AA\x1B3\x1BC\x1C0\x1CA"+
		"\x1D2\x1DD\x1E1\x1E5\x1ED\x1F5\x204\x209\x20D\x216\x21C\x223\x22A\x22E"+
		"\x241\x246\x255\x25D\x261\x26B\x26F\x273\x277\x27B\x27F\x283\x285\x2B8"+
		"\x2BA\x2D5\x2DD\x2E0\x2EF\x2F8\x2FD\x300\x307\x30B\x30D\x31A\x31D\x322"+
		"\x325\x32B\x335\x341\x344\x34F\x358\x35B\x362\x369\x36E";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
