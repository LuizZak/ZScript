using System.Collections.Generic;

using Antlr4.Runtime;
using Antlr4.Runtime.Tree;

using ZScript.CodeGeneration.Messages;
using ZScript.Runtime;

namespace ZScript.CodeGeneration
{
    /// <summary>
    /// Helper entry point for the ZScript library
    /// </summary>
    public class ZScriptGenerator
    {
        /// <summary>
        /// The input string to parse
        /// </summary>
        private string _input;

        /// <summary>
        /// The error listener for the parsing of the script
        /// </summary>
        private ZScriptErrorListener _errorListener;

        /// <summary>
        /// The parse tree that was generated by the parser
        /// </summary>
        private IParseTree _tree;

        /// <summary>
        /// Gets or sets the script string input
        /// </summary>
        public string Input
        {
            get { return _input; }
            set { _input = value; }
        }

        /// <summary>
        /// Returns the array of all the syntax errors that were found during the parsing of the script
        /// </summary>
        public SyntaxError[] SyntaxErrors
        {
            get { return _errorListener.SyntaxErrors.ToArray(); }
        }

        /// <summary>
        /// Gets a value specifying whether there were any syntax errors on the script generation process
        /// </summary>
        public bool HasSyntaxErrors
        {
            get { return _errorListener != null && _errorListener.SyntaxErrors.Count > 0; }
        }

        /// <summary>
        /// Creates a new instance of the ZScriptGenerator class using a specified string as input
        /// </summary>
        /// <param name="input">The input string containing the code to parse</param>
        public ZScriptGenerator(string input)
        {
            _input = input;
        }

        /// <summary>
        /// Parses the input string
        /// </summary>
        public void ParseInputString()
        {
            _errorListener = new ZScriptErrorListener();

            AntlrInputStream stream = new AntlrInputStream(_input);
            ITokenSource lexer = new ZScriptLexer(stream);
            ITokenStream tokens = new CommonTokenStream(lexer);
            ZScriptParser parser = new ZScriptParser(tokens) { BuildParseTree = true };

            parser.AddErrorListener(_errorListener);

            _tree = parser.program();
        }

        /// <summary>
        /// Generates a new runtime based on the script that was parsed, setting the provided runtime owner as the owner of the runtime object to create
        /// </summary>
        /// <param name="owner">A runtime owner object that will own the runtime to be created</param>
        /// <returns>A newly created ZRuntime object that can be used to execute the parsed code</returns>
        public ZRuntime GenerateRuntime(IRuntimeOwner owner)
        {
            return new ZRuntime(owner);
        }

        /// <summary>
        /// Error listener for the parsing
        /// </summary>
        private class ZScriptErrorListener : BaseErrorListener
        {
            /// <summary>
            /// A list of all the syntax errors reported
            /// </summary>
            public readonly List<SyntaxError> SyntaxErrors = new List<SyntaxError>();

            // 
            // SintaxError listener
            // 
            public override void SyntaxError(IRecognizer recognizer, IToken offendingSymbol, int line, int charPositionInLine, string msg, RecognitionException e)
            {
                SyntaxErrors.Add(new SyntaxError(line, charPositionInLine, msg));
            }
        }
    }
}